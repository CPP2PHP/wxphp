#include "php_wxwidgets.h"
#include "frame.h"
void php_wxFrame_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxFrame, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxFrame_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr1, wxConvUTF8));
					break;
				case 6:
					_this = new wxFrame_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxFrame_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxFrame_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxFrame_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxFrame);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxFrame_php*) _this)->evnArray);
			array_init(((wxFrame_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxFrame_php*) _this)->phpObj);
			*((wxFrame_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxFrame_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxFrame_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxFrame_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxFrame);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxFrame_php*) _this)->evnArray);
			array_init(((wxFrame_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxFrame_php*) _this)->phpObj);
			*((wxFrame_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxFrame_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxFrame_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxFrame, CreateStatusBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!l!s!", &_argLong0 , &_argLong1 , &_argLong2 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxStatusBar* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxFrame_php*)_this)->CreateStatusBar((int)_argLong0 , (long int)_argLong1 , (int)_argLong2 , wxString(_argStr0, wxConvUTF8));
					break;
				case 3:
					ret0 =  ((wxFrame_php*)_this)->CreateStatusBar((int)_argLong0 , (long int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					ret0 =  ((wxFrame_php*)_this)->CreateStatusBar((int)_argLong0 , (long int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxFrame_php*)_this)->CreateStatusBar((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxFrame_php*)_this)->CreateStatusBar();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxStatusBar_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxStatusBar));return;			
		}
	}
}
PHP_METHOD(php_wxFrame, CreateToolBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!s!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxToolBar* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxFrame_php*)_this)->CreateToolBar((long int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					ret0 =  ((wxFrame_php*)_this)->CreateToolBar((long int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxFrame_php*)_this)->CreateToolBar((long int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxFrame_php*)_this)->CreateToolBar();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBar_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBar));return;			
		}
	}
}
PHP_METHOD(php_wxFrame, GetClientAreaOrigin)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFrame_php*)_this)->GetClientAreaOrigin();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxPoint),0);memcpy(ptr,&ret0,sizeof(wxPoint));object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxFrame, SetStatusBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFrame_php*)_this)->SetStatusBar((wxStatusBar*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFrame, SetToolBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFrame_php*)_this)->SetToolBar((wxToolBar*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxEvent, GetId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxEvent_php*)_this)->GetId();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxEvent, SetEventType)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxEvent_php*)_this)->SetEventType((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxEvent, GetEventType)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxEvent_php*)_this)->GetEventType();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxEvent, GetEventObject)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxObject* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxEvent_php*)_this)->GetEventObject();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxObject_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxObject));return;			
		}
	}
}
PHP_METHOD(php_wxEvent, SetEventObject)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxEvent_php*)_this)->SetEventObject((wxObject*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxEvent, GetTimestamp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxEvent_php*)_this)->GetTimestamp();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxEvent, SetTimestamp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxEvent_php*)_this)->SetTimestamp((long int)_argLong0);
					break;
				case 0:
					 ((wxEvent_php*)_this)->SetTimestamp();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxEvent, SetId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxEvent_php*)_this)->SetId((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxEvent, Skip)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxEvent_php*)_this)->Skip(_argBool0);
					break;
				case 0:
					 ((wxEvent_php*)_this)->Skip();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxEvent, GetSkipped)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxEvent_php*)_this)->GetSkipped();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxEvent, IsCommandEvent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxEvent_php*)_this)->IsCommandEvent();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxEvent, ShouldPropagate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxEvent_php*)_this)->ShouldPropagate();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxEvent, StopPropagation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxEvent_php*)_this)->StopPropagation();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxEvent, ResumePropagation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxEvent_php*)_this)->ResumePropagation((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxEvent, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxEvent_php((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					_this = new wxEvent_php((int)_argLong0);
					break;
				case 0:
					_this = new wxEvent_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxEvent);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxEvent_php*) _this)->evnArray);
			array_init(((wxEvent_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxEvent_php*) _this)->phpObj);
			*((wxEvent_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxEvent_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
wxEvent* wxEvent_php::Clone() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Clone", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return (wxEvent*) zend_object_store_get_object(&retval TSRMLS_CC);	}
	}
PHP_METHOD(php_wxEvent, Clone)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxEvent* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxEvent_php*)_this)->Clone();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxEvent_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxEvent));return;			
		}
	}
}
void php_wxWindow_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxWindow, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxWindow);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxWindow_php*) _this)->evnArray);
			array_init(((wxWindow_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxWindow_php*) _this)->phpObj);
			*((wxWindow_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxWindow_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxWindow_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxWindow_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxWindow);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxWindow_php*) _this)->evnArray);
			array_init(((wxWindow_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxWindow_php*) _this)->phpObj);
			*((wxWindow_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxWindow_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxWindow_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxWindow, Show)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxWindow_php*)_this)->Show(_argBool0);
					break;
				case 0:
					ret0 =  ((wxWindow_php*)_this)->Show();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, Create)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					ret0 =  ((wxWindow_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					ret0 =  ((wxWindow_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					ret0 =  ((wxWindow_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					ret0 =  ((wxWindow_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					ret0 =  ((wxWindow_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, Destroy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxWindow_php*)_this)->Destroy();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, Raise)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxWindow_php*)_this)->Raise();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, Lower)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxWindow_php*)_this)->Lower();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, Enable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxWindow_php*)_this)->Enable(_argBool0);
					break;
				case 0:
					ret0 =  ((wxWindow_php*)_this)->Enable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, IsRetained)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxWindow_php*)_this)->IsRetained();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, SetFocus)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxWindow_php*)_this)->SetFocus();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, Reparent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxWindow && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook && rsrc_type != le_wxRadioBox))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxWindow_php*)_this)->Reparent((wxWindowBase*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, WarpPointer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxWindow_php*)_this)->WarpPointer((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, Update)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxWindow_php*)_this)->Update();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, ClearBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxWindow_php*)_this)->ClearBackground();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, SetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxWindow_php*)_this)->SetBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, SetForegroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxWindow_php*)_this)->SetForegroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, SetCursor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxWindow_php*)_this)->SetCursor(*(wxCursor *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, SetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxWindow_php*)_this)->SetFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, GetCharHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxWindow_php*)_this)->GetCharHeight();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, GetCharWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxWindow_php*)_this)->GetCharWidth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, SetScrollbar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!|b!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					 ((wxWindow_php*)_this)->SetScrollbar((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , _argBool0);
					break;
				case 4:
					 ((wxWindow_php*)_this)->SetScrollbar((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, SetScrollPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|b!", &_argLong0 , &_argLong1 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxWindow_php*)_this)->SetScrollPos((int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				case 2:
					 ((wxWindow_php*)_this)->SetScrollPos((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, GetScrollThumb)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxWindow_php*)_this)->GetScrollThumb((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, GetScrollRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxWindow_php*)_this)->GetScrollRange((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, AddChild)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxWindow && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook && rsrc_type != le_wxRadioBox))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxWindow_php*)_this)->AddChild((wxWindowBase*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, RemoveChild)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxWindow && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook && rsrc_type != le_wxRadioBox))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxWindow_php*)_this)->RemoveChild((wxWindowBase*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, GetHandle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxWindow_php*)_this)->GetHandle();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, Refresh)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!z!", &_argBool0 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxWindow_php*)_this)->Refresh(_argBool0 , (wxRect*) _ptrObj0);
					break;
				case 1:
					 ((wxWindow_php*)_this)->Refresh(_argBool0);
					break;
				case 0:
					 ((wxWindow_php*)_this)->Refresh();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindow, IsFrozen)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxWindow_php*)_this)->IsFrozen();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindow, SetWindowStyleFlag)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxWindow_php*)_this)->SetWindowStyleFlag((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxPoint_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxPoint, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxPoint_php((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxPoint);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxPoint_php*) _this)->evnArray);
			array_init(((wxPoint_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxPoint_php*) _this)->phpObj);
			*((wxPoint_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxPoint_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxPoint_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxSize_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSize, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxSize_php((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxSize);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxSize_php*) _this)->evnArray);
			array_init(((wxSize_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxSize_php*) _this)->phpObj);
			*((wxSize_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxSize_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxSize_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxToolBar_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxToolBar, SetMargins)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxToolBar_php*)_this)->SetMargins((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxToolBar, SetToolSeparation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxToolBar_php*)_this)->SetToolSeparation((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxToolBar, SetToolNormalBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxToolBar_php*)_this)->SetToolNormalBitmap((int)_argLong0 , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxToolBar, SetToolDisabledBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxToolBar_php*)_this)->SetToolDisabledBitmap((int)_argLong0 , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxToolBar, SetToolShortHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxToolBar_php*)_this)->SetToolShortHelp((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxToolBar, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxToolBar_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxToolBar);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxToolBar_php*) _this)->evnArray);
			array_init(((wxToolBar_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxToolBar_php*) _this)->phpObj);
			*((wxToolBar_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxToolBar_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxToolBar_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxToolBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxToolBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxToolBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxToolBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxToolBar_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxToolBar);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxToolBar_php*) _this)->evnArray);
			array_init(((wxToolBar_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxToolBar_php*) _this)->phpObj);
			*((wxToolBar_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxToolBar_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxToolBar_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxToolBar, FindToolForPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxToolBarToolBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxToolBar_php*)_this)->FindToolForPosition((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBarToolBase));return;			
		}
	}
}
void php_wxStatusBar_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxStatusBar, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxStatusBar_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxStatusBar);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxStatusBar_php*) _this)->evnArray);
			array_init(((wxStatusBar_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxStatusBar_php*) _this)->phpObj);
			*((wxStatusBar_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxStatusBar_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxStatusBar_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!|s!", &_argObj0 , &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					_this = new wxStatusBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 3:
					_this = new wxStatusBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxStatusBar);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxStatusBar_php*) _this)->evnArray);
			array_init(((wxStatusBar_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxStatusBar_php*) _this)->phpObj);
			*((wxStatusBar_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxStatusBar_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxStatusBar_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxStatusBar, SetStatusText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStatusBar_php*)_this)->SetStatusText(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 1:
					 ((wxStatusBar_php*)_this)->SetStatusText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStatusBar, GetStatusText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStatusBar_php*)_this)->GetStatusText((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxStatusBar_php*)_this)->GetStatusText();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxStatusBar, GetFieldRect)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxStatusBar_php*)_this)->GetFieldRect((int)_argLong0 , *(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxBoxSizer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxBoxSizer, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxBoxSizer_php((int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBoxSizer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBoxSizer_php*) _this)->evnArray);
			array_init(((wxBoxSizer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBoxSizer_php*) _this)->phpObj);
			*((wxBoxSizer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBoxSizer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBoxSizer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxBoxSizer, RecalcSizes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxBoxSizer_php*)_this)->RecalcSizes();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBoxSizer, GetOrientation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBoxSizer_php*)_this)->GetOrientation();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxBoxSizer, CalcMin)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBoxSizer_php*)_this)->CalcMin();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxBoxSizer, SetOrientation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBoxSizer_php*)_this)->SetOrientation((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxSizer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSizer, Add)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!l!l!z!", &_argObj0 , &_argLong0 , &_argLong1 , &_argLong2 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret0 =  ((wxSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (wxObject*) _ptrObj1);
					break;
				case 4:
					ret0 =  ((wxSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					ret0 =  ((wxSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				case 2:
					ret0 =  ((wxSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret0 =  ((wxSizer_php*)_this)->Add((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSizerItem* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , *(wxSizerFlags *) _ptrObj1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!l!l!z!", &_argObj0 , &_argLong0 , &_argLong1 , &_argLong2 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret2 =  ((wxSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (wxObject*) _ptrObj1);
					break;
				case 4:
					ret2 =  ((wxSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					ret2 =  ((wxSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				case 2:
					ret2 =  ((wxSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret2 =  ((wxSizer_php*)_this)->Add((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret2, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSizerItem* ret3;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret3 =  ((wxSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , *(wxSizerFlags *) _ptrObj1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret3, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|l!l!l!z!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argLong4 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret4;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					ret4 =  ((wxSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4 , (wxObject*) _ptrObj0);
					break;
				case 5:
					ret4 =  ((wxSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4);
					break;
				case 4:
					ret4 =  ((wxSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				case 3:
					ret4 =  ((wxSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					ret4 =  ((wxSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret4, le_wxSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, AddSpacer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxSizer_php*)_this)->AddSpacer((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, AddStretchSpacer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxSizer_php*)_this)->AddStretchSpacer((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxSizer_php*)_this)->AddStretchSpacer();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, Insert)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	long _argLong5;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!|l!l!l!z!", &_argLong0 , &_argObj0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					ret0 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (wxObject*) _ptrObj1);
					break;
				case 5:
					ret0 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				case 4:
					ret0 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					ret0 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , (int)_argLong1);
					break;
				case 2:
					ret0 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!|l!l!l!z!", &_argLong0 , &_argObj0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					ret1 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxSizer*) _ptrObj0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (wxObject*) _ptrObj1);
					break;
				case 5:
					ret1 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxSizer*) _ptrObj0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				case 4:
					ret1 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxSizer*) _ptrObj0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					ret1 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxSizer*) _ptrObj0 , (int)_argLong1);
					break;
				case 2:
					ret1 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!|l!l!l!z!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argLong4 , &_argLong5 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					ret2 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4 , (int)_argLong5 , (wxObject*) _ptrObj0);
					break;
				case 6:
					ret2 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4 , (int)_argLong5);
					break;
				case 5:
					ret2 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4);
					break;
				case 4:
					ret2 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				case 3:
					ret2 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret2, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!z!", &_argLong0 , &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSizerItem* ret3;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret3 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , *(wxSizerFlags *) _ptrObj1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret3, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!z!", &_argLong0 , &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSizerItem* ret4;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret4 =  ((wxSizer_php*)_this)->Insert((unsigned int)_argLong0 , (wxSizer*) _ptrObj0 , *(wxSizerFlags *) _ptrObj1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret4, le_wxSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, InsertSpacer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxSizer_php*)_this)->InsertSpacer((unsigned int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, InsertStretchSpacer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxSizer_php*)_this)->InsertStretchSpacer((unsigned int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxSizer_php*)_this)->InsertStretchSpacer((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, Prepend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxSizer_php*)_this)->Prepend((wxWindow*) _ptrObj0 , *(wxSizerFlags *) _ptrObj1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!l!l!z!", &_argObj0 , &_argLong0 , &_argLong1 , &_argLong2 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret1 =  ((wxSizer_php*)_this)->Prepend((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (wxObject*) _ptrObj1);
					break;
				case 4:
					ret1 =  ((wxSizer_php*)_this)->Prepend((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					ret1 =  ((wxSizer_php*)_this)->Prepend((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				case 2:
					ret1 =  ((wxSizer_php*)_this)->Prepend((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret1 =  ((wxSizer_php*)_this)->Prepend((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!l!l!z!", &_argObj0 , &_argLong0 , &_argLong1 , &_argLong2 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret2 =  ((wxSizer_php*)_this)->Prepend((wxSizer*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (wxObject*) _ptrObj1);
					break;
				case 4:
					ret2 =  ((wxSizer_php*)_this)->Prepend((wxSizer*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					ret2 =  ((wxSizer_php*)_this)->Prepend((wxSizer*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				case 2:
					ret2 =  ((wxSizer_php*)_this)->Prepend((wxSizer*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret2 =  ((wxSizer_php*)_this)->Prepend((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret2, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSizerItem* ret3;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret3 =  ((wxSizer_php*)_this)->Prepend((wxSizer*) _ptrObj0 , *(wxSizerFlags *) _ptrObj1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret3, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|l!l!l!z!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argLong4 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret4;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					ret4 =  ((wxSizer_php*)_this)->Prepend((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4 , (wxObject*) _ptrObj0);
					break;
				case 5:
					ret4 =  ((wxSizer_php*)_this)->Prepend((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4);
					break;
				case 4:
					ret4 =  ((wxSizer_php*)_this)->Prepend((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				case 3:
					ret4 =  ((wxSizer_php*)_this)->Prepend((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					ret4 =  ((wxSizer_php*)_this)->Prepend((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret4, le_wxSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, PrependSpacer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxSizer_php*)_this)->PrependSpacer((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, PrependStretchSpacer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxSizer_php*)_this)->PrependStretchSpacer((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxSizer_php*)_this)->PrependStretchSpacer();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, Remove)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxSizer_php*)_this)->Remove((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxSizer_php*)_this)->Remove((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret2 =  ((wxSizer_php*)_this)->Remove((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
PHP_METHOD(php_wxSizer, Detach)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxSizer_php*)_this)->Detach((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxSizer_php*)_this)->Detach((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret2 =  ((wxSizer_php*)_this)->Detach((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
PHP_METHOD(php_wxSizer, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSizer_php*)_this)->Clear(_argBool0);
					break;
				case 0:
					 ((wxSizer_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSizer, SetMinSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxSizer_php*)_this)->SetMinSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSizer, SetItemMinSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!", &_argObj0 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxSizer_php*)_this)->SetItemMinSize((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!", &_argObj0 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxSizer_php*)_this)->SetItemMinSize((wxSizer*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret2 =  ((wxSizer_php*)_this)->SetItemMinSize((unsigned int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
PHP_METHOD(php_wxSizer, GetSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSizer_php*)_this)->GetSize();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, GetPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSizer_php*)_this)->GetPosition();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxPoint),0);memcpy(ptr,&ret0,sizeof(wxPoint));object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, GetMinSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSizer_php*)_this)->GetMinSize();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, RecalcSizes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxSizer_php*)_this)->RecalcSizes();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSizer, CalcMin)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSizer_php*)_this)->CalcMin();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, Layout)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxSizer_php*)_this)->Layout();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSizer, Fit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxSizer_php*)_this)->Fit((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, FitInside)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSizer_php*)_this)->FitInside((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSizer, SetSizeHints)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSizer_php*)_this)->SetSizeHints((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSizer, SetVirtualSizeHints)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSizer_php*)_this)->SetVirtualSizeHints((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSizer, GetChildren)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxSizer_php*)_this)->GetChildren();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSizer, SetDimension)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxSizer_php*)_this)->SetDimension((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSizer, GetItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxSizer_php*)_this)->GetItem((wxWindow*) _ptrObj0 , _argBool0);
					break;
				case 1:
					ret0 =  ((wxSizer_php*)_this)->GetItem((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSizerItem* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxSizer_php*)_this)->GetItem((wxSizer*) _ptrObj0 , _argBool0);
					break;
				case 1:
					ret1 =  ((wxSizer_php*)_this)->GetItem((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxSizer, Hide)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxSizer_php*)_this)->Hide((wxSizer*) _ptrObj0 , _argBool0);
					break;
				case 1:
					ret0 =  ((wxSizer_php*)_this)->Hide((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxSizer_php*)_this)->Hide((wxWindow*) _ptrObj0 , _argBool0);
					break;
				case 1:
					ret1 =  ((wxSizer_php*)_this)->Hide((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret2 =  ((wxSizer_php*)_this)->Hide((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
PHP_METHOD(php_wxSizer, IsShown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxSizer_php*)_this)->IsShown((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxSizer_php*)_this)->IsShown((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret2 =  ((wxSizer_php*)_this)->IsShown((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
void php_wxColour_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxColour, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxColour_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxColour);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxColour_php*) _this)->evnArray);
			array_init(((wxColour_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxColour_php*) _this)->phpObj);
			*((wxColour_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxColour_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxColour_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxColour_php(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxColour);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxColour_php*) _this)->evnArray);
			array_init(((wxColour_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxColour_php*) _this)->phpObj);
			*((wxColour_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxColour_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxColour_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxColour_php(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxColour);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxColour_php*) _this)->evnArray);
			array_init(((wxColour_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxColour_php*) _this)->phpObj);
			*((wxColour_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxColour_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxColour_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!|l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					_this = new wxColour_php((unsigned char)_argLong0 , (unsigned char)_argLong1 , (unsigned char)_argLong2 , (unsigned char)_argLong3);
					break;
				case 3:
					_this = new wxColour_php((unsigned char)_argLong0 , (unsigned char)_argLong1 , (unsigned char)_argLong2);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxColour);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxColour_php*) _this)->evnArray);
			array_init(((wxColour_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxColour_php*) _this)->phpObj);
			*((wxColour_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxColour_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxColour_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxColour_php((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxColour);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxColour_php*) _this)->evnArray);
			array_init(((wxColour_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxColour_php*) _this)->phpObj);
			*((wxColour_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxColour_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxColour_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxColour_php(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxColour);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxColour_php*) _this)->evnArray);
			array_init(((wxColour_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxColour_php*) _this)->phpObj);
			*((wxColour_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxColour_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxColour_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxCursor_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxCursor, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxCursor_php((int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCursor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCursor_php*) _this)->evnArray);
			array_init(((wxCursor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCursor_php*) _this)->phpObj);
			*((wxCursor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCursor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCursor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxCursor_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCursor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCursor_php*) _this)->evnArray);
			array_init(((wxCursor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCursor_php*) _this)->phpObj);
			*((wxCursor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCursor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCursor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxCursor_php(*(wxImage *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCursor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCursor_php*) _this)->evnArray);
			array_init(((wxCursor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCursor_php*) _this)->phpObj);
			*((wxCursor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCursor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCursor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxCursor_php(*(wxCursor *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCursor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCursor_php*) _this)->evnArray);
			array_init(((wxCursor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCursor_php*) _this)->phpObj);
			*((wxCursor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCursor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCursor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxFont_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxFont, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxFont_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxFont);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxFont_php*) _this)->evnArray);
			array_init(((wxFont_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxFont_php*) _this)->phpObj);
			*((wxFont_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxFont_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxFont_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxFont_php(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxFont);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxFont_php*) _this)->evnArray);
			array_init(((wxFont_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxFont_php*) _this)->phpObj);
			*((wxFont_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxFont_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxFont_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!|b!s!zl!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argBool0 , &_argStr0 , &_argStr0_len , &_argObj0 , &_argLong4 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxFont_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , _argBool0 , wxString(_argStr0, wxConvUTF8) , (wxFontEncoding) _argLong4);
					break;
				case 7:
					_this = new wxFont_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , _argBool0 , wxString(_argStr0, wxConvUTF8) , (wxFontEncoding) _argLong4);
					break;
				case 6:
					_this = new wxFont_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , _argBool0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxFont_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , _argBool0);
					break;
				case 4:
					_this = new wxFont_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxFont);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxFont_php*) _this)->evnArray);
			array_init(((wxFont_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxFont_php*) _this)->phpObj);
			*((wxFont_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxFont_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxFont_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxFont_php(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxFont);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxFont_php*) _this)->evnArray);
			array_init(((wxFont_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxFont_php*) _this)->phpObj);
			*((wxFont_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxFont_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxFont_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxWindowBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxWindowBase, SetSizer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxWindowBase_php*)_this)->SetSizer((wxSizer*) _ptrObj0 , _argBool0);
					break;
				case 1:
					 ((wxWindowBase_php*)_this)->SetSizer((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindowBase, GetSizer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSizer* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxWindowBase_php*)_this)->GetSizer();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizer_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizer));return;			
		}
	}
}
PHP_METHOD(php_wxWindowBase, Layout)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxWindowBase_php*)_this)->Layout();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindowBase, Fit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxWindowBase_php*)_this)->Fit();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindowBase, SetWindowStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxWindowBase_php*)_this)->SetWindowStyle((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindowBase, PopupMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxWindowBase_php*)_this)->PopupMenu((wxMenu*) _ptrObj0 , *(wxPoint *) _ptrObj1);
					break;
				case 1:
					ret0 =  ((wxWindowBase_php*)_this)->PopupMenu((wxMenu*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!", &_argObj0 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxWindowBase_php*)_this)->PopupMenu((wxMenu*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxWindowBase, IsShown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxWindowBase_php*)_this)->IsShown();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindowBase, IsEnabled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxWindowBase_php*)_this)->IsEnabled();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindowBase, IsShownOnScreen)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxWindowBase_php*)_this)->IsShownOnScreen();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxWindowBase, UpdateWindowUI)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxWindowBase_php*)_this)->UpdateWindowUI((long int)_argLong0);
					break;
				case 0:
					 ((wxWindowBase_php*)_this)->UpdateWindowUI();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindowBase, FindWindow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxWindow* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxWindowBase_php*)_this)->FindWindow((long int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxWindow_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxWindow));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxWindow* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxWindowBase_php*)_this)->FindWindow(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxWindow_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxWindow));return;			
		}
	}
}
PHP_METHOD(php_wxWindowBase, SetMinSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxWindowBase_php*)_this)->SetMinSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindowBase, SetMaxSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxWindowBase_php*)_this)->SetMaxSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindowBase, SetSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxWindowBase_php*)_this)->SetSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!|l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argLong4 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					 ((wxWindowBase_php*)_this)->SetSize((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4);
					break;
				case 4:
					 ((wxWindowBase_php*)_this)->SetSize((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxWindowBase_php*)_this)->SetSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindowBase, Centre)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxWindowBase_php*)_this)->Centre((int)_argLong0);
					break;
				case 0:
					 ((wxWindowBase_php*)_this)->Centre();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindowBase, SetSizeHints)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxWindowBase_php*)_this)->SetSizeHints(*(wxSize *) _ptrObj0 , *(wxSize *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 2:
					 ((wxWindowBase_php*)_this)->SetSizeHints(*(wxSize *) _ptrObj0 , *(wxSize *) _ptrObj1);
					break;
				case 1:
					 ((wxWindowBase_php*)_this)->SetSizeHints(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxWindowBase, GetId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxWindowBase_php*)_this)->GetId();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxSizerFlags_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSizerFlags, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxSizerFlags_php(*(wxSizerFlags *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxSizerFlags);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxSizerFlags_php*) _this)->evnArray);
			array_init(((wxSizerFlags_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxSizerFlags_php*) _this)->phpObj);
			*((wxSizerFlags_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxSizerFlags_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxSizerFlags_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxSizerItem_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSizerItem, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxSizerItem_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxSizerItem);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxSizerItem_php*) _this)->evnArray);
			array_init(((wxSizerItem_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxSizerItem_php*) _this)->phpObj);
			*((wxSizerItem_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxSizerItem_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxSizerItem_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxClassInfo_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxClassInfo, GetSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxClassInfo_php*)_this)->GetSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxObject_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxObject, IsKindOf)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxObject_php*)_this)->IsKindOf((wxClassInfo*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxImage_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxImage, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxImage_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxImage);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxImage_php*) _this)->evnArray);
			array_init(((wxImage_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxImage_php*) _this)->phpObj);
			*((wxImage_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxImage_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxImage_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!l!", &_argStr0 , &_argStr0_len , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxImage_php(wxString(_argStr0, wxConvUTF8) , (long int)_argLong0 , (int)_argLong1);
					break;
				case 2:
					_this = new wxImage_php(wxString(_argStr0, wxConvUTF8) , (long int)_argLong0);
					break;
				case 1:
					_this = new wxImage_php(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxImage);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxImage_php*) _this)->evnArray);
			array_init(((wxImage_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxImage_php*) _this)->phpObj);
			*((wxImage_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxImage_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxImage_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxImage_php(*(wxImage *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxImage);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxImage_php*) _this)->evnArray);
			array_init(((wxImage_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxImage_php*) _this)->phpObj);
			*((wxImage_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxImage_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxImage_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|b!", &_argLong0 , &_argLong1 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxImage_php((int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				case 2:
					_this = new wxImage_php((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxImage);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxImage_php*) _this)->evnArray);
			array_init(((wxImage_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxImage_php*) _this)->phpObj);
			*((wxImage_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxImage_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxImage_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxImage, Scale)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxImage ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxImage_php*)_this)->Scale((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					ret0 =  ((wxImage_php*)_this)->Scale((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxImage),0);memcpy(ptr,&ret0,sizeof(wxImage));object_init_ex(return_value,php_wxImage_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxImage));return;			
		}
	}
}
PHP_METHOD(php_wxImage, Rescale)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxImage_php*)_this)->Rescale((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					 ((wxImage_php*)_this)->Rescale((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxImage, Resize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|l!l!l!", &_argObj0 , &_argObj1 , &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					 ((wxImage_php*)_this)->Resize(*(wxSize *) _ptrObj0 , *(wxPoint *) _ptrObj1 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 4:
					 ((wxImage_php*)_this)->Resize(*(wxSize *) _ptrObj0 , *(wxPoint *) _ptrObj1 , (int)_argLong0 , (int)_argLong1);
					break;
				case 3:
					 ((wxImage_php*)_this)->Resize(*(wxSize *) _ptrObj0 , *(wxPoint *) _ptrObj1 , (int)_argLong0);
					break;
				case 2:
					 ((wxImage_php*)_this)->Resize(*(wxSize *) _ptrObj0 , *(wxPoint *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxImage, Rotate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!|b!z!", &_argLong0 , &_argObj0 , &_argBool0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxImage ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxImage_php*)_this)->Rotate((double)_argLong0 , *(wxPoint *) _ptrObj0 , _argBool0 , (wxPoint*) _ptrObj1);
					break;
				case 3:
					ret0 =  ((wxImage_php*)_this)->Rotate((double)_argLong0 , *(wxPoint *) _ptrObj0 , _argBool0);
					break;
				case 2:
					ret0 =  ((wxImage_php*)_this)->Rotate((double)_argLong0 , *(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxImage),0);memcpy(ptr,&ret0,sizeof(wxImage));object_init_ex(return_value,php_wxImage_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxImage));return;			
		}
	}
}
PHP_METHOD(php_wxImage, Rotate90)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxImage ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxImage_php*)_this)->Rotate90(_argBool0);
					break;
				case 0:
					ret0 =  ((wxImage_php*)_this)->Rotate90();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxImage),0);memcpy(ptr,&ret0,sizeof(wxImage));object_init_ex(return_value,php_wxImage_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxImage));return;			
		}
	}
}
PHP_METHOD(php_wxImage, Mirror)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxImage ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxImage_php*)_this)->Mirror(_argBool0);
					break;
				case 0:
					ret0 =  ((wxImage_php*)_this)->Mirror();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxImage),0);memcpy(ptr,&ret0,sizeof(wxImage));object_init_ex(return_value,php_wxImage_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxImage));return;			
		}
	}
}
void php_wxMenuItem_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxMenuItem, Check)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuItem_php*)_this)->Check(_argBool0);
					break;
				case 0:
					 ((wxMenuItem_php*)_this)->Check();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuItem, Enable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuItem_php*)_this)->Enable(_argBool0);
					break;
				case 0:
					 ((wxMenuItem_php*)_this)->Enable();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuItem, IsChecked)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItem_php*)_this)->IsChecked();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuItem, SetBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuItem_php*)_this)->SetBitmap(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuItem, GetBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItem_php*)_this)->GetBitmap();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxBitmap));return;			
		}
	}
}
PHP_METHOD(php_wxMenuItem, GetItemLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItem_php*)_this)->GetItemLabel();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuItem, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|z!l!s!s!l!z!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argLong1 , &_argObj1 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxMenuItem_php((wxMenu*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (wxItemKind) _argLong1 , (wxMenu*) _ptrObj1);
					break;
				case 5:
					_this = new wxMenuItem_php((wxMenu*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (wxItemKind) _argLong1);
					break;
				case 4:
					_this = new wxMenuItem_php((wxMenu*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 3:
					_this = new wxMenuItem_php((wxMenu*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxMenuItem_php((wxMenu*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxMenuItem_php((wxMenu*) _ptrObj0);
					break;
				case 0:
					_this = new wxMenuItem_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxMenuItem);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxMenuItem_php*) _this)->evnArray);
			array_init(((wxMenuItem_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxMenuItem_php*) _this)->phpObj);
			*((wxMenuItem_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxMenuItem_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxMenuItem_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!s!b!|z!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argBool0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxMenuItem_php((wxMenu*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , _argBool0 , (wxMenu*) _ptrObj1);
					break;
				case 5:
					_this = new wxMenuItem_php((wxMenu*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , _argBool0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxMenuItem);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxMenuItem_php*) _this)->evnArray);
			array_init(((wxMenuItem_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxMenuItem_php*) _this)->phpObj);
			*((wxMenuItem_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxMenuItem_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxMenuItem_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxMenuItemBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxMenuItemBase, SetMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuItemBase_php*)_this)->SetMenu((wxMenu*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, GetMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxMenu* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->GetMenu();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenu_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenu));return;			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, GetId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->GetId();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, IsSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->IsSeparator();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, SetText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuItemBase_php*)_this)->SetText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, GetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->GetLabel();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, GetLabelFromText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuItemBase_php*)_this)->GetLabelFromText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, GetKind)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxMenuItemBase_php*)_this)->GetKind();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, IsCheckable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->IsCheckable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, IsSubMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->IsSubMenu();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, SetSubMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuItemBase_php*)_this)->SetSubMenu((wxMenu*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, GetSubMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxMenu* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->GetSubMenu();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenu_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenu));return;			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, Enable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuItemBase_php*)_this)->Enable(_argBool0);
					break;
				case 0:
					 ((wxMenuItemBase_php*)_this)->Enable();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, IsEnabled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->IsEnabled();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, Check)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuItemBase_php*)_this)->Check(_argBool0);
					break;
				case 0:
					 ((wxMenuItemBase_php*)_this)->Check();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, IsChecked)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->IsChecked();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, SetHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuItemBase_php*)_this)->SetHelp(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, GetHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->GetHelp();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, GetItemLabelText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->GetItemLabelText();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, GetName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->GetName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, GetText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuItemBase_php*)_this)->GetText();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, SetItemLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuItemBase_php*)_this)->SetItemLabel(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuItemBase, GetLabelText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuItemBase_php*)_this)->GetLabelText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
void php_wxMenu_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxMenu, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxMenu_php(wxString(_argStr0, wxConvUTF8) , (long int)_argLong0);
					break;
				case 1:
					_this = new wxMenu_php(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxMenu);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxMenu_php*) _this)->evnArray);
			array_init(((wxMenu_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxMenu_php*) _this)->phpObj);
			*((wxMenu_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxMenu_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxMenu_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxMenu_php((long int)_argLong0);
					break;
				case 0:
					_this = new wxMenu_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxMenu);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxMenu_php*) _this)->evnArray);
			array_init(((wxMenu_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxMenu_php*) _this)->phpObj);
			*((wxMenu_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxMenu_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxMenu_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxBitmap_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxBitmap, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxBitmap_php(wxString(_argStr0, wxConvUTF8) , (wxBitmapType) _argLong0);
					break;
				case 1:
					_this = new wxBitmap_php(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBitmap);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->evnArray);
			array_init(((wxBitmap_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->phpObj);
			*((wxBitmap_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBitmap_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBitmap_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxBitmap_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBitmap);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->evnArray);
			array_init(((wxBitmap_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->phpObj);
			*((wxBitmap_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBitmap_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBitmap_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxBitmap_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					_this = new wxBitmap_php((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBitmap);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->evnArray);
			array_init(((wxBitmap_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->phpObj);
			*((wxBitmap_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBitmap_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBitmap_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!|l!", &_argObj0 , &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					_this = new wxBitmap_php((char*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					_this = new wxBitmap_php((char*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBitmap);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->evnArray);
			array_init(((wxBitmap_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->phpObj);
			*((wxBitmap_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBitmap_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBitmap_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxBitmap_php(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBitmap);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->evnArray);
			array_init(((wxBitmap_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->phpObj);
			*((wxBitmap_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBitmap_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBitmap_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxBitmap_php(*(wxImage *) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxBitmap_php(*(wxImage *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBitmap);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->evnArray);
			array_init(((wxBitmap_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBitmap_php*) _this)->phpObj);
			*((wxBitmap_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBitmap_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBitmap_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxBitmap, GetHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBitmap_php*)_this)->GetHeight();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxBitmap, GetWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBitmap_php*)_this)->GetWidth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxBitmap, GetDepth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBitmap_php*)_this)->GetDepth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxBitmap, CopyFromIcon)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxBitmap_php*)_this)->CopyFromIcon(*(wxIcon *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxBitmap, ConvertToImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxImage ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBitmap_php*)_this)->ConvertToImage();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxImage),0);memcpy(ptr,&ret0,sizeof(wxImage));object_init_ex(return_value,php_wxImage_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxImage));return;			
		}
	}
}
PHP_METHOD(php_wxBitmap, GetPalette)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxPalette* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBitmap_php*)_this)->GetPalette();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxPalette_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxPalette));return;			
		}
	}
}
PHP_METHOD(php_wxBitmap, GetMask)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxMask* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBitmap_php*)_this)->GetMask();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMask_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMask));return;			
		}
	}
}
PHP_METHOD(php_wxBitmap, GetSubBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxBitmap_php*)_this)->GetSubBitmap(*(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxBitmap),0);memcpy(ptr,&ret0,sizeof(wxBitmap));object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxBitmap));return;			
		}
	}
}
PHP_METHOD(php_wxBitmap, LoadFile)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxBitmap_php*)_this)->LoadFile(wxString(_argStr0, wxConvUTF8) , (wxBitmapType) _argLong0);
					break;
				case 1:
					ret0 =  ((wxBitmap_php*)_this)->LoadFile(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxBitmap, IsOk)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBitmap_php*)_this)->IsOk();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxBitmap, SaveFile)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!l!|z!", &_argStr0 , &_argStr0_len , &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxBitmap_php*)_this)->SaveFile(wxString(_argStr0, wxConvUTF8) , (wxBitmapType) _argLong0 , (wxPalette*) _ptrObj0);
					break;
				case 2:
					ret0 =  ((wxBitmap_php*)_this)->SaveFile(wxString(_argStr0, wxConvUTF8) , (wxBitmapType) _argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxBitmap, SetDepth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBitmap_php*)_this)->SetDepth((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmap, SetHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBitmap_php*)_this)->SetHeight((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmap, SetMask)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBitmap_php*)_this)->SetMask((wxMask*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmap, SetPalette)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBitmap_php*)_this)->SetPalette(*(wxPalette *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmap, SetWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBitmap_php*)_this)->SetWidth((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxMenuBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxMenuBase, Append)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!z!|s!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj0 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxMenuBase_php*)_this)->Append((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , (wxMenu*) _ptrObj0 , wxString(_argStr1, wxConvUTF8));
					break;
				case 3:
					ret0 =  ((wxMenuBase_php*)_this)->Append((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , (wxMenu*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!s!b!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxMenuBase_php*)_this)->Append((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxMenuItem* ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret2 =  ((wxMenuBase_php*)_this)->Append((wxMenuItem*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret2, le_wxMenuItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|s!s!l!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret3;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret3 =  ((wxMenuBase_php*)_this)->Append((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (wxItemKind) _argLong1);
					break;
				case 3:
					ret3 =  ((wxMenuBase_php*)_this)->Append((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 2:
					ret3 =  ((wxMenuBase_php*)_this)->Append((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 1:
					ret3 =  ((wxMenuBase_php*)_this)->Append((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret3, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, AppendCheckItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!|s!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxMenuBase_php*)_this)->AppendCheckItem((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 2:
					ret0 =  ((wxMenuBase_php*)_this)->AppendCheckItem((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, AppendRadioItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!|s!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxMenuBase_php*)_this)->AppendRadioItem((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 2:
					ret0 =  ((wxMenuBase_php*)_this)->AppendRadioItem((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, Break)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxMenuBase_php*)_this)->Break();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBase, Insert)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxMenuBase_php*)_this)->Insert((long unsigned int)_argLong0 , (wxMenuItem*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|s!s!l!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret1 =  ((wxMenuBase_php*)_this)->Insert((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (wxItemKind) _argLong2);
					break;
				case 4:
					ret1 =  ((wxMenuBase_php*)_this)->Insert((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 3:
					ret1 =  ((wxMenuBase_php*)_this)->Insert((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					ret1 =  ((wxMenuBase_php*)_this)->Insert((long unsigned int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxMenuItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!z!|s!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len , &_argObj0 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxMenuItem* ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret2 =  ((wxMenuBase_php*)_this)->Insert((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , (wxMenu*) _ptrObj0 , wxString(_argStr1, wxConvUTF8));
					break;
				case 4:
					ret2 =  ((wxMenuBase_php*)_this)->Insert((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , (wxMenu*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret2, le_wxMenuItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!s!b!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					 ((wxMenuBase_php*)_this)->Insert((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBase, InsertSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->InsertSeparator((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, InsertCheckItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!|s!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxMenuBase_php*)_this)->InsertCheckItem((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 3:
					ret0 =  ((wxMenuBase_php*)_this)->InsertCheckItem((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, InsertRadioItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!|s!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxMenuBase_php*)_this)->InsertRadioItem((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 3:
					ret0 =  ((wxMenuBase_php*)_this)->InsertRadioItem((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, Prepend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->Prepend((wxMenuItem*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|s!s!l!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret1 =  ((wxMenuBase_php*)_this)->Prepend((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (wxItemKind) _argLong1);
					break;
				case 3:
					ret1 =  ((wxMenuBase_php*)_this)->Prepend((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 2:
					ret1 =  ((wxMenuBase_php*)_this)->Prepend((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 1:
					ret1 =  ((wxMenuBase_php*)_this)->Prepend((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxMenuItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!z!|s!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj0 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxMenuItem* ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret2 =  ((wxMenuBase_php*)_this)->Prepend((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , (wxMenu*) _ptrObj0 , wxString(_argStr1, wxConvUTF8));
					break;
				case 3:
					ret2 =  ((wxMenuBase_php*)_this)->Prepend((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , (wxMenu*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret2, le_wxMenuItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!s!b!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxMenuBase_php*)_this)->Prepend((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBase, PrependSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuBase_php*)_this)->PrependSeparator();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, PrependCheckItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!|s!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxMenuBase_php*)_this)->PrependCheckItem((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 2:
					ret0 =  ((wxMenuBase_php*)_this)->PrependCheckItem((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, PrependRadioItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!|s!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxMenuBase_php*)_this)->PrependRadioItem((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 2:
					ret0 =  ((wxMenuBase_php*)_this)->PrependRadioItem((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, Remove)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->Remove((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxMenuItem* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxMenuBase_php*)_this)->Remove((wxMenuItem*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, Delete)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->Delete((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxMenuBase_php*)_this)->Delete((wxMenuItem*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxMenuBase, Destroy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->Destroy((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxMenuBase_php*)_this)->Destroy((wxMenuItem*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxMenuBase, GetMenuItemCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxMenuBase_php*)_this)->GetMenuItemCount();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBase, GetTitle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxMenuBase_php*)_this)->GetTitle();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBase, FindItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->FindItem(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuBase, FindItemByPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->FindItemByPosition((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, Enable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBase_php*)_this)->Enable((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBase, IsEnabled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->IsEnabled((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuBase, Check)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBase_php*)_this)->Check((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBase, IsChecked)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->IsChecked((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuBase, SetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBase_php*)_this)->SetLabel((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBase, GetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->GetLabel((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuBase, SetHelpString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBase_php*)_this)->SetHelpString((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBase, GetHelpString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->GetHelpString((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuBase, SetTitle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuBase_php*)_this)->SetTitle(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBase, AppendSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMenuBase_php*)_this)->AppendSeparator();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, AppendSubMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!|s!", &_argObj0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxMenuItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxMenuBase_php*)_this)->AppendSubMenu((wxMenu*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 2:
					ret0 =  ((wxMenuBase_php*)_this)->AppendSubMenu((wxMenu*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuItem));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBase, GetLabelText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBase_php*)_this)->GetLabelText((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuBase, UpdateUI)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|z!", &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxWindow && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook && rsrc_type != le_wxMenu && rsrc_type != le_wxMenuBar && rsrc_type != le_wxValidator && rsrc_type != le_wxRadioBox && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxRichTextCtrl))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuBase_php*)_this)->UpdateUI((wxEvtHandler*) _ptrObj0);
					break;
				case 0:
					 ((wxMenuBase_php*)_this)->UpdateUI();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBase, GetMenuItems)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxMenuBase_php*)_this)->GetMenuItems();
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxMenuBar_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxMenuBar, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxMenuBar_php((long int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxMenuBar);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxMenuBar_php*) _this)->evnArray);
			array_init(((wxMenuBar_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxMenuBar_php*) _this)->phpObj);
			*((wxMenuBar_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxMenuBar_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxMenuBar_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxMenuBar_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxMenuBar);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxMenuBar_php*) _this)->evnArray);
			array_init(((wxMenuBar_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxMenuBar_php*) _this)->phpObj);
			*((wxMenuBar_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxMenuBar_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxMenuBar_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxMenuBar, Append)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!", &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxMenuBar_php*)_this)->Append((wxMenu*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuBar, Insert)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!s!", &_argLong0 , &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxMenuBar_php*)_this)->Insert((long unsigned int)_argLong0 , (wxMenu*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuBar, Replace)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!s!", &_argLong0 , &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxMenu* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxMenuBar_php*)_this)->Replace((long unsigned int)_argLong0 , (wxMenu*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenu_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenu));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBar, Remove)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenu* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBar_php*)_this)->Remove((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenu_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenu));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBar, FindMenuItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!s!", &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxMenuBar_php*)_this)->FindMenuItem(wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuBar, EnableTop)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBar_php*)_this)->EnableTop((long unsigned int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBar, SetLabelTop)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBar_php*)_this)->SetLabelTop((long unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBar, GetLabelTop)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBar_php*)_this)->GetLabelTop((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuBar, GetMenuLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBar_php*)_this)->GetMenuLabel((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
void php_wxToolBarBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxToolBarBase, AddCheckTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!z!|z!s!s!z!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj0 , &_argObj1 , &_argStr1 , &_argStr1_len , &_argStr2 , &_argStr2_len , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			wxToolBarToolBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					ret0 =  ((wxToolBarBase_php*)_this)->AddCheckTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , (wxObject*) _ptrObj2);
					break;
				case 6:
					ret0 =  ((wxToolBarBase_php*)_this)->AddCheckTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8));
					break;
				case 5:
					ret0 =  ((wxToolBarBase_php*)_this)->AddCheckTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , wxString(_argStr1, wxConvUTF8));
					break;
				case 4:
					ret0 =  ((wxToolBarBase_php*)_this)->AddCheckTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1);
					break;
				case 3:
					ret0 =  ((wxToolBarBase_php*)_this)->AddCheckTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBarToolBase));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, AddRadioTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!z!|z!s!s!z!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj0 , &_argObj1 , &_argStr1 , &_argStr1_len , &_argStr2 , &_argStr2_len , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			wxToolBarToolBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					ret0 =  ((wxToolBarBase_php*)_this)->AddRadioTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , (wxObject*) _ptrObj2);
					break;
				case 6:
					ret0 =  ((wxToolBarBase_php*)_this)->AddRadioTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8));
					break;
				case 5:
					ret0 =  ((wxToolBarBase_php*)_this)->AddRadioTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , wxString(_argStr1, wxConvUTF8));
					break;
				case 4:
					ret0 =  ((wxToolBarBase_php*)_this)->AddRadioTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1);
					break;
				case 3:
					ret0 =  ((wxToolBarBase_php*)_this)->AddRadioTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBarToolBase));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, AddSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxToolBarToolBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxToolBarBase_php*)_this)->AddSeparator();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBarToolBase));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, GetToolsCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxToolBarBase_php*)_this)->GetToolsCount();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, Realize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxToolBarBase_php*)_this)->Realize();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, AddTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!z!|s!l!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj0 , &_argStr1 , &_argStr1_len , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxToolBarToolBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret0 =  ((wxToolBarBase_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , wxString(_argStr1, wxConvUTF8) , (wxItemKind) _argLong1);
					break;
				case 4:
					ret0 =  ((wxToolBarBase_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , wxString(_argStr1, wxConvUTF8));
					break;
				case 3:
					ret0 =  ((wxToolBarBase_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBarToolBase));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxToolBarToolBase* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxToolBarBase_php*)_this)->AddTool((wxToolBarToolBase*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxToolBarToolBase));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!z!z!|l!s!s!z!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj0 , &_argObj1 , &_argLong1 , &_argStr1 , &_argStr1_len , &_argStr2 , &_argStr2_len , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			wxToolBarToolBase* ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					ret2 =  ((wxToolBarBase_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , (wxItemKind) _argLong1 , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , (wxObject*) _ptrObj2);
					break;
				case 7:
					ret2 =  ((wxToolBarBase_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , (wxItemKind) _argLong1 , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8));
					break;
				case 6:
					ret2 =  ((wxToolBarBase_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , (wxItemKind) _argLong1 , wxString(_argStr1, wxConvUTF8));
					break;
				case 5:
					ret2 =  ((wxToolBarBase_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , (wxItemKind) _argLong1);
					break;
				case 4:
					ret2 =  ((wxToolBarBase_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret2, le_wxToolBarToolBase));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, ClearTools)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxToolBarBase_php*)_this)->ClearTools();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, DeleteTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->DeleteTool((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, DeleteToolByPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->DeleteToolByPos((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, AddControl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxToolBar && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxRadioBox && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxSlider))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxToolBarToolBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->AddControl((wxControl*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBarToolBase));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, EnableTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxToolBarBase_php*)_this)->EnableTool((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, FindById)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxToolBarToolBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->FindById((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBarToolBase));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, FindControl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxControl* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->FindControl((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxControl_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxControl));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, GetToolSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxToolBarBase_php*)_this)->GetToolSize();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, GetMargins)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxToolBarBase_php*)_this)->GetMargins();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, GetToolClientData)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxObject* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->GetToolClientData((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxObject_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxObject));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, GetToolEnabled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->GetToolEnabled((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, GetToolLongHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->GetToolLongHelp((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, GetToolPacking)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxToolBarBase_php*)_this)->GetToolPacking();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, GetToolPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->GetToolPos((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, GetToolSeparation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxToolBarBase_php*)_this)->GetToolSeparation();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, GetToolShortHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->GetToolShortHelp((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, GetToolState)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->GetToolState((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, InsertControl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxToolBar && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxRadioBox && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxSlider))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxToolBarToolBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxToolBarBase_php*)_this)->InsertControl((long unsigned int)_argLong0 , (wxControl*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBarToolBase));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, InsertSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxToolBarToolBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->InsertSeparator((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBarToolBase));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, InsertTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!z!|z!l!s!s!z!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len , &_argObj0 , &_argObj1 , &_argLong2 , &_argStr1 , &_argStr1_len , &_argStr2 , &_argStr2_len , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			wxToolBarToolBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 9:
					ret0 =  ((wxToolBarBase_php*)_this)->InsertTool((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , (wxItemKind) _argLong2 , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , (wxObject*) _ptrObj2);
					break;
				case 8:
					ret0 =  ((wxToolBarBase_php*)_this)->InsertTool((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , (wxItemKind) _argLong2 , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8));
					break;
				case 7:
					ret0 =  ((wxToolBarBase_php*)_this)->InsertTool((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , (wxItemKind) _argLong2 , wxString(_argStr1, wxConvUTF8));
					break;
				case 6:
					ret0 =  ((wxToolBarBase_php*)_this)->InsertTool((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , (wxItemKind) _argLong2);
					break;
				case 5:
					ret0 =  ((wxToolBarBase_php*)_this)->InsertTool((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1);
					break;
				case 4:
					ret0 =  ((wxToolBarBase_php*)_this)->InsertTool((long unsigned int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBarToolBase));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxToolBarToolBase* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxToolBarBase_php*)_this)->InsertTool((long unsigned int)_argLong0 , (wxToolBarToolBase*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxToolBarToolBase));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, RemoveTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxToolBarToolBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxToolBarBase_php*)_this)->RemoveTool((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBarToolBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBarToolBase));return;			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, ToggleTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxToolBarBase_php*)_this)->ToggleTool((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, SetToolPacking)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxToolBarBase_php*)_this)->SetToolPacking((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxToolBarBase, SetToolLongHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxToolBarBase_php*)_this)->SetToolLongHelp((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxToolBarToolBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxToolBarToolBase, GetId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxToolBarToolBase_php*)_this)->GetId();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxControl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxControl, SetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxControl_php*)_this)->SetLabel(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxControl, GetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxControl_php*)_this)->GetLabel();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
void php_wxCommandEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxCommandEvent, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxCommandEvent_php((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					_this = new wxCommandEvent_php((int)_argLong0);
					break;
				case 0:
					_this = new wxCommandEvent_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCommandEvent);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCommandEvent_php*) _this)->evnArray);
			array_init(((wxCommandEvent_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCommandEvent_php*) _this)->phpObj);
			*((wxCommandEvent_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCommandEvent_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCommandEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxCommandEvent, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandEvent_php*)_this)->GetSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxCommandEvent, SetString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCommandEvent_php*)_this)->SetString(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCommandEvent, GetString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandEvent_php*)_this)->GetString();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxCommandEvent, IsChecked)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandEvent_php*)_this)->IsChecked();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCommandEvent, IsSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandEvent_php*)_this)->IsSelection();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCommandEvent, SetExtraLong)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCommandEvent_php*)_this)->SetExtraLong((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCommandEvent, GetExtraLong)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandEvent_php*)_this)->GetExtraLong();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxCommandEvent, SetInt)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCommandEvent_php*)_this)->SetInt((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCommandEvent, GetInt)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandEvent_php*)_this)->GetInt();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxPanel_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxPanel, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxPanel_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxPanel_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxPanel_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxPanel_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxPanel_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxPanel_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxPanel);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxPanel_php*) _this)->evnArray);
			array_init(((wxPanel_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxPanel_php*) _this)->phpObj);
			*((wxPanel_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxPanel_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxPanel_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxPanel_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxPanel);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxPanel_php*) _this)->evnArray);
			array_init(((wxPanel_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxPanel_php*) _this)->phpObj);
			*((wxPanel_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxPanel_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxPanel_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxPanel, InitDialog)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxPanel_php*)_this)->InitDialog();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxPanel, SetFocus)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxPanel_php*)_this)->SetFocus();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxPanel, SetFocusIgnoringChildren)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxPanel_php*)_this)->SetFocusIgnoringChildren();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxPanel, Create)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					ret0 =  ((wxPanel_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					ret0 =  ((wxPanel_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					ret0 =  ((wxPanel_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					ret0 =  ((wxPanel_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					ret0 =  ((wxPanel_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret0 =  ((wxPanel_php*)_this)->Create((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxTopLevelWindowBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTopLevelWindowBase, SetIcon)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTopLevelWindowBase_php*)_this)->SetIcon(*(wxIcon *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxTopLevelWindowBase_php::Maximize(bool arg0=true){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Maximize", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxTopLevelWindowBase, Maximize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTopLevelWindowBase_php*)_this)->Maximize(_argBool0);
					break;
				case 0:
					 ((wxTopLevelWindowBase_php*)_this)->Maximize();
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxSplitterWindow_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSplitterWindow, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxSplitterWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxSplitterWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxSplitterWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxSplitterWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxSplitterWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxSplitterWindow_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxSplitterWindow);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxSplitterWindow_php*) _this)->evnArray);
			array_init(((wxSplitterWindow_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxSplitterWindow_php*) _this)->phpObj);
			*((wxSplitterWindow_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxSplitterWindow_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxSplitterWindow_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, SplitVertically)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|l!", &_argObj0 , &_argObj1 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxSplitterWindow_php*)_this)->SplitVertically((wxWindow*) _ptrObj0 , (wxWindow*) _ptrObj1 , (int)_argLong0);
					break;
				case 2:
					ret0 =  ((wxSplitterWindow_php*)_this)->SplitVertically((wxWindow*) _ptrObj0 , (wxWindow*) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, SplitHorizontally)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|l!", &_argObj0 , &_argObj1 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxSplitterWindow_php*)_this)->SplitHorizontally((wxWindow*) _ptrObj0 , (wxWindow*) _ptrObj1 , (int)_argLong0);
					break;
				case 2:
					ret0 =  ((wxSplitterWindow_php*)_this)->SplitHorizontally((wxWindow*) _ptrObj0 , (wxWindow*) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, SetMinimumPaneSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSplitterWindow_php*)_this)->SetMinimumPaneSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, SetSashSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSplitterWindow_php*)_this)->SetSashSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, SetBorderSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSplitterWindow_php*)_this)->SetBorderSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, GetSashSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSplitterWindow_php*)_this)->GetSashSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, GetBorderSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSplitterWindow_php*)_this)->GetBorderSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, SetSashPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxSplitterWindow_php*)_this)->SetSashPosition((int)_argLong0 , _argBool0);
					break;
				case 1:
					 ((wxSplitterWindow_php*)_this)->SetSashPosition((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, GetSashPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSplitterWindow_php*)_this)->GetSashPosition();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, SetSashGravity)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSplitterWindow_php*)_this)->SetSashGravity((double)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, GetSashGravity)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxSplitterWindow_php*)_this)->GetSashGravity();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, GetMinimumPaneSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSplitterWindow_php*)_this)->GetMinimumPaneSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, GetSplitMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxSplitterWindow_php*)_this)->GetSplitMode();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, GetWindow1)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxWindow* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSplitterWindow_php*)_this)->GetWindow1();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxWindow_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxWindow));return;			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, GetWindow2)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxWindow* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSplitterWindow_php*)_this)->GetWindow2();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxWindow_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxWindow));return;			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, IsSplit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSplitterWindow_php*)_this)->IsSplit();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, ReplaceWindow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxSplitterWindow_php*)_this)->ReplaceWindow((wxWindow*) _ptrObj0 , (wxWindow*) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, Unsplit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|z!", &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxSplitterWindow_php*)_this)->Unsplit((wxWindow*) _ptrObj0);
					break;
				case 0:
					ret0 =  ((wxSplitterWindow_php*)_this)->Unsplit();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, UpdateSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxSplitterWindow_php*)_this)->UpdateSize();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSplitterWindow, SetSplitMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSplitterWindow_php*)_this)->SetSplitMode((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxTreeCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTreeCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxTreeCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr0, wxConvUTF8));
					break;
				case 6:
					_this = new wxTreeCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 5:
					_this = new wxTreeCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxTreeCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxTreeCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxTreeCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxTreeCtrl_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTreeCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTreeCtrl_php*) _this)->evnArray);
			array_init(((wxTreeCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTreeCtrl_php*) _this)->phpObj);
			*((wxTreeCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTreeCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTreeCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, AddRoot)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!l!z!", &_argStr0 , &_argStr0_len , &_argLong0 , &_argLong1 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			wxTreeItemId ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxTreeCtrl_php*)_this)->AddRoot(wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1 , (wxTreeItemData*) _ptrObj0);
					break;
				case 3:
					ret0 =  ((wxTreeCtrl_php*)_this)->AddRoot(wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1);
					break;
				case 2:
					ret0 =  ((wxTreeCtrl_php*)_this)->AddRoot(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 1:
					ret0 =  ((wxTreeCtrl_php*)_this)->AddRoot(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxTreeItemId),0);memcpy(ptr,&ret0,sizeof(wxTreeItemId));object_init_ex(return_value,php_wxTreeItemId_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxTreeItemId));return;			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, AppendItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!|l!l!z!", &_argObj0 , &_argStr0 , &_argStr0_len , &_argLong0 , &_argLong1 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxTreeItemId ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret0 =  ((wxTreeCtrl_php*)_this)->AppendItem(*(wxTreeItemId *) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1 , (wxTreeItemData*) _ptrObj1);
					break;
				case 4:
					ret0 =  ((wxTreeCtrl_php*)_this)->AppendItem(*(wxTreeItemId *) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1);
					break;
				case 3:
					ret0 =  ((wxTreeCtrl_php*)_this)->AppendItem(*(wxTreeItemId *) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 2:
					ret0 =  ((wxTreeCtrl_php*)_this)->AppendItem(*(wxTreeItemId *) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxTreeItemId),0);memcpy(ptr,&ret0,sizeof(wxTreeItemId));object_init_ex(return_value,php_wxTreeItemId_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxTreeItemId));return;			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, GetItemText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTreeCtrl_php*)_this)->GetItemText(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, Delete)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrl_php*)_this)->Delete(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, DeleteChildren)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrl_php*)_this)->DeleteChildren(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, DeleteAllItems)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTreeCtrl_php*)_this)->DeleteAllItems();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, Expand)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrl_php*)_this)->Expand(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, Collapse)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrl_php*)_this)->Collapse(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, CollapseAndReset)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrl_php*)_this)->CollapseAndReset(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, Toggle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrl_php*)_this)->Toggle(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, Unselect)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTreeCtrl_php*)_this)->Unselect();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, UnselectAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTreeCtrl_php*)_this)->UnselectAll();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, SelectItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTreeCtrl_php*)_this)->SelectItem(*(wxTreeItemId *) _ptrObj0 , _argBool0);
					break;
				case 1:
					 ((wxTreeCtrl_php*)_this)->SelectItem(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, EnsureVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrl_php*)_this)->EnsureVisible(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, ScrollTo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrl_php*)_this)->ScrollTo(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, SetItemTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTreeCtrl_php*)_this)->SetItemTextColour(*(wxTreeItemId *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, SetItemBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTreeCtrl_php*)_this)->SetItemBackgroundColour(*(wxTreeItemId *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, SetItemDropHighlight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTreeCtrl_php*)_this)->SetItemDropHighlight(*(wxTreeItemId *) _ptrObj0 , _argBool0);
					break;
				case 1:
					 ((wxTreeCtrl_php*)_this)->SetItemDropHighlight(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, SetItemBold)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTreeCtrl_php*)_this)->SetItemBold(*(wxTreeItemId *) _ptrObj0 , _argBool0);
					break;
				case 1:
					 ((wxTreeCtrl_php*)_this)->SetItemBold(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, SetItemText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!", &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTreeCtrl_php*)_this)->SetItemText(*(wxTreeItemId *) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, GetItemTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTreeCtrl_php*)_this)->GetItemTextColour(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, GetItemBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTreeCtrl_php*)_this)->GetItemBackgroundColour(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, SetImageList)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrl_php*)_this)->SetImageList((wxImageList*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, SetStateImageList)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrl_php*)_this)->SetStateImageList((wxImageList*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, IsExpanded)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTreeCtrl_php*)_this)->IsExpanded(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, IsSelected)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTreeCtrl_php*)_this)->IsSelected(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, IsBold)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTreeCtrl_php*)_this)->IsBold(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, SetIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrl_php*)_this)->SetIndent((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, GetIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			unsigned int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTreeCtrl_php*)_this)->GetIndent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, GetCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			unsigned int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTreeCtrl_php*)_this)->GetCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, SetItemHasChildren)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTreeCtrl_php*)_this)->SetItemHasChildren(*(wxTreeItemId *) _ptrObj0 , _argBool0);
					break;
				case 1:
					 ((wxTreeCtrl_php*)_this)->SetItemHasChildren(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, IsVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTreeCtrl_php*)_this)->IsVisible(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, ItemHasChildren)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTreeCtrl_php*)_this)->ItemHasChildren(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, GetChildrenCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTreeCtrl_php*)_this)->GetChildrenCount(*(wxTreeItemId *) _ptrObj0 , _argBool0);
					break;
				case 1:
					 ((wxTreeCtrl_php*)_this)->GetChildrenCount(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, GetRootItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxTreeItemId ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTreeCtrl_php*)_this)->GetRootItem();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxTreeItemId),0);memcpy(ptr,&ret0,sizeof(wxTreeItemId));object_init_ex(return_value,php_wxTreeItemId_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxTreeItemId));return;			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxTreeItemId ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTreeCtrl_php*)_this)->GetSelection();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxTreeItemId),0);memcpy(ptr,&ret0,sizeof(wxTreeItemId));object_init_ex(return_value,php_wxTreeItemId_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxTreeItemId));return;			
		}
	}
}
PHP_METHOD(php_wxTreeCtrl, GetItemParent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxTreeItemId ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTreeCtrl_php*)_this)->GetItemParent(*(wxTreeItemId *) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxTreeItemId),0);memcpy(ptr,&ret0,sizeof(wxTreeItemId));object_init_ex(return_value,php_wxTreeItemId_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxTreeItemId));return;			
		}
	}
}
void php_wxValidator_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxValidator, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxValidator_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxValidator);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxValidator_php*) _this)->evnArray);
			array_init(((wxValidator_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxValidator_php*) _this)->phpObj);
			*((wxValidator_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxValidator_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxValidator_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxCheckListBox_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxCheckListBox, IsChecked)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxCheckListBox_php*)_this)->IsChecked((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCheckListBox, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	void *_ptrObj4 = 0;
	zval *_argObj4 = 0;
	int id_to_find4;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!l!s!l!z!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len , &_argLong2 , &_argObj3 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 9:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8) , (long int)_argLong2 , *(wxValidator *) _ptrObj3 , wxString(_argStr1, wxConvUTF8));
					break;
				case 8:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8) , (long int)_argLong2 , *(wxValidator *) _ptrObj3);
					break;
				case 7:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8) , (long int)_argLong2);
					break;
				case 6:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1);
					break;
				case 4:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCheckListBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCheckListBox_php*) _this)->evnArray);
			array_init(((wxCheckListBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCheckListBox_php*) _this)->phpObj);
			*((wxCheckListBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCheckListBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCheckListBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!z!z!z!|l!z!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong1 , &_argObj4 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj4)
		{
			if (_argObj4->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj4), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find4 = Z_RESVAL_P(*tmp);
				_ptrObj4 = zend_list_find(id_to_find4, &rsrc_type);
				if (!_ptrObj4 )
					valid = 0;
			}
			else if(_argObj4->type==IS_LONG)
				_ptrObj4= (void *)_argObj4->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4 , wxString(_argStr0, wxConvUTF8));
					break;
				case 7:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4);
					break;
				case 6:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxCheckListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCheckListBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCheckListBox_php*) _this)->evnArray);
			array_init(((wxCheckListBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCheckListBox_php*) _this)->phpObj);
			*((wxCheckListBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCheckListBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCheckListBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxCheckListBox, Check)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxCheckListBox_php*)_this)->Check((unsigned int)_argLong0 , _argBool0);
					break;
				case 1:
					 ((wxCheckListBox_php*)_this)->Check((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxTreeItemData_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTreeItemData, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxTreeItemData_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTreeItemData);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTreeItemData_php*) _this)->evnArray);
			array_init(((wxTreeItemData_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTreeItemData_php*) _this)->phpObj);
			*((wxTreeItemData_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTreeItemData_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTreeItemData_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxTreeItemId_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTreeItemId, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxTreeItemId_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTreeItemId);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTreeItemId_php*) _this)->evnArray);
			array_init(((wxTreeItemId_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTreeItemId_php*) _this)->phpObj);
			*((wxTreeItemId_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTreeItemId_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTreeItemId_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxTreeItemId, IsOk)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTreeItemId_php*)_this)->IsOk();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxFrameBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxFrameBase, SetMenuBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFrameBase_php*)_this)->SetMenuBar((wxMenuBar*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFrameBase, GetToolBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxToolBar* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFrameBase_php*)_this)->GetToolBar();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBar_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBar));return;			
		}
	}
}
PHP_METHOD(php_wxFrameBase, GetMenuBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxMenuBar* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFrameBase_php*)_this)->GetMenuBar();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuBar_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuBar));return;			
		}
	}
}
PHP_METHOD(php_wxFrameBase, GetStatusBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxStatusBar* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFrameBase_php*)_this)->GetStatusBar();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxStatusBar_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxStatusBar));return;			
		}
	}
}
PHP_METHOD(php_wxFrameBase, GetStatusBarPane)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFrameBase_php*)_this)->GetStatusBarPane();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxFrameBase, SendSizeEvent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxFrameBase_php*)_this)->SendSizeEvent();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFrameBase, SetStatusBarPane)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFrameBase_php*)_this)->SetStatusBarPane((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFrameBase, SetStatusText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxFrameBase_php*)_this)->SetStatusText(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 1:
					 ((wxFrameBase_php*)_this)->SetStatusText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFrameBase, SetStatusWidths)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxFrameBase_php*)_this)->SetStatusWidths((int)_argLong0 , (int*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxTreeEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTreeEvent, GetItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxTreeItemId ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTreeEvent_php*)_this)->GetItem();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxTreeItemId),0);memcpy(ptr,&ret0,sizeof(wxTreeItemId));object_init_ex(return_value,php_wxTreeItemId_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxTreeItemId));return;			
		}
	}
}
void php_wxArrayString_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxArrayString, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxArrayString_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxArrayString);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxArrayString_php*) _this)->evnArray);
			array_init(((wxArrayString_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxArrayString_php*) _this)->phpObj);
			*((wxArrayString_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxArrayString_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxArrayString_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxArrayString, Add)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			unsigned int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxArrayString_php*)_this)->Add(wxString(_argStr0, wxConvUTF8) , (unsigned int)_argLong0);
					break;
				case 1:
					ret0 =  ((wxArrayString_php*)_this)->Add(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxArrayString, Empty)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxArrayString_php*)_this)->Empty();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxArrayString, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxArrayString_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxCheckListBoxBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxCheckListBoxBase, Check)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxCheckListBoxBase_php*)_this)->Check((unsigned int)_argLong0 , _argBool0);
					break;
				case 1:
					 ((wxCheckListBoxBase_php*)_this)->Check((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxListBoxBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxListBoxBase, Deselect)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListBoxBase_php*)_this)->Deselect((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListBoxBase, Insert)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListBoxBase_php*)_this)->Insert(wxString(_argStr0, wxConvUTF8) , (unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListBoxBase, InsertItems)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!l!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxListBoxBase_php*)_this)->InsertItems((unsigned int)_argLong0 , &wxString(_argStr0, wxConvUTF8) , (unsigned int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListBoxBase_php*)_this)->InsertItems(*(wxArrayString *) _ptrObj0 , (unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListBoxBase, DeselectAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListBoxBase_php*)_this)->DeselectAll((int)_argLong0);
					break;
				case 0:
					 ((wxListBoxBase_php*)_this)->DeselectAll();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListBoxBase, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListBoxBase_php*)_this)->SetSelection((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListBoxBase_php*)_this)->SetSelection((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListBoxBase, Set)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListBoxBase_php*)_this)->Set(*(wxArrayString *) _ptrObj0 , (void**)_argLong0);
					break;
				case 1:
					 ((wxListBoxBase_php*)_this)->Set(*(wxArrayString *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxIcon_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxIcon, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxIcon_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxIcon);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxIcon_php*) _this)->evnArray);
			array_init(((wxIcon_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxIcon_php*) _this)->phpObj);
			*((wxIcon_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxIcon_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxIcon_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!l!", &_argStr0 , &_argStr0_len , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxIcon_php(wxString(_argStr0, wxConvUTF8) , (wxBitmapType) _argLong0 , (int)_argLong1);
					break;
				case 2:
					_this = new wxIcon_php(wxString(_argStr0, wxConvUTF8) , (wxBitmapType) _argLong0);
					break;
				case 1:
					_this = new wxIcon_php(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxIcon);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxIcon_php*) _this)->evnArray);
			array_init(((wxIcon_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxIcon_php*) _this)->phpObj);
			*((wxIcon_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxIcon_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxIcon_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxIcon, CopyFromBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxIcon_php*)_this)->CopyFromBitmap(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxTextCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTextCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|s!z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr1, wxConvUTF8));
					break;
				case 7:
					_this = new wxTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 6:
					_this = new wxTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTextCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTextCtrl_php*) _this)->evnArray);
			array_init(((wxTextCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTextCtrl_php*) _this)->phpObj);
			*((wxTextCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTextCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTextCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrl_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, SetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextCtrl_php*)_this)->SetValue(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, SetMaxLength)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextCtrl_php*)_this)->SetMaxLength((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, AppendText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextCtrl_php*)_this)->AppendText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, SetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTextCtrl_php*)_this)->SetBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, SetForegroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTextCtrl_php*)_this)->SetForegroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTextCtrl_php*)_this)->SetSelection((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, SetStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!", &_argLong0 , &_argLong1 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxTextAttrEx))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxTextCtrl_php*)_this)->SetStyle((long int)_argLong0 , (long int)_argLong1 , *(wxTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, WriteText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextCtrl_php*)_this)->WriteText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, XYToPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxTextCtrl_php*)_this)->XYToPosition((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, Undo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTextCtrl_php*)_this)->Undo();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextCtrl, ShowPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextCtrl_php*)_this)->ShowPosition((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxNotebook_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxNotebook, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxNotebook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxNotebook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxNotebook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxNotebook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxNotebook_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxNotebook);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxNotebook_php*) _this)->evnArray);
			array_init(((wxNotebook_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxNotebook_php*) _this)->phpObj);
			*((wxNotebook_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxNotebook_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxNotebook_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxNotebook, SetPageText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxNotebook_php*)_this)->SetPageText((long unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxNotebook_php*)_this)->SetPageText((unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxNotebook, GetPageText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxNotebook_php*)_this)->GetPageText((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxNotebook_php*)_this)->GetPageText((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret1.size()+1));strcpy ( ro2, (const char *) ret1.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxNotebook, GetPageImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxNotebook_php*)_this)->GetPageImage((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxNotebook, SetPageImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxNotebook_php*)_this)->SetPageImage((long unsigned int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxNotebook, SetPageSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxNotebook_php*)_this)->SetPageSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxNotebook, SetPadding)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxNotebook_php*)_this)->SetPadding(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxNotebook, SetTabSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxNotebook_php*)_this)->SetTabSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxNotebook, DeleteAllPages)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxNotebook_php*)_this)->DeleteAllPages();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxNotebook, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxNotebook_php*)_this)->GetSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxNotebook, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxNotebook_php*)_this)->SetSelection((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxNotebook_php*)_this)->SetSelection((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret1)			
		}
	}
}
PHP_METHOD(php_wxNotebook, InsertPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!s!|b!l!", &_argLong0 , &_argObj0 , &_argStr0 , &_argStr0_len , &_argBool0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret0 =  ((wxNotebook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0 , (int)_argLong1);
					break;
				case 4:
					ret0 =  ((wxNotebook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0);
					break;
				case 3:
					ret0 =  ((wxNotebook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxBookCtrlBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxBookCtrlBase, AddPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!|b!l!", &_argObj0 , &_argStr0 , &_argStr0_len , &_argBool0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxBookCtrlBase_php*)_this)->AddPage((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0 , (int)_argLong0);
					break;
				case 3:
					ret0 =  ((wxBookCtrlBase_php*)_this)->AddPage((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0);
					break;
				case 2:
					ret0 =  ((wxBookCtrlBase_php*)_this)->AddPage((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxBookCtrlBase, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxBookCtrlBase_php*)_this)->SetSelection((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxBookCtrlBase, RemovePage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxBookCtrlBase_php*)_this)->RemovePage((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxBookCtrlBase, DeletePage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxBookCtrlBase_php*)_this)->DeletePage((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxBookCtrlBase, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBookCtrlBase_php*)_this)->GetSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxBookCtrlBase, SetPageText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxBookCtrlBase_php*)_this)->SetPageText((unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxBookCtrlBase, GetPageText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxBookCtrlBase_php*)_this)->GetPageText((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxBookCtrlBase, GetPageCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			unsigned int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBookCtrlBase_php*)_this)->GetPageCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxBookCtrlBase, GetPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxWindow* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxBookCtrlBase_php*)_this)->GetPage((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxWindow_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxWindow));return;			
		}
	}
}
PHP_METHOD(php_wxBookCtrlBase, GetCurrentPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxWindow* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBookCtrlBase_php*)_this)->GetCurrentPage();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxWindow_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxWindow));return;			
		}
	}
}
void php_wxFlexGridSizer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxFlexGridSizer, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					_this = new wxFlexGridSizer_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxFlexGridSizer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxFlexGridSizer_php*) _this)->evnArray);
			array_init(((wxFlexGridSizer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxFlexGridSizer_php*) _this)->phpObj);
			*((wxFlexGridSizer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxFlexGridSizer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxFlexGridSizer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxFlexGridSizer_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					_this = new wxFlexGridSizer_php((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					_this = new wxFlexGridSizer_php((int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxFlexGridSizer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxFlexGridSizer_php*) _this)->evnArray);
			array_init(((wxFlexGridSizer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxFlexGridSizer_php*) _this)->phpObj);
			*((wxFlexGridSizer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxFlexGridSizer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxFlexGridSizer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxFlexGridSizer, AddGrowableRow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxFlexGridSizer_php*)_this)->AddGrowableRow((long unsigned int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					 ((wxFlexGridSizer_php*)_this)->AddGrowableRow((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFlexGridSizer, RemoveGrowableRow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFlexGridSizer_php*)_this)->RemoveGrowableRow((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFlexGridSizer, AddGrowableCol)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxFlexGridSizer_php*)_this)->AddGrowableCol((long unsigned int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					 ((wxFlexGridSizer_php*)_this)->AddGrowableCol((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFlexGridSizer, RemoveGrowableCol)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFlexGridSizer_php*)_this)->RemoveGrowableCol((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFlexGridSizer, SetFlexibleDirection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFlexGridSizer_php*)_this)->SetFlexibleDirection((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFlexGridSizer, GetFlexibleDirection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFlexGridSizer_php*)_this)->GetFlexibleDirection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxFlexGridSizer, GetNonFlexibleGrowMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxFlexGridSizer_php*)_this)->GetNonFlexibleGrowMode();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFlexGridSizer, SetNonFlexibleGrowMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "zl!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxFlexGridSizer_php*)_this)->SetNonFlexibleGrowMode((wxFlexSizerGrowMode) _argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxStaticText_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxStaticText, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxStaticText_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr1, wxConvUTF8));
					break;
				case 6:
					_this = new wxStaticText_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxStaticText_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxStaticText_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxStaticText_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxStaticText);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxStaticText_php*) _this)->evnArray);
			array_init(((wxStaticText_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxStaticText_php*) _this)->phpObj);
			*((wxStaticText_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxStaticText_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxStaticText_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxStaticText, SetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStaticText_php*)_this)->SetLabel(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStaticText, GetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStaticText_php*)_this)->GetLabel();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxStaticText, SetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStaticText_php*)_this)->SetFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStaticText, Wrap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStaticText_php*)_this)->Wrap((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStaticText, SetForegroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStaticText_php*)_this)->SetForegroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxButton_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxButton, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|s!z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr1, wxConvUTF8));
					break;
				case 7:
					_this = new wxButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 6:
					_this = new wxButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxButton_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxButton);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxButton_php*) _this)->evnArray);
			array_init(((wxButton_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxButton_php*) _this)->phpObj);
			*((wxButton_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxButton_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxButton_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxButton, Enable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxButton_php*)_this)->Enable(_argBool0);
					break;
				case 0:
					ret0 =  ((wxButton_php*)_this)->Enable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxButton, SetDefault)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxButton_php*)_this)->SetDefault();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxButton, SetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxButton_php*)_this)->SetBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxButton, SetForegroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxButton_php*)_this)->SetForegroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxStaticBox_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxStaticBox, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxStaticBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr1, wxConvUTF8));
					break;
				case 6:
					_this = new wxStaticBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxStaticBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxStaticBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxStaticBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxStaticBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxStaticBox_php*) _this)->evnArray);
			array_init(((wxStaticBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxStaticBox_php*) _this)->phpObj);
			*((wxStaticBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxStaticBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxStaticBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxStaticBox, SetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStaticBox_php*)_this)->SetLabel(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxStaticBoxSizer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxStaticBoxSizer, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxStaticBoxSizer_php((wxStaticBox*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxStaticBoxSizer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxStaticBoxSizer_php*) _this)->evnArray);
			array_init(((wxStaticBoxSizer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxStaticBoxSizer_php*) _this)->phpObj);
			*((wxStaticBoxSizer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxStaticBoxSizer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxStaticBoxSizer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!|s!", &_argLong0 , &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxStaticBoxSizer_php((int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxStaticBoxSizer_php((int)_argLong0 , (wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxStaticBoxSizer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxStaticBoxSizer_php*) _this)->evnArray);
			array_init(((wxStaticBoxSizer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxStaticBoxSizer_php*) _this)->phpObj);
			*((wxStaticBoxSizer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxStaticBoxSizer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxStaticBoxSizer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxListBox_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxListBox, GetString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListBox_php*)_this)->GetString((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxListBox, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListBox_php*)_this)->GetSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListBox, IsSelected)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListBox_php*)_this)->IsSelected((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListBox, SetString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListBox_php*)_this)->SetString((unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListBox, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxListBox_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListBox, Delete)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListBox_php*)_this)->Delete((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListBox, GetCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			unsigned int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListBox_php*)_this)->GetCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListBox, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	void *_ptrObj4 = 0;
	zval *_argObj4 = 0;
	int id_to_find4;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!l!s!l!z!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len , &_argLong2 , &_argObj3 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 9:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8) , (long int)_argLong2 , *(wxValidator *) _ptrObj3 , wxString(_argStr1, wxConvUTF8));
					break;
				case 8:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8) , (long int)_argLong2 , *(wxValidator *) _ptrObj3);
					break;
				case 7:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8) , (long int)_argLong2);
					break;
				case 6:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1);
					break;
				case 4:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxListBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxListBox_php*) _this)->evnArray);
			array_init(((wxListBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxListBox_php*) _this)->phpObj);
			*((wxListBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxListBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxListBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!z!z!z!|l!z!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong1 , &_argObj4 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj4)
		{
			if (_argObj4->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj4), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find4 = Z_RESVAL_P(*tmp);
				_ptrObj4 = zend_list_find(id_to_find4, &rsrc_type);
				if (!_ptrObj4 )
					valid = 0;
			}
			else if(_argObj4->type==IS_LONG)
				_ptrObj4= (void *)_argObj4->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4 , wxString(_argStr0, wxConvUTF8));
					break;
				case 7:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4);
					break;
				case 6:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxListBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxListBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxListBox_php*) _this)->evnArray);
			array_init(((wxListBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxListBox_php*) _this)->phpObj);
			*((wxListBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxListBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxListBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxFileDialog_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxFileDialog, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	char* _argStr3;
	int _argStr3_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|s!s!s!s!l!z!", &_argObj0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argStr2 , &_argStr2_len , &_argStr3 , &_argStr3_len , &_argLong0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxFileDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , wxString(_argStr3, wxConvUTF8) , (long int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 6:
					_this = new wxFileDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , wxString(_argStr3, wxConvUTF8) , (long int)_argLong0);
					break;
				case 5:
					_this = new wxFileDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , wxString(_argStr3, wxConvUTF8));
					break;
				case 4:
					_this = new wxFileDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8));
					break;
				case 3:
					_this = new wxFileDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 2:
					_this = new wxFileDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 1:
					_this = new wxFileDialog_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxFileDialog);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxFileDialog_php*) _this)->evnArray);
			array_init(((wxFileDialog_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxFileDialog_php*) _this)->phpObj);
			*((wxFileDialog_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxFileDialog_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxFileDialog_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxFileDialog, GetPath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFileDialog_php*)_this)->GetPath();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxFileDialog, GetDirectory)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFileDialog_php*)_this)->GetDirectory();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxFileDialog, GetFilename)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFileDialog_php*)_this)->GetFilename();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxFileDialog, GetFilterIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFileDialog_php*)_this)->GetFilterIndex();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxFileDialog, SetMessage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFileDialog_php*)_this)->SetMessage(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFileDialog, SetPath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFileDialog_php*)_this)->SetPath(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFileDialog, SetDirectory)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFileDialog_php*)_this)->SetDirectory(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFileDialog, SetFilename)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFileDialog_php*)_this)->SetFilename(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFileDialog, SetWildcard)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFileDialog_php*)_this)->SetWildcard(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFileDialog, SetFilterIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFileDialog_php*)_this)->SetFilterIndex((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFileDialog, ShowModal)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFileDialog_php*)_this)->ShowModal();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxFileDialog, Show)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxFileDialog_php*)_this)->Show(_argBool0);
					break;
				case 0:
					ret0 =  ((wxFileDialog_php*)_this)->Show();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxFileDialog, GetPaths)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFileDialog_php*)_this)->GetPaths(*(wxArrayString *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFileDialog, GetFilenames)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFileDialog_php*)_this)->GetFilenames(*(wxArrayString *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxDialog_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxDialog, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxDialog_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr1, wxConvUTF8));
					break;
				case 6:
					_this = new wxDialog_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxDialog_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxDialog_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxDialog_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxDialog);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxDialog_php*) _this)->evnArray);
			array_init(((wxDialog_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxDialog_php*) _this)->phpObj);
			*((wxDialog_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxDialog_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxDialog_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxDialog_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxDialog);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxDialog_php*) _this)->evnArray);
			array_init(((wxDialog_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxDialog_php*) _this)->phpObj);
			*((wxDialog_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxDialog_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxDialog_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxDialog, Show)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDialog_php*)_this)->Show(_argBool0);
					break;
				case 0:
					ret0 =  ((wxDialog_php*)_this)->Show();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxDialog, ShowModal)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDialog_php*)_this)->ShowModal();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxDialog, EndModal)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDialog_php*)_this)->EndModal((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDialog, SetModal)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDialog_php*)_this)->SetModal(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDialog, IsModal)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDialog_php*)_this)->IsModal();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxMessageDialog_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxMessageDialog, ShowModal)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxMessageDialog_php*)_this)->ShowModal();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxMessageDialog, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!|s!l!z!", &_argObj0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argLong0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					_this = new wxMessageDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (long int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 4:
					_this = new wxMessageDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (long int)_argLong0);
					break;
				case 3:
					_this = new wxMessageDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 2:
					_this = new wxMessageDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxMessageDialog);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxMessageDialog_php*) _this)->evnArray);
			array_init(((wxMessageDialog_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxMessageDialog_php*) _this)->phpObj);
			*((wxMessageDialog_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxMessageDialog_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxMessageDialog_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxMessageDialog, Show)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMessageDialog_php*)_this)->Show(_argBool0);
					break;
				case 0:
					ret0 =  ((wxMessageDialog_php*)_this)->Show();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxStatusBarBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxStatusBarBase, PushStatusText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStatusBarBase_php*)_this)->PushStatusText(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 1:
					 ((wxStatusBarBase_php*)_this)->PushStatusText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStatusBarBase, SetStatusText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStatusBarBase_php*)_this)->SetStatusText(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 1:
					 ((wxStatusBarBase_php*)_this)->SetStatusText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStatusBarBase, GetStatusText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStatusBarBase_php*)_this)->GetStatusText((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxStatusBarBase_php*)_this)->GetStatusText();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxStatusBarBase, PopStatusText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStatusBarBase_php*)_this)->PopStatusText((int)_argLong0);
					break;
				case 0:
					 ((wxStatusBarBase_php*)_this)->PopStatusText();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStatusBarBase, GetFieldsCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStatusBarBase_php*)_this)->GetFieldsCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStatusBarBase, SetFieldsCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStatusBarBase_php*)_this)->SetFieldsCount((int)_argLong0 , (int*) _ptrObj0);
					break;
				case 1:
					 ((wxStatusBarBase_php*)_this)->SetFieldsCount((int)_argLong0);
					break;
				case 0:
					 ((wxStatusBarBase_php*)_this)->SetFieldsCount();
					break;
				default:
					break;
			}
			
		}
	}
}
void wxStatusBarBase_php::SetMinHeight(int arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetMinHeight", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxStatusBarBase, SetMinHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStatusBarBase_php*)_this)->SetMinHeight((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStatusBarBase, SetStatusWidths)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStatusBarBase_php*)_this)->SetStatusWidths((int)_argLong0 , (int*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStatusBarBase, SetStatusStyles)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStatusBarBase_php*)_this)->SetStatusStyles((int)_argLong0 , (int*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxListCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxListCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxListCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr0, wxConvUTF8));
					break;
				case 6:
					_this = new wxListCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 5:
					_this = new wxListCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxListCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxListCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxListCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxListCtrl_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxListCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxListCtrl_php*) _this)->evnArray);
			array_init(((wxListCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxListCtrl_php*) _this)->phpObj);
			*((wxListCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxListCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxListCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxListCtrl, DeleteAllItems)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->DeleteAllItems();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetItemCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListCtrl_php*)_this)->SetItemCount((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
wxString wxListCtrl_php::OnGetItemText(long int arg0 , long int arg1) const{
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "OnGetItemText", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return wxString(Z_STRVAL(retval),wxConvUTF8);	}
	}
PHP_METHOD(php_wxListCtrl, OnGetItemText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->OnGetItemText((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetColumnWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->GetColumnWidth((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetColumnWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->SetColumnWidth((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, InsertColumn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->InsertColumn((long int)_argLong0 , *(wxListItem *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetItemImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxListCtrl_php*)_this)->SetItemImage((long int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->SetItemImage((long int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetItemText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListCtrl_php*)_this)->SetItemText((long int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetItemText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->GetItemText((long int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetItemCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->GetItemCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetColumnCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->GetColumnCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, DeleteItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->DeleteItem((long int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, DeleteAllColumns)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->DeleteAllColumns();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, DeleteColumn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->DeleteColumn((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, InsertItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->InsertItem((long int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			long int ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxListCtrl_php*)_this)->InsertItem((long int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!l!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			long int ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret2 =  ((wxListCtrl_php*)_this)->InsertItem((long int)_argLong0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret2)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			long int ret3;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret3 =  ((wxListCtrl_php*)_this)->InsertItem(*(wxListItem *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret3)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetSelectedItemCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->GetSelectedItemCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetItemTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->GetItemTextColour((long int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListCtrl_php*)_this)->SetTextColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->SetItem(*(wxListItem *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetItemBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListCtrl_php*)_this)->SetItemBackgroundColour((long int)_argLong0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetItemTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListCtrl_php*)_this)->SetItemTextColour((long int)_argLong0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListCtrl, Arrange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->Arrange((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->Arrange();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, AssignImageList)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListCtrl_php*)_this)->AssignImageList((wxImageList*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListCtrl, ClearAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxListCtrl_php*)_this)->ClearAll();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListCtrl, EditLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			wxTextCtrl* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->EditLabel((long int)_argLong0 , (wxClassInfo*) _ptrObj0);
					break;
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->EditLabel((long int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxTextCtrl_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxTextCtrl));return;			
		}
	}
}
PHP_METHOD(php_wxListCtrl, EnsureVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->EnsureVisible((long int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, FindItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!|b!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxListCtrl_php*)_this)->FindItem((long int)_argLong0 , wxString(_argStr0, wxConvUTF8) , _argBool0);
					break;
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->FindItem((long int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			long int ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxListCtrl_php*)_this)->FindItem((long int)_argLong0 , (long unsigned int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!l!", &_argLong0 , &_argObj0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			long int ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret2 =  ((wxListCtrl_php*)_this)->FindItem((long int)_argLong0 , *(wxPoint *) _ptrObj0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret2)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetColumn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->GetColumn((int)_argLong0 , *(wxListItem *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetCountPerPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->GetCountPerPage();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetEditControl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxTextCtrl* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->GetEditControl();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxTextCtrl_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxTextCtrl));return;			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetImageList)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxImageList* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->GetImageList((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxImageList_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxImageList));return;			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->GetItem(*(wxListItem *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetItemBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->GetItemBackgroundColour((long int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetItemData)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListCtrl_php*)_this)->GetItemData((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetItemFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxFont ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->GetItemFont((long int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxFont),0);memcpy(ptr,&ret0,sizeof(wxFont));object_init_ex(return_value,php_wxFont_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxFont));return;			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetItemPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->GetItemPosition((long int)_argLong0 , *(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetItemRect)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!|l!", &_argLong0 , &_argObj0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxListCtrl_php*)_this)->GetItemRect((long int)_argLong0 , *(wxRect *) _ptrObj0 , (int)_argLong1);
					break;
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->GetItemRect((long int)_argLong0 , *(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetItemSpacing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->GetItemSpacing();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxListCtrl_php*)_this)->GetItemSpacing(_argBool0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret1)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetItemState)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->GetItemState((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetNextItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxListCtrl_php*)_this)->GetNextItem((long int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->GetNextItem((long int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->GetNextItem((long int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->GetTextColour();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetTopItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->GetTopItem();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, GetViewRect)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxRect ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListCtrl_php*)_this)->GetViewRect();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxRect),0);memcpy(ptr,&ret0,sizeof(wxRect));object_init_ex(return_value,php_wxRect_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRect));return;			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListCtrl_php*)_this)->SetBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetColumn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->SetColumn((int)_argLong0 , *(wxListItem *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetImageList)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListCtrl_php*)_this)->SetImageList((wxImageList*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetItemColumnImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxListCtrl_php*)_this)->SetItemColumnImage((long int)_argLong0 , (long int)_argLong1 , (int)_argLong2);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetItemData)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->SetItemData((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetItemFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListCtrl_php*)_this)->SetItemFont((long int)_argLong0 , *(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetItemPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListCtrl_php*)_this)->SetItemPosition((long int)_argLong0 , *(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetItemState)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxListCtrl_php*)_this)->SetItemState((long int)_argLong0 , (long int)_argLong1 , (long int)_argLong2);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetSingleStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxListCtrl_php*)_this)->SetSingleStyle((long int)_argLong0 , _argBool0);
					break;
				case 1:
					 ((wxListCtrl_php*)_this)->SetSingleStyle((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListCtrl, SetWindowStyleFlag)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListCtrl_php*)_this)->SetWindowStyleFlag((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxStaticBitmap_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxStaticBitmap, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!z!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxStaticBitmap_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxBitmap *) _ptrObj1 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 6:
					_this = new wxStaticBitmap_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxBitmap *) _ptrObj1 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxStaticBitmap_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxBitmap *) _ptrObj1 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3);
					break;
				case 4:
					_this = new wxStaticBitmap_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxBitmap *) _ptrObj1 , *(wxPoint *) _ptrObj2);
					break;
				case 3:
					_this = new wxStaticBitmap_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxBitmap *) _ptrObj1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxStaticBitmap);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxStaticBitmap_php*) _this)->evnArray);
			array_init(((wxStaticBitmap_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxStaticBitmap_php*) _this)->phpObj);
			*((wxStaticBitmap_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxStaticBitmap_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxStaticBitmap_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxStaticBitmap, SetBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStaticBitmap_php*)_this)->SetBitmap(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStaticBitmap, GetIcon)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxIcon ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStaticBitmap_php*)_this)->GetIcon();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxIcon),0);memcpy(ptr,&ret0,sizeof(wxIcon));object_init_ex(return_value,php_wxIcon_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxIcon));return;			
		}
	}
}
PHP_METHOD(php_wxStaticBitmap, SetIcon)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStaticBitmap_php*)_this)->SetIcon(*(wxIcon *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStaticBitmap, GetBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStaticBitmap_php*)_this)->GetBitmap();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxBitmap),0);memcpy(ptr,&ret0,sizeof(wxBitmap));object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxBitmap));return;			
		}
	}
}
void php_wxGauge_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGauge, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!|z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argLong1 , &_argObj1 , &_argObj2 , &_argLong2 , &_argObj3 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxGauge_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong2 , *(wxValidator *) _ptrObj3 , wxString(_argStr0, wxConvUTF8));
					break;
				case 7:
					_this = new wxGauge_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong2 , *(wxValidator *) _ptrObj3);
					break;
				case 6:
					_this = new wxGauge_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong2);
					break;
				case 5:
					_this = new wxGauge_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxGauge_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxGauge_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGauge);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGauge_php*) _this)->evnArray);
			array_init(((wxGauge_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGauge_php*) _this)->phpObj);
			*((wxGauge_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGauge_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGauge_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxGauge, SetShadowWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGauge_php*)_this)->SetShadowWidth((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGauge, SetBezelFace)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGauge_php*)_this)->SetBezelFace((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGauge, SetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGauge_php*)_this)->SetRange((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGauge, SetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGauge_php*)_this)->SetValue((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGauge, GetShadowWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGauge_php*)_this)->GetShadowWidth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGauge, GetBezelFace)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGauge_php*)_this)->GetBezelFace();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGauge, GetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGauge_php*)_this)->GetRange();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGauge, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGauge_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGauge, IsVertical)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGauge_php*)_this)->IsVertical();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGauge, Pulse)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGauge_php*)_this)->Pulse();
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxListEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxListEvent, GetIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListEvent_php*)_this)->GetIndex();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListEvent, GetColumn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListEvent_php*)_this)->GetColumn();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxComboBox_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxComboBox, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	void *_ptrObj4 = 0;
	zval *_argObj4 = 0;
	int id_to_find4;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|s!z!z!l!s!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr1 , &_argStr1_len , &_argLong2 , &_argObj3 , &_argStr2 , &_argStr2_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 10:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8) , (long int)_argLong2 , *(wxValidator *) _ptrObj3 , wxString(_argStr2, wxConvUTF8));
					break;
				case 9:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8) , (long int)_argLong2 , *(wxValidator *) _ptrObj3);
					break;
				case 8:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8) , (long int)_argLong2);
					break;
				case 7:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8));
					break;
				case 6:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1);
					break;
				case 5:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxComboBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxComboBox_php*) _this)->evnArray);
			array_init(((wxComboBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxComboBox_php*) _this)->phpObj);
			*((wxComboBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxComboBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxComboBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!z!z!z!|l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong1 , &_argObj4 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj4)
		{
			if (_argObj4->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj4), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find4 = Z_RESVAL_P(*tmp);
				_ptrObj4 = zend_list_find(id_to_find4, &rsrc_type);
				if (!_ptrObj4 )
					valid = 0;
			}
			else if(_argObj4->type==IS_LONG)
				_ptrObj4= (void *)_argObj4->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 9:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4 , wxString(_argStr1, wxConvUTF8));
					break;
				case 8:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4);
					break;
				case 7:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1);
					break;
				case 6:
					_this = new wxComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxComboBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxComboBox_php*) _this)->evnArray);
			array_init(((wxComboBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxComboBox_php*) _this)->phpObj);
			*((wxComboBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxComboBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxComboBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxComboBox, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxComboBox_php*)_this)->SetSelection((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, SetEditable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxComboBox_php*)_this)->SetEditable(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxComboBox_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxComboBox, SetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxComboBox_php*)_this)->SetValue(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, Replace)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxComboBox_php*)_this)->Replace((long int)_argLong0 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, Remove)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxComboBox_php*)_this)->Remove((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, SelectAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxComboBox_php*)_this)->SelectAll();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxComboBox_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, Delete)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxComboBox_php*)_this)->Delete((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, CanCopy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxComboBox_php*)_this)->CanCopy();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxComboBox, CanCut)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxComboBox_php*)_this)->CanCut();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxComboBox, CanPaste)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxComboBox_php*)_this)->CanPaste();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxComboBox, CanRedo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxComboBox_php*)_this)->CanRedo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxComboBox, CanUndo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxComboBox_php*)_this)->CanUndo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxComboBox, Copy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxComboBox_php*)_this)->Copy();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, Cut)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxComboBox_php*)_this)->Cut();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, GetCurrentSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxComboBox_php*)_this)->GetCurrentSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxComboBox, GetInsertionPoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxComboBox_php*)_this)->GetInsertionPoint();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxComboBox, GetLastPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxComboBox_php*)_this)->GetLastPosition();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxComboBox, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxComboBox_php*)_this)->GetSelection((long int*) _ptrObj0 , (long int*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, Paste)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxComboBox_php*)_this)->Paste();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, Redo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxComboBox_php*)_this)->Redo();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, SetInsertionPoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxComboBox_php*)_this)->SetInsertionPoint((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, SetInsertionPointEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxComboBox_php*)_this)->SetInsertionPointEnd();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, Undo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxComboBox_php*)_this)->Undo();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, Append)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxComboBox_php*)_this)->Append(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxComboBox_php*)_this)->Append(*(wxArrayString *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxComboBox, Insert)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxComboBox_php*)_this)->Insert(wxString(_argStr0, wxConvUTF8) , (unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxPrinter_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxPrinter, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|z!", &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxPrinter_php((wxPrintDialogData*) _ptrObj0);
					break;
				case 0:
					_this = new wxPrinter_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxPrinter);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxPrinter_php*) _this)->evnArray);
			array_init(((wxPrinter_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxPrinter_php*) _this)->phpObj);
			*((wxPrinter_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxPrinter_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxPrinter_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxPrinter, Print)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|b!", &_argObj0 , &_argObj1 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxPrinter_php*)_this)->Print((wxWindow*) _ptrObj0 , (wxPrintout*) _ptrObj1 , _argBool0);
					break;
				case 2:
					ret0 =  ((wxPrinter_php*)_this)->Print((wxWindow*) _ptrObj0 , (wxPrintout*) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxPrinter, PrintDialog)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxDC* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxPrinter_php*)_this)->PrintDialog((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxDC_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxDC));return;			
		}
	}
}
void php_wxPrintout_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxPrintout, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxPrintout_php(wxString(_argStr0, wxConvUTF8));
					break;
				case 0:
					_this = new wxPrintout_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxPrintout);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxPrintout_php*) _this)->evnArray);
			array_init(((wxPrintout_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxPrintout_php*) _this)->phpObj);
			*((wxPrintout_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxPrintout_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxPrintout_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxPrintout, GetDC)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxDC* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxPrintout_php*)_this)->GetDC();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxDC_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxDC));return;			
		}
	}
}
PHP_METHOD(php_wxPrintout, SetDC)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxPrintout_php*)_this)->SetDC((wxDC*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
bool wxPrintout_php::OnPrintPage(int arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "OnPrintPage", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxPrintout, OnPrintPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxPrintout_php*)_this)->OnPrintPage((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxPrintout, IsPreview)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxPrintout_php*)_this)->IsPreview();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxDC_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxDC, SetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDC_php*)_this)->SetFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDC, StartDoc)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDC_php*)_this)->StartDoc(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxDC, EndDoc)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDC_php*)_this)->EndDoc();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDC, StartPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDC_php*)_this)->StartPage();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDC, EndPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDC_php*)_this)->EndPage();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDC, SetPen)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDC_php*)_this)->SetPen(*(wxPen *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDC, SetBrush)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDC_php*)_this)->SetBrush(*(wxBrush *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDC, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDC_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDC, GetCharHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDC_php*)_this)->GetCharHeight();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxDC, GetCharWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDC_php*)_this)->GetCharWidth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxDCBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxDCBase, DrawText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!l!l!", &_argStr0 , &_argStr0_len , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxDCBase_php*)_this)->DrawText(wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!z!", &_argStr0 , &_argStr0_len , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxDCBase_php*)_this)->DrawText(wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, DrawCircle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxDCBase_php*)_this)->DrawCircle((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxDCBase_php*)_this)->DrawCircle(*(wxPoint *) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, DrawEllipse)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxDCBase_php*)_this)->DrawEllipse((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxDCBase_php*)_this)->DrawEllipse(*(wxPoint *) _ptrObj0 , *(wxSize *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDCBase_php*)_this)->DrawEllipse(*(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, DrawIcon)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!", &_argObj0 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxDCBase_php*)_this)->DrawIcon(*(wxIcon *) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxDCBase_php*)_this)->DrawIcon(*(wxIcon *) _ptrObj0 , *(wxPoint *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, DrawBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!|b!", &_argObj0 , &_argLong0 , &_argLong1 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxDCBase_php*)_this)->DrawBitmap(*(wxBitmap *) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				case 3:
					 ((wxDCBase_php*)_this)->DrawBitmap(*(wxBitmap *) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|b!", &_argObj0 , &_argObj1 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxDCBase_php*)_this)->DrawBitmap(*(wxBitmap *) _ptrObj0 , *(wxPoint *) _ptrObj1 , _argBool0);
					break;
				case 2:
					 ((wxDCBase_php*)_this)->DrawBitmap(*(wxBitmap *) _ptrObj0 , *(wxPoint *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, FloodFill)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!|l!", &_argLong0 , &_argLong1 , &_argObj0 , &_argLong2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxDCBase_php*)_this)->FloodFill((int)_argLong0 , (int)_argLong1 , *(wxColour *) _ptrObj0 , (int)_argLong2);
					break;
				case 3:
					ret0 =  ((wxDCBase_php*)_this)->FloodFill((int)_argLong0 , (int)_argLong1 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|l!", &_argObj0 , &_argObj1 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxDCBase_php*)_this)->FloodFill(*(wxPoint *) _ptrObj0 , *(wxColour *) _ptrObj1 , (int)_argLong0);
					break;
				case 2:
					ret1 =  ((wxDCBase_php*)_this)->FloodFill(*(wxPoint *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxDCBase, GradientFillConcentric)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxDCBase_php*)_this)->GradientFillConcentric(*(wxRect *) _ptrObj0 , *(wxColour *) _ptrObj1 , *(wxColour *) _ptrObj2);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxDCBase_php*)_this)->GradientFillConcentric(*(wxRect *) _ptrObj0 , *(wxColour *) _ptrObj1 , *(wxColour *) _ptrObj2 , *(wxPoint *) _ptrObj3);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, DrawLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxDCBase_php*)_this)->DrawLine((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxDCBase_php*)_this)->DrawLine(*(wxPoint *) _ptrObj0 , *(wxPoint *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, DrawArc)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	long _argLong5;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argLong4 , &_argLong5 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					 ((wxDCBase_php*)_this)->DrawArc((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4 , (int)_argLong5);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxDCBase_php*)_this)->DrawArc(*(wxPoint *) _ptrObj0 , *(wxPoint *) _ptrObj1 , *(wxPoint *) _ptrObj2);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, DrawCheckMark)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxDCBase_php*)_this)->DrawCheckMark((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDCBase_php*)_this)->DrawCheckMark(*(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, DrawPoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxDCBase_php*)_this)->DrawPoint((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDCBase_php*)_this)->DrawPoint(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, DrawLines)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!|l!l!", &_argLong0 , &_argObj0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxDCBase_php*)_this)->DrawLines((int)_argLong0 , (wxPoint*) _ptrObj0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					 ((wxDCBase_php*)_this)->DrawLines((int)_argLong0 , (wxPoint*) _ptrObj0 , (int)_argLong1);
					break;
				case 2:
					 ((wxDCBase_php*)_this)->DrawLines((int)_argLong0 , (wxPoint*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, DrawRectangle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxDCBase_php*)_this)->DrawRectangle((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxDCBase_php*)_this)->DrawRectangle(*(wxPoint *) _ptrObj0 , *(wxSize *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDCBase_php*)_this)->DrawRectangle(*(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, DrawSpline)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	long _argLong5;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argLong4 , &_argLong5 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					 ((wxDCBase_php*)_this)->DrawSpline((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4 , (int)_argLong5);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxDCBase_php*)_this)->DrawSpline((int)_argLong0 , (wxPoint*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, StartDoc)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDCBase_php*)_this)->StartDoc(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxDCBase, EndDoc)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDCBase_php*)_this)->EndDoc();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, StartPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDCBase_php*)_this)->StartPage();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, EndPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDCBase_php*)_this)->EndPage();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, BeginDrawing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDCBase_php*)_this)->BeginDrawing();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, EndDrawing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDCBase_php*)_this)->EndDrawing();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDCBase, GetSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDCBase_php*)_this)->GetSize();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
void php_wxPrintDialogData_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxPrintDialogData, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxPrintDialogData_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxPrintDialogData);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxPrintDialogData_php*) _this)->evnArray);
			array_init(((wxPrintDialogData_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxPrintDialogData_php*) _this)->phpObj);
			*((wxPrintDialogData_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxPrintDialogData_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxPrintDialogData_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxRect_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxRect, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					_this = new wxRect_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRect);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRect_php*) _this)->evnArray);
			array_init(((wxRect_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRect_php*) _this)->phpObj);
			*((wxRect_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRect_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRect_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxPen_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxPen, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!l!", &_argObj0 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxPen_php(*(wxColour *) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				case 2:
					_this = new wxPen_php(*(wxColour *) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxPen_php(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxPen);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxPen_php*) _this)->evnArray);
			array_init(((wxPen_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxPen_php*) _this)->phpObj);
			*((wxPen_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxPen_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxPen_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxPen, SetWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxPen_php*)_this)->SetWidth((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxPen, SetStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxPen_php*)_this)->SetStyle((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxPen, SetColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxPen_php*)_this)->SetColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxBrush_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxBrush, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxBrush_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBrush);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBrush_php*) _this)->evnArray);
			array_init(((wxBrush_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBrush_php*) _this)->phpObj);
			*((wxBrush_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBrush_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBrush_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxBrush_php(*(wxColour *) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxBrush_php(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBrush);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBrush_php*) _this)->evnArray);
			array_init(((wxBrush_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBrush_php*) _this)->phpObj);
			*((wxBrush_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBrush_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBrush_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxBrush_php(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBrush);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBrush_php*) _this)->evnArray);
			array_init(((wxBrush_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBrush_php*) _this)->phpObj);
			*((wxBrush_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBrush_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBrush_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxBrush, SetColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBrush_php*)_this)->SetColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBrush, SetStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBrush_php*)_this)->SetStyle((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBrush, SetStipple)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBrush_php*)_this)->SetStipple(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxSplashScreen_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSplashScreen, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!z!l!|z!z!l!", &_argObj0 , &_argLong0 , &_argLong1 , &_argObj1 , &_argLong2 , &_argObj2 , &_argObj3 , &_argLong3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxSplashScreen_php(*(wxBitmap *) _ptrObj0 , (long int)_argLong0 , (int)_argLong1 , (wxWindow*) _ptrObj1 , (int)_argLong2 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3 , (long int)_argLong3);
					break;
				case 7:
					_this = new wxSplashScreen_php(*(wxBitmap *) _ptrObj0 , (long int)_argLong0 , (int)_argLong1 , (wxWindow*) _ptrObj1 , (int)_argLong2 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3);
					break;
				case 6:
					_this = new wxSplashScreen_php(*(wxBitmap *) _ptrObj0 , (long int)_argLong0 , (int)_argLong1 , (wxWindow*) _ptrObj1 , (int)_argLong2 , *(wxPoint *) _ptrObj2);
					break;
				case 5:
					_this = new wxSplashScreen_php(*(wxBitmap *) _ptrObj0 , (long int)_argLong0 , (int)_argLong1 , (wxWindow*) _ptrObj1 , (int)_argLong2);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxSplashScreen);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxSplashScreen_php*) _this)->evnArray);
			array_init(((wxSplashScreen_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxSplashScreen_php*) _this)->phpObj);
			*((wxSplashScreen_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxSplashScreen_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxSplashScreen_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxSplashScreen, GetTimeout)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSplashScreen_php*)_this)->GetTimeout();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxCalendarCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxCalendarCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|l!z!z!l!s!", &_argObj0 , &_argLong0 , &_argLong1 , &_argObj1 , &_argObj2 , &_argLong2 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxCalendarCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxDateTime(_argLong1) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong2 , wxString(_argStr0, wxConvUTF8));
					break;
				case 6:
					_this = new wxCalendarCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxDateTime(_argLong1) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong2);
					break;
				case 5:
					_this = new wxCalendarCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxDateTime(_argLong1) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxCalendarCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxDateTime(_argLong1) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxCalendarCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxDateTime(_argLong1));
					break;
				case 2:
					_this = new wxCalendarCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCalendarCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCalendarCtrl_php*) _this)->evnArray);
			array_init(((wxCalendarCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCalendarCtrl_php*) _this)->phpObj);
			*((wxCalendarCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCalendarCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCalendarCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, SetDate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxCalendarCtrl_php*)_this)->SetDate(wxDateTime(_argLong0));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, GetDate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxDateTime ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarCtrl_php*)_this)->GetDate();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0.GetTicks())			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, SetLowerDateLimit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxCalendarCtrl_php*)_this)->SetLowerDateLimit(wxDateTime(_argLong0));
					break;
				case 0:
					ret0 =  ((wxCalendarCtrl_php*)_this)->SetLowerDateLimit();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, GetLowerDateLimit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxDateTime ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarCtrl_php*)_this)->GetLowerDateLimit();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0.GetTicks())			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, SetUpperDateLimit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxCalendarCtrl_php*)_this)->SetUpperDateLimit(wxDateTime(_argLong0));
					break;
				case 0:
					ret0 =  ((wxCalendarCtrl_php*)_this)->SetUpperDateLimit();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, GetUpperDateLimit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxDateTime ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarCtrl_php*)_this)->GetUpperDateLimit();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0.GetTicks())			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, SetDateRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxCalendarCtrl_php*)_this)->SetDateRange(wxDateTime(_argLong0) , wxDateTime(_argLong1));
					break;
				case 1:
					ret0 =  ((wxCalendarCtrl_php*)_this)->SetDateRange(wxDateTime(_argLong0));
					break;
				case 0:
					ret0 =  ((wxCalendarCtrl_php*)_this)->SetDateRange();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, EnableYearChange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarCtrl_php*)_this)->EnableYearChange(_argBool0);
					break;
				case 0:
					 ((wxCalendarCtrl_php*)_this)->EnableYearChange();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, EnableMonthChange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarCtrl_php*)_this)->EnableMonthChange(_argBool0);
					break;
				case 0:
					 ((wxCalendarCtrl_php*)_this)->EnableMonthChange();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, EnableHolidayDisplay)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarCtrl_php*)_this)->EnableHolidayDisplay(_argBool0);
					break;
				case 0:
					 ((wxCalendarCtrl_php*)_this)->EnableHolidayDisplay();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, SetHeaderColours)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxCalendarCtrl_php*)_this)->SetHeaderColours(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, SetHighlightColours)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxCalendarCtrl_php*)_this)->SetHighlightColours(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, SetHolidayColours)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxCalendarCtrl_php*)_this)->SetHolidayColours(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, SetHoliday)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarCtrl_php*)_this)->SetHoliday((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, Enable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxCalendarCtrl_php*)_this)->Enable(_argBool0);
					break;
				case 0:
					ret0 =  ((wxCalendarCtrl_php*)_this)->Enable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, Show)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxCalendarCtrl_php*)_this)->Show(_argBool0);
					break;
				case 0:
					ret0 =  ((wxCalendarCtrl_php*)_this)->Show();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, SetWindowStyleFlag)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarCtrl_php*)_this)->SetWindowStyleFlag((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, GetAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxCalendarDateAttr* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxCalendarCtrl_php*)_this)->GetAttr((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxCalendarDateAttr_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxCalendarDateAttr));return;			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, SetAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxCalendarCtrl_php*)_this)->SetAttr((long unsigned int)_argLong0 , (wxCalendarDateAttr*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarCtrl, ResetAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarCtrl_php*)_this)->ResetAttr((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxCalendarEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxCalendarEvent, GetWeekDay)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxCalendarEvent_php*)_this)->GetWeekDay();
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxDateEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxDateEvent, GetDate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxDateTime ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDateEvent_php*)_this)->GetDate();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0.GetTicks())			
		}
	}
}
PHP_METHOD(php_wxDateEvent, SetDate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDateEvent_php*)_this)->SetDate(wxDateTime(_argLong0));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxDateTime_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxDateTime, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxDateTime_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxDateTime);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxDateTime_php*) _this)->evnArray);
			array_init(((wxDateTime_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxDateTime_php*) _this)->phpObj);
			*((wxDateTime_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxDateTime_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxDateTime_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxDateTime_php((long int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxDateTime);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxDateTime_php*) _this)->evnArray);
			array_init(((wxDateTime_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxDateTime_php*) _this)->phpObj);
			*((wxDateTime_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxDateTime_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxDateTime_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxDateTime_php((double)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxDateTime);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxDateTime_php*) _this)->evnArray);
			array_init(((wxDateTime_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxDateTime_php*) _this)->phpObj);
			*((wxDateTime_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxDateTime_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxDateTime_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxDateTime, GetCountry)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDateTime_php*)_this)->GetCountry();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDateTime, ConvertYearToBC)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->ConvertYearToBC((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxDateTime, GetCentury)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->GetCentury((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxDateTime, GetTmNow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDateTime_php*)_this)->GetTmNow();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDateTime, GetTimeNow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->GetTimeNow();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxDateTime, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDateTime_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDateTime, FormatISOTime)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->FormatISOTime();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxDateTime, FormatISODate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->FormatISODate();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxDateTime, FormatTime)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->FormatTime();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxDateTime, FormatDate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->FormatDate();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxDateTime, ParseTime)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			const wxChar * ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->ParseTime(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_STRING((char *)wxString(ret0).c_str(),1)			
		}
	}
}
PHP_METHOD(php_wxDateTime, ParseDate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			const wxChar * ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->ParseDate(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_STRING((char *)wxString(ret0).c_str(),1)			
		}
	}
}
PHP_METHOD(php_wxDateTime, ParseDateTime)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			const wxChar * ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->ParseDateTime(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_STRING((char *)wxString(ret0).c_str(),1)			
		}
	}
}
PHP_METHOD(php_wxDateTime, IsSameTime)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->IsSameTime(wxDateTime(_argLong0));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxDateTime, IsSameDate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->IsSameDate(wxDateTime(_argLong0));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxDateTime, IsBetween)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxDateTime_php*)_this)->IsBetween(wxDateTime(_argLong0) , wxDateTime(_argLong1));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxDateTime, IsStrictlyBetween)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxDateTime_php*)_this)->IsStrictlyBetween(wxDateTime(_argLong0) , wxDateTime(_argLong1));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxDateTime, IsLaterThan)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->IsLaterThan(wxDateTime(_argLong0));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxDateTime, IsEarlierThan)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->IsEarlierThan(wxDateTime(_argLong0));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxDateTime, IsEqualTo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->IsEqualTo(wxDateTime(_argLong0));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxDateTime, GetAsDOS)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxDateTime_php*)_this)->GetAsDOS();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDateTime, SetFromDOS)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDateTime_php*)_this)->SetFromDOS((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDateTime, GetTicks)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->GetTicks();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxDateTime, MakeFromUTC)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDateTime_php*)_this)->MakeFromUTC(_argBool0);
					break;
				case 0:
					 ((wxDateTime_php*)_this)->MakeFromUTC();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDateTime, FromUTC)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxDateTime ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->FromUTC(_argBool0);
					break;
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->FromUTC();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxDateTime),0);memcpy(ptr,&ret0,sizeof(wxDateTime));object_init_ex(return_value,php_wxDateTime_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDateTime));return;			
		}
	}
}
PHP_METHOD(php_wxDateTime, MakeGMT)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDateTime_php*)_this)->MakeGMT(_argBool0);
					break;
				case 0:
					 ((wxDateTime_php*)_this)->MakeGMT();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDateTime, ToGMT)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxDateTime ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->ToGMT(_argBool0);
					break;
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->ToGMT();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxDateTime),0);memcpy(ptr,&ret0,sizeof(wxDateTime));object_init_ex(return_value,php_wxDateTime_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDateTime));return;			
		}
	}
}
PHP_METHOD(php_wxDateTime, MakeUTC)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDateTime_php*)_this)->MakeUTC(_argBool0);
					break;
				case 0:
					 ((wxDateTime_php*)_this)->MakeUTC();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDateTime, ToUTC)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxDateTime ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDateTime_php*)_this)->ToUTC(_argBool0);
					break;
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->ToUTC();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxDateTime),0);memcpy(ptr,&ret0,sizeof(wxDateTime));object_init_ex(return_value,php_wxDateTime_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDateTime));return;			
		}
	}
}
PHP_METHOD(php_wxDateTime, SetYear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDateTime_php*)_this)->SetYear((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDateTime, Now)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxDateTime ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->Now();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxDateTime),0);memcpy(ptr,&ret0,sizeof(wxDateTime));object_init_ex(return_value,php_wxDateTime_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDateTime));return;			
		}
	}
}
PHP_METHOD(php_wxDateTime, UNow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxDateTime ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->UNow();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxDateTime),0);memcpy(ptr,&ret0,sizeof(wxDateTime));object_init_ex(return_value,php_wxDateTime_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDateTime));return;			
		}
	}
}
PHP_METHOD(php_wxDateTime, Today)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxDateTime ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDateTime_php*)_this)->Today();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxDateTime),0);memcpy(ptr,&ret0,sizeof(wxDateTime));object_init_ex(return_value,php_wxDateTime_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDateTime));return;			
		}
	}
}
void php_wxCalendarDateAttr_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxCalendarDateAttr, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxCalendarDateAttr_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCalendarDateAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCalendarDateAttr_php*) _this)->evnArray);
			array_init(((wxCalendarDateAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCalendarDateAttr_php*) _this)->phpObj);
			*((wxCalendarDateAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCalendarDateAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCalendarDateAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|z!z!z!l!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					_this = new wxCalendarDateAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1 , *(wxColour *) _ptrObj2 , *(wxFont *) _ptrObj3 , (wxCalendarDateBorder) _argLong0);
					break;
				case 4:
					_this = new wxCalendarDateAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1 , *(wxColour *) _ptrObj2 , *(wxFont *) _ptrObj3);
					break;
				case 3:
					_this = new wxCalendarDateAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1 , *(wxColour *) _ptrObj2);
					break;
				case 2:
					_this = new wxCalendarDateAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				case 1:
					_this = new wxCalendarDateAttr_php(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCalendarDateAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCalendarDateAttr_php*) _this)->evnArray);
			array_init(((wxCalendarDateAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCalendarDateAttr_php*) _this)->phpObj);
			*((wxCalendarDateAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCalendarDateAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCalendarDateAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxCalendarDateAttr_php((wxCalendarDateBorder) _argLong0 , *(wxColour *) _ptrObj0);
					break;
				case 1:
					_this = new wxCalendarDateAttr_php((wxCalendarDateBorder) _argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCalendarDateAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCalendarDateAttr_php*) _this)->evnArray);
			array_init(((wxCalendarDateAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCalendarDateAttr_php*) _this)->phpObj);
			*((wxCalendarDateAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCalendarDateAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCalendarDateAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, SetTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarDateAttr_php*)_this)->SetTextColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, SetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarDateAttr_php*)_this)->SetBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, SetBorderColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarDateAttr_php*)_this)->SetBorderColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, SetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarDateAttr_php*)_this)->SetFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, SetBorder)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarDateAttr_php*)_this)->SetBorder((wxCalendarDateBorder) _argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, SetHoliday)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCalendarDateAttr_php*)_this)->SetHoliday(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, IsHoliday)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarDateAttr_php*)_this)->IsHoliday();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, HasBorder)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarDateAttr_php*)_this)->HasBorder();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, HasFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarDateAttr_php*)_this)->HasFont();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, HasBorderColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarDateAttr_php*)_this)->HasBorderColour();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, HasBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarDateAttr_php*)_this)->HasBackgroundColour();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, HasTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarDateAttr_php*)_this)->HasTextColour();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, GetTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarDateAttr_php*)_this)->GetTextColour();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, GetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarDateAttr_php*)_this)->GetBackgroundColour();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, GetBorderColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarDateAttr_php*)_this)->GetBorderColour();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, GetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxFont ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarDateAttr_php*)_this)->GetFont();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxFont_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxFont));return;			
		}
	}
}
PHP_METHOD(php_wxCalendarDateAttr, GetBorder)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxCalendarDateBorder ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCalendarDateAttr_php*)_this)->GetBorder();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxTimer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTimer, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxTimer_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTimer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTimer_php*) _this)->evnArray);
			array_init(((wxTimer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTimer_php*) _this)->phpObj);
			*((wxTimer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTimer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTimer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxWindow && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook && rsrc_type != le_wxMenu && rsrc_type != le_wxMenuBar && rsrc_type != le_wxValidator && rsrc_type != le_wxRadioBox && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxRichTextCtrl))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxTimer_php((wxEvtHandler*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxTimer_php((wxEvtHandler*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTimer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTimer_php*) _this)->evnArray);
			array_init(((wxTimer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTimer_php*) _this)->phpObj);
			*((wxTimer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTimer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTimer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxTimer, Start)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxTimer_php*)_this)->Start((int)_argLong0 , _argBool0);
					break;
				case 1:
					ret0 =  ((wxTimer_php*)_this)->Start((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxTimer_php*)_this)->Start();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTimer, Stop)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTimer_php*)_this)->Stop();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTimer, IsRunning)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTimer_php*)_this)->IsRunning();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxEvtHandler_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxEvtHandler, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxEvtHandler_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxEvtHandler);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxEvtHandler_php*) _this)->evnArray);
			array_init(((wxEvtHandler_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxEvtHandler_php*) _this)->phpObj);
			*((wxEvtHandler_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxEvtHandler_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxEvtHandler_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}

void wxEvtHandler_php::onEvent(wxEvent& evnt)
{
	zval *arg[1];
	MAKE_STD_ZVAL(arg[0]);
	char _wxResource[] = "wxResource";
	TSRMLS_FETCH();

	if(0)
	{}
	
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(),wxT("wxCommandEvent")))
	{
		object_init_ex(arg[0],php_wxCommandEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxCommandEvent));
	}
	
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(),wxT("wxTreeEvent")))
	{
		object_init_ex(arg[0],php_wxTreeEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxTreeEvent));
	}
	
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(),wxT("wxListEvent")))
	{
		object_init_ex(arg[0],php_wxListEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxListEvent));
	}
	
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(),wxT("wxCalendarEvent")))
	{
		object_init_ex(arg[0],php_wxCalendarEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxCalendarEvent));
	}
	
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(),wxT("wxTimerEvent")))
	{
		object_init_ex(arg[0],php_wxTimerEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxTimerEvent));
	}
	
	else if(!tcscmp(evnt.GetClassInfo()->GetClassName(),wxT("wxHyperlinkEvent")))
	{
		object_init_ex(arg[0],php_wxHyperlinkEvent_entry);
		add_property_resource(arg[0], _wxResource, zend_list_insert(&evnt, le_wxHyperlinkEvent));
	}

        char* wxname;
        zval dummy;
        zval* fc_name;
        wxCommandEvent* ce;
        wxPhpClientData* co;

        ce = (wxCommandEvent*)evnt.m_callbackUserData;
        co = (wxPhpClientData*)ce->GetClientObject();

        MAKE_STD_ZVAL(fc_name);
        wxname = (char*)ce->GetString().c_str();
        ZVAL_STRING(fc_name, wxname,1);

        if (call_user_function(NULL, &(co->phpObj), fc_name, &dummy, 1, arg TSRMLS_CC) == FAILURE) {
                wxMessageBox(_T("Failed method Call!\n"));
        }	
	
}
PHP_METHOD(php_wxEvtHandler, Connect)
{
        zval **tmp;
        int rsrc_type;
        int id_to_find;
        int valid = 1;
        char _wxResource[] = "wxResource";
        wxEvtHandler *_this;

        if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE)
                return;
        id_to_find = Z_RESVAL_P(*tmp);
        _this = (wxEvtHandler*)zend_list_find(id_to_find, &rsrc_type);

        zval* fc;
        int flag,id0 = 0,id1 = 0;

        zval** fc_obj;
        zval** fc_name;
        char* ct;
        int args;
        args = ZEND_NUM_ARGS();

        if(
                zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, args TSRMLS_CC, "lllz", &id0, &id1, &flag , (void**)&fc) == SUCCESS   ||
                zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, args TSRMLS_CC, "llz" , &id0, &flag , (void**)&fc) == SUCCESS ||
                zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, args TSRMLS_CC, "lz"  , &flag , (void**)&fc) == SUCCESS
                )
        {
                zend_hash_index_find(HASH_OF(fc),0,(void**)&fc_obj);
                zend_hash_index_find(HASH_OF(fc),1,(void**)&fc_name);
                Z_ADDREF_P(*fc_obj);


                ct = (*fc_name)->value.str.val;

                wxCommandEvent* ce = new wxCommandEvent();
                ce->SetString(wxString::Format(wxT("%s"),ct));
                ce->SetClientObject(new wxPhpClientData(*fc_obj));

                switch(args){
                        case 4:
                                _this->Connect(id0, id1, flag, wxEventHandler(wxEvtHandler_php::onEvent),ce);
                                break;
                        case 3:
                                _this->Connect(id0, flag, wxEventHandler(wxEvtHandler_php::onEvent),ce);
                                break;
                        case 2:
                                _this->Connect(flag, wxEventHandler(wxEvtHandler_php::onEvent),ce);
                                break;
                        default:
                                wxMessageBox(_T("Failed to create event\n"));
                                break;
                }
        }
}
void php_wxTimerEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTimerEvent, GetInterval)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTimerEvent_php*)_this)->GetInterval();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxIPV4address_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxIPV4address, Hostname)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxIPV4address_php*)_this)->Hostname(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxIPV4address, Service)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxIPV4address_php*)_this)->Service(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxIPV4address, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxIPV4address_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxIPV4address);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxIPV4address_php*) _this)->evnArray);
			array_init(((wxIPV4address_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxIPV4address_php*) _this)->phpObj);
			*((wxIPV4address_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxIPV4address_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxIPV4address_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxSockAddress_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSockAddress, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxSockAddress_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxSocketClient_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSocketClient, Connect)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIPV4address))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxSocketClient_php*)_this)->Connect(*(wxSockAddress *) _ptrObj0 , _argBool0);
					break;
				case 1:
					ret0 =  ((wxSocketClient_php*)_this)->Connect(*(wxSockAddress *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxSocketClient, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxSocketClient_php((int)_argLong0);
					break;
				case 0:
					_this = new wxSocketClient_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxSocketClient);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxSocketClient_php*) _this)->evnArray);
			array_init(((wxSocketClient_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxSocketClient_php*) _this)->phpObj);
			*((wxSocketClient_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxSocketClient_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxSocketClient_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxSocketBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSocketBase, SetEventHandler)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxWindow && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook && rsrc_type != le_wxMenu && rsrc_type != le_wxMenuBar && rsrc_type != le_wxValidator && rsrc_type != le_wxRadioBox && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxRichTextCtrl))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxSocketBase_php*)_this)->SetEventHandler(*(wxEvtHandler *) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					 ((wxSocketBase_php*)_this)->SetEventHandler(*(wxEvtHandler *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSocketBase, Destroy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSocketBase_php*)_this)->Destroy();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxSocketBase, Close)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSocketBase_php*)_this)->Close();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxSocketBase, Discard)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxSocketBase_php*)_this)->Discard();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSocketBase, IsConnected)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSocketBase_php*)_this)->IsConnected();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxSocketBase, Write)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxSocketBase_php*)_this)->Write(&_argStr0 , (unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxCheckBox_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxCheckBox, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!|z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxCheckBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr1, wxConvUTF8));
					break;
				case 7:
					_this = new wxCheckBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 6:
					_this = new wxCheckBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxCheckBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxCheckBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxCheckBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCheckBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCheckBox_php*) _this)->evnArray);
			array_init(((wxCheckBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCheckBox_php*) _this)->phpObj);
			*((wxCheckBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCheckBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCheckBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxCheckBox, SetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCheckBox_php*)_this)->SetValue(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCheckBox, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCheckBox_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxDirDialog_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxDirDialog, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|s!s!l!z!z!s!", &_argObj0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argLong0 , &_argObj1 , &_argObj2 , &_argStr2 , &_argStr2_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxDirDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (long int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , wxString(_argStr2, wxConvUTF8));
					break;
				case 6:
					_this = new wxDirDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (long int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 5:
					_this = new wxDirDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (long int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 4:
					_this = new wxDirDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (long int)_argLong0);
					break;
				case 3:
					_this = new wxDirDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 2:
					_this = new wxDirDialog_php((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 1:
					_this = new wxDirDialog_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxDirDialog);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxDirDialog_php*) _this)->evnArray);
			array_init(((wxDirDialog_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxDirDialog_php*) _this)->phpObj);
			*((wxDirDialog_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxDirDialog_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxDirDialog_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxDirDialog, SetPath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDirDialog_php*)_this)->SetPath(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDirDialog, ShowModal)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDirDialog_php*)_this)->ShowModal();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxDirDialog, GetPath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDirDialog_php*)_this)->GetPath();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
void php_wxBitmapButton_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxBitmapButton, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	void *_ptrObj4 = 0;
	zval *_argObj4 = 0;
	int id_to_find4;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!z!|z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong1 , &_argObj4 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid && _argObj4)
		{
			if (_argObj4->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj4), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find4 = Z_RESVAL_P(*tmp);
				_ptrObj4 = zend_list_find(id_to_find4, &rsrc_type);
				if (!_ptrObj4 )
					valid = 0;
			}
			else if(_argObj4->type==IS_LONG)
				_ptrObj4= (void *)_argObj4->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxBitmapButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxBitmap *) _ptrObj1 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4 , wxString(_argStr0, wxConvUTF8));
					break;
				case 7:
					_this = new wxBitmapButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxBitmap *) _ptrObj1 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4);
					break;
				case 6:
					_this = new wxBitmapButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxBitmap *) _ptrObj1 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxBitmapButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxBitmap *) _ptrObj1 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3);
					break;
				case 4:
					_this = new wxBitmapButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxBitmap *) _ptrObj1 , *(wxPoint *) _ptrObj2);
					break;
				case 3:
					_this = new wxBitmapButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxBitmap *) _ptrObj1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBitmapButton);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBitmapButton_php*) _this)->evnArray);
			array_init(((wxBitmapButton_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBitmapButton_php*) _this)->phpObj);
			*((wxBitmapButton_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBitmapButton_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBitmapButton_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxToggleButton_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxToggleButton, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!|z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxToggleButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr1, wxConvUTF8));
					break;
				case 7:
					_this = new wxToggleButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 6:
					_this = new wxToggleButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxToggleButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxToggleButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxToggleButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxToggleButton);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxToggleButton_php*) _this)->evnArray);
			array_init(((wxToggleButton_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxToggleButton_php*) _this)->phpObj);
			*((wxToggleButton_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxToggleButton_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxToggleButton_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxToggleButton, SetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxToggleButton_php*)_this)->SetValue(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxToggleButton, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxToggleButton_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxToggleButton, SetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxToggleButton_php*)_this)->SetLabel(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxChoice_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxChoice, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	void *_ptrObj4 = 0;
	zval *_argObj4 = 0;
	int id_to_find4;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!l!s!l!z!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len , &_argLong2 , &_argObj3 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 9:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8) , (long int)_argLong2 , *(wxValidator *) _ptrObj3 , wxString(_argStr1, wxConvUTF8));
					break;
				case 8:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8) , (long int)_argLong2 , *(wxValidator *) _ptrObj3);
					break;
				case 7:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8) , (long int)_argLong2);
					break;
				case 6:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1);
					break;
				case 4:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxChoice);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxChoice_php*) _this)->evnArray);
			array_init(((wxChoice_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxChoice_php*) _this)->phpObj);
			*((wxChoice_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxChoice_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxChoice_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!z!z!z!|l!z!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong1 , &_argObj4 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj4)
		{
			if (_argObj4->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj4), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find4 = Z_RESVAL_P(*tmp);
				_ptrObj4 = zend_list_find(id_to_find4, &rsrc_type);
				if (!_ptrObj4 )
					valid = 0;
			}
			else if(_argObj4->type==IS_LONG)
				_ptrObj4= (void *)_argObj4->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4 , wxString(_argStr0, wxConvUTF8));
					break;
				case 7:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4);
					break;
				case 6:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxChoice_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxChoice);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxChoice_php*) _this)->evnArray);
			array_init(((wxChoice_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxChoice_php*) _this)->phpObj);
			*((wxChoice_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxChoice_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxChoice_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxChoice, GetCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			unsigned int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxChoice_php*)_this)->GetCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxChoice, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxChoice_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxChoice, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxChoice_php*)_this)->GetSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxChoice, GetCurrentSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxChoice_php*)_this)->GetCurrentSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxChoice, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxChoice_php*)_this)->SetSelection((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxChoice, FindString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|b!", &_argStr0 , &_argStr0_len , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxChoice_php*)_this)->FindString(wxString(_argStr0, wxConvUTF8) , _argBool0);
					break;
				case 1:
					ret0 =  ((wxChoice_php*)_this)->FindString(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxChoice, GetString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxChoice_php*)_this)->GetString((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxChoice, SetString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxChoice_php*)_this)->SetString((unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxChoice, Delete)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxChoice_php*)_this)->Delete((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxChoice, Append)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxChoice_php*)_this)->Append(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxChoice_php*)_this)->Append(*(wxArrayString *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxChoice, Insert)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxChoice_php*)_this)->Insert(wxString(_argStr0, wxConvUTF8) , (unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxStyledTextCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxStyledTextCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxStyledTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxStyledTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxStyledTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxStyledTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxStyledTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxStyledTextCtrl_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxStyledTextCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxStyledTextCtrl_php*) _this)->evnArray);
			array_init(((wxStyledTextCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxStyledTextCtrl_php*) _this)->phpObj);
			*((wxStyledTextCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxStyledTextCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxStyledTextCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AddText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AddText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, ClearAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->ClearAll();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLength)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLength();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetCurrentPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetCurrentPos();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetCharAt)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetCharAt((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetAnchor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetAnchor();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetStyleAt)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetStyleAt((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, Redo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->Redo();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetUndoCollection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetUndoCollection(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SelectAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->SelectAll();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetSavePoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->SetSavePoint();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CanRedo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->CanRedo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetStyledText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->GetStyledText((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetViewWhiteSpace)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetViewWhiteSpace();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetViewWhiteSpace)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetViewWhiteSpace((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetUndoCollection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetUndoCollection();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GotoLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->GotoLine((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GotoPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->GotoPos((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetEndStyled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetEndStyled();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetAnchor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetAnchor((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, ConvertEOLs)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->ConvertEOLs((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetEOLMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetEOLMode();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetEOLMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetEOLMode((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StartStyling)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StartStyling((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetStyling)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetStyling((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetTabWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetTabWidth((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetTabWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetTabWidth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetCodePage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetCodePage((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerDefine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|z!z!", &_argLong0 , &_argLong1 , &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxStyledTextCtrl_php*)_this)->MarkerDefine((int)_argLong0 , (int)_argLong1 , *(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				case 3:
					 ((wxStyledTextCtrl_php*)_this)->MarkerDefine((int)_argLong0 , (int)_argLong1 , *(wxColour *) _ptrObj0);
					break;
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->MarkerDefine((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerSetForeground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->MarkerSetForeground((int)_argLong0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerSetBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->MarkerSetBackground((int)_argLong0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerAdd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->MarkerAdd((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerDelete)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->MarkerDelete((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerDeleteAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->MarkerDeleteAll((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerGet)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->MarkerGet((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerNext)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->MarkerNext((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerPrevious)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->MarkerPrevious((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerDefineBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->MarkerDefineBitmap((int)_argLong0 , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerAddSet)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->MarkerAddSet((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, MarkerSetAlpha)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->MarkerSetAlpha((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetMarginType)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetMarginType((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetMarginType)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetMarginType((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetMarginWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetMarginWidth((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetMarginWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetMarginWidth((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetMarginMask)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetMarginMask((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetMarginMask)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetMarginMask((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetMarginSensitive)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetMarginSensitive((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetMarginSensitive)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetMarginSensitive((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleClearAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->StyleClearAll();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetForeground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetForeground((int)_argLong0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetBackground((int)_argLong0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetBold)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetBold((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetItalic)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetItalic((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetFaceName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetFaceName((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetEOLFilled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetEOLFilled((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleResetDefault)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->StyleResetDefault();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetUnderline)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetUnderline((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetCase)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetCase((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetHotSpot)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetHotSpot((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetSelForeground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!z!", &_argBool0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetSelForeground(_argBool0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetSelBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!z!", &_argBool0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetSelBackground(_argBool0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetSelAlpha)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetSelAlpha();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetSelAlpha)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetSelAlpha((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetCaretForeground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetCaretForeground(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CmdKeyAssign)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxStyledTextCtrl_php*)_this)->CmdKeyAssign((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CmdKeyClear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->CmdKeyClear((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CmdKeyClearAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->CmdKeyClearAll();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetVisible((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetCaretPeriod)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetCaretPeriod();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetCaretPeriod)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetCaretPeriod((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, IndicatorSetStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->IndicatorSetStyle((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, IndicatorGetStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->IndicatorGetStyle((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, IndicatorSetForeground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->IndicatorSetForeground((int)_argLong0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, IndicatorGetForeground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->IndicatorGetForeground((int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetWhitespaceForeground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!z!", &_argBool0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetWhitespaceForeground(_argBool0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetWhitespaceBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!z!", &_argBool0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetWhitespaceBackground(_argBool0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompShow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompShow((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompCancel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompCancel();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompActive)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->AutoCompActive();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompPosStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->AutoCompPosStart();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompComplete)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompComplete();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompStops)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompStops(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompSetSeparator((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->AutoCompGetSeparator();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSelect)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompSelect(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetCancelAtStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompSetCancelAtStart(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetCancelAtStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->AutoCompGetCancelAtStart();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetFillUps)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompSetFillUps(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetChooseSingle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompSetChooseSingle(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetChooseSingle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->AutoCompGetChooseSingle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetIgnoreCase)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompSetIgnoreCase(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetIgnoreCase)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->AutoCompGetIgnoreCase();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetAutoHide)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompSetAutoHide(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetAutoHide)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->AutoCompGetAutoHide();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetTypeSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->AutoCompGetTypeSeparator();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetTypeSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompSetTypeSeparator((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetMaxWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompSetMaxWidth((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetMaxWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->AutoCompGetMaxWidth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompSetMaxHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AutoCompSetMaxHeight((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetMaxHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->AutoCompGetMaxHeight();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetIndent((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetIndent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetUseTabs)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetUseTabs(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetUseTabs)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetUseTabs();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetLineIndentation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetLineIndentation((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLineIndentation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLineIndentation((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLineIndentPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLineIndentPosition((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetColumn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetColumn((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetUseHorizontalScrollBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetUseHorizontalScrollBar(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetUseHorizontalScrollBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetUseHorizontalScrollBar();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetIndentationGuides)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetIndentationGuides(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetIndentationGuides)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetIndentationGuides();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetHighlightGuide)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetHighlightGuide((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLineEndPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLineEndPosition((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetHighlightGuide)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetHighlightGuide();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetCodePage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetCodePage();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetCurrentPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetCurrentPos((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetSelectionStart((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetSelectionStart();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetSelectionEnd((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetSelectionEnd();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetPrintColourMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetPrintColourMode((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetPrintColourMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetPrintColourMode();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, FindText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!|l!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->FindText((int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , (int)_argLong2);
					break;
				case 3:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->FindText((int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetPrintMagnification)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetPrintMagnification();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetPrintMagnification)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetPrintMagnification((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetFirstVisibleLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetFirstVisibleLine();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLine((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLineCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLineCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetMarginLeft)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetMarginLeft((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetMarginLeft)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetMarginLeft();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetMarginRight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetMarginRight((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetMarginRight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetMarginRight();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetModify)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetModify();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetSelection((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetSelectedText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetSelectedText();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetTextRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetTextRange((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, HideSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->HideSelection(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, LineFromPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->LineFromPosition((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, PositionFromLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->PositionFromLine((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, LineScroll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->LineScroll((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, EnsureCaretVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->EnsureCaretVisible();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, ReplaceSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->ReplaceSelection(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetReadOnly)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetReadOnly(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CanPaste)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->CanPaste();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CanUndo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->CanUndo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, EmptyUndoBuffer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->EmptyUndoBuffer();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, Undo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->Undo();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, Cut)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->Cut();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, Copy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->Copy();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, Paste)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->Paste();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetText();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetTextLength)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetTextLength();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetOvertype)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetOvertype(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetOvertype)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetOvertype();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetCaretWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetCaretWidth((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetCaretWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetCaretWidth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, ReplaceTarget)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->ReplaceTarget(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, ReplaceTargetRE)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->ReplaceTargetRE(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SearchInTarget)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->SearchInTarget(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetSearchFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetSearchFlags((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetSearchFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetSearchFlags();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CallTipCancel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->CallTipCancel();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CallTipActive)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->CallTipActive();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CallTipPosAtStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->CallTipPosAtStart();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CallTipSetHighlight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->CallTipSetHighlight((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CallTipSetBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->CallTipSetBackground(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CallTipSetForeground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->CallTipSetForeground(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CallTipSetForegroundHighlight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->CallTipSetForegroundHighlight(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CallTipUseStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->CallTipUseStyle((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, VisibleFromDocLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->VisibleFromDocLine((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, DocLineFromVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->DocLineFromVisible((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, WrapCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->WrapCount((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetFoldLevel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetFoldLevel((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetFoldLevel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetFoldLevel((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLastChild)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLastChild((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetFoldParent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetFoldParent((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, ShowLines)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->ShowLines((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, HideLines)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->HideLines((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLineVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLineVisible((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetFoldExpanded)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetFoldExpanded((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetFoldExpanded)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetFoldExpanded((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, ToggleFold)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->ToggleFold((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, EnsureVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->EnsureVisible((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetFoldFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetFoldFlags((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, EnsureVisibleEnforcePolicy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->EnsureVisibleEnforcePolicy((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetTabIndents)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetTabIndents(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetTabIndents)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetTabIndents();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetBackSpaceUnIndents)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetBackSpaceUnIndents(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetBackSpaceUnIndents)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetBackSpaceUnIndents();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetMouseDwellTime)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetMouseDwellTime((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetMouseDwellTime)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetMouseDwellTime();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, WordStartPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->WordStartPosition((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, WordEndPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->WordEndPosition((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetWrapMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetWrapMode((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetWrapMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetWrapMode();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetWrapVisualFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetWrapVisualFlags((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetWrapVisualFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetWrapVisualFlags();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetWrapVisualFlagsLocation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetWrapVisualFlagsLocation((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetWrapVisualFlagsLocation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetWrapVisualFlagsLocation();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetWrapStartIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetWrapStartIndent((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetWrapStartIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetWrapStartIndent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetScrollWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetScrollWidth((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetLayoutCache)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetLayoutCache((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLayoutCache)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLayoutCache();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetScrollWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetScrollWidth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, TextWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->TextWidth((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetEndAtLastLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetEndAtLastLine(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetEndAtLastLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetEndAtLastLine();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, TextHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->TextHeight((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetUseVerticalScrollBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetUseVerticalScrollBar(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetUseVerticalScrollBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetUseVerticalScrollBar();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AppendText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->AppendText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetTwoPhaseDraw)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetTwoPhaseDraw();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetTwoPhaseDraw)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetTwoPhaseDraw(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, TargetFromSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->TargetFromSelection();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetFoldMarginColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!z!", &_argBool0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetFoldMarginColour(_argBool0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetFoldMarginHiColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!z!", &_argBool0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetFoldMarginHiColour(_argBool0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, LineDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->LineDown();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, LineDownExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->LineDownExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, LineUp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->LineUp();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CharLeft)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->CharLeft();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, LineUpExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->LineUpExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CharLeftExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->CharLeftExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CharRight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->CharRight();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CharRightExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->CharRightExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, WordLeft)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->WordLeft();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, WordLeftExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->WordLeftExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, WordRight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->WordRight();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, WordRightExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->WordRightExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, Home)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->Home();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, HomeExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->HomeExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, LineEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->LineEnd();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, LineEndExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->LineEndExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, DocumentStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->DocumentStart();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, DocumentStartExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->DocumentStartExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, DocumentEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->DocumentEnd();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, DocumentEndExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->DocumentEndExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, PageUp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->PageUp();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, PageUpExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->PageUpExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, PageDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->PageDown();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, PageDownExtend)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->PageDownExtend();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, EditToggleOvertype)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->EditToggleOvertype();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, Cancel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->Cancel();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, Tab)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->Tab();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, DeleteBack)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->DeleteBack();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, BackTab)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->BackTab();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, NewLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->NewLine();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, FormFeed)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->FormFeed();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, ZoomIn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->ZoomIn();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, ZoomOut)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->ZoomOut();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, LineCopy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->LineCopy();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, LineLength)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->LineLength((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, LinesOnScreen)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->LinesOnScreen();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, UsePopUp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->UsePopUp(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetZoom)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetZoom((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetZoom)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetZoom();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CopyRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->CopyRange((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, CopyText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->CopyText((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetSelectionMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetSelectionMode((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetSelectionMode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetSelectionMode();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLineSelStartPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLineSelStartPosition((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLineSelEndPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLineSelEndPosition((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetWhitespaceChars)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetWhitespaceChars(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetCharsDefault)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->SetCharsDefault();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, AutoCompGetCurrent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->AutoCompGetCurrent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StartRecord)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->StartRecord();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StopRecord)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStyledTextCtrl_php*)_this)->StopRecord();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetLexer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetLexer((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetLexer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetLexer();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, Colourise)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->Colourise((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetProperty)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!s!", &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetProperty(wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetKeyWords)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetKeyWords((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetLexerLanguage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetLexerLanguage(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetProperty)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetProperty(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetPropertyExpanded)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetPropertyExpanded(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetPropertyInt)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetPropertyInt(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetCurrentLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetCurrentLine();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetSpec)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetSpec((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetFont((int)_argLong0 , *(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, StyleSetCharacterSet)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->StyleSetCharacterSet((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetMargins)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxStyledTextCtrl_php*)_this)->SetMargins((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, PointFromPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->PointFromPosition((int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxPoint),0);memcpy(ptr,&ret0,sizeof(wxPoint));object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, ScrollToLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->ScrollToLine((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, ScrollToColumn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->ScrollToColumn((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetStyleBitsNeeded)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetStyleBitsNeeded();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, SetStyleBits)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStyledTextCtrl_php*)_this)->SetStyleBits((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStyledTextCtrl, GetStyleBits)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStyledTextCtrl_php*)_this)->GetStyleBits();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxImageList_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxImageList, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxImageList_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxImageList);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxImageList_php*) _this)->evnArray);
			array_init(((wxImageList_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxImageList_php*) _this)->phpObj);
			*((wxImageList_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxImageList_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxImageList_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|b!l!", &_argLong0 , &_argLong1 , &_argBool0 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					_this = new wxImageList_php((int)_argLong0 , (int)_argLong1 , _argBool0 , (int)_argLong2);
					break;
				case 3:
					_this = new wxImageList_php((int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				case 2:
					_this = new wxImageList_php((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxImageList);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxImageList_php*) _this)->evnArray);
			array_init(((wxImageList_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxImageList_php*) _this)->phpObj);
			*((wxImageList_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxImageList_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxImageList_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxImageList, Add)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxImageList_php*)_this)->Add(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxImageList_php*)_this)->Add(*(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret2 =  ((wxImageList_php*)_this)->Add(*(wxBitmap *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret2)			
		}
	}
}
PHP_METHOD(php_wxImageList, GetBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxImageList_php*)_this)->GetBitmap((int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxBitmap),0);memcpy(ptr,&ret0,sizeof(wxBitmap));object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxBitmap));return;			
		}
	}
}
PHP_METHOD(php_wxImageList, GetIcon)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxIcon ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxImageList_php*)_this)->GetIcon((int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxIcon),0);memcpy(ptr,&ret0,sizeof(wxIcon));object_init_ex(return_value,php_wxIcon_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxIcon));return;			
		}
	}
}
PHP_METHOD(php_wxImageList, Replace)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxImageList_php*)_this)->Replace((int)_argLong0 , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!z!", &_argLong0 , &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxImageList_php*)_this)->Replace((int)_argLong0 , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxImageList, Remove)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxImageList_php*)_this)->Remove((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxImageList, RemoveAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxImageList_php*)_this)->RemoveAll();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxImageList, GetImageCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxImageList_php*)_this)->GetImageCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxXmlResource_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxXmlResource, LoadToolBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!", &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxToolBar* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxXmlResource_php*)_this)->LoadToolBar((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxToolBar_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxToolBar));return;			
		}
	}
}
PHP_METHOD(php_wxXmlResource, LoadDialog)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!", &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxDialog* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxXmlResource_php*)_this)->LoadDialog((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxDialog_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxDialog));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!s!", &_argObj0 , &_argObj1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFileDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxXmlResource_php*)_this)->LoadDialog((wxDialog*) _ptrObj0 , (wxWindow*) _ptrObj1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxXmlResource, LoadPanel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!", &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxPanel* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxXmlResource_php*)_this)->LoadPanel((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxPanel_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxPanel));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!s!", &_argObj0 , &_argObj1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxXmlResource_php*)_this)->LoadPanel((wxPanel*) _ptrObj0 , (wxWindow*) _ptrObj1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxXmlResource, LoadFrame)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!", &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxFrame* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxXmlResource_php*)_this)->LoadFrame((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxFrame_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxFrame));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!s!", &_argObj0 , &_argObj1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxSplashScreen))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxXmlResource_php*)_this)->LoadFrame((wxFrame*) _ptrObj0 , (wxWindow*) _ptrObj1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxXmlResource, LoadBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxXmlResource_php*)_this)->LoadBitmap(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxBitmap),0);memcpy(ptr,&ret0,sizeof(wxBitmap));object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxBitmap));return;			
		}
	}
}
PHP_METHOD(php_wxXmlResource, LoadIcon)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxIcon ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxXmlResource_php*)_this)->LoadIcon(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxIcon),0);memcpy(ptr,&ret0,sizeof(wxIcon));object_init_ex(return_value,php_wxIcon_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxIcon));return;			
		}
	}
}
PHP_METHOD(php_wxXmlResource, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxXmlResource_php((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 1:
					_this = new wxXmlResource_php((int)_argLong0);
					break;
				case 0:
					_this = new wxXmlResource_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxXmlResource);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxXmlResource_php*) _this)->evnArray);
			array_init(((wxXmlResource_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxXmlResource_php*) _this)->phpObj);
			*((wxXmlResource_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxXmlResource_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxXmlResource_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!s!", &_argStr0 , &_argStr0_len , &_argLong0 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxXmlResource_php(wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , wxString(_argStr1, wxConvUTF8));
					break;
				case 2:
					_this = new wxXmlResource_php(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 1:
					_this = new wxXmlResource_php(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxXmlResource);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxXmlResource_php*) _this)->evnArray);
			array_init(((wxXmlResource_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxXmlResource_php*) _this)->phpObj);
			*((wxXmlResource_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxXmlResource_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxXmlResource_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxXmlResource, Load)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxXmlResource_php*)_this)->Load(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxXmlResource, Unload)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxXmlResource_php*)_this)->Unload(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxXmlResource, InitAllHandlers)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxXmlResource_php*)_this)->InitAllHandlers();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxXmlResource, ClearHandlers)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxXmlResource_php*)_this)->ClearHandlers();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxXmlResource, LoadMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenu* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxXmlResource_php*)_this)->LoadMenu(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenu_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenu));return;			
		}
	}
}
PHP_METHOD(php_wxXmlResource, LoadMenuBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!", &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxMenuBar* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxXmlResource_php*)_this)->LoadMenuBar((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuBar_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenuBar));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenuBar* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxXmlResource_php*)_this)->LoadMenuBar(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenuBar_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxMenuBar));return;			
		}
	}
}
PHP_METHOD(php_wxXmlResource, GetXRCID)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxXmlResource_php*)_this)->GetXRCID(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 1:
					ret0 =  ((wxXmlResource_php*)_this)->GetXRCID(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxXmlResource, GetDomain)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxChar * ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxXmlResource_php*)_this)->GetDomain();
					break;
				default:
					break;
			}
			RETURN_STRING((char *)wxString(ret0).c_str(),1)			
		}
	}
}
PHP_METHOD(php_wxXmlResource, SetDomain)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxXmlResource_php*)_this)->SetDomain(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxLocale_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxLocale, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxLocale_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxLocale);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxLocale_php*) _this)->evnArray);
			array_init(((wxLocale_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxLocale_php*) _this)->phpObj);
			*((wxLocale_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxLocale_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxLocale_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxLocale_php((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					_this = new wxLocale_php((int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxLocale);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxLocale_php*) _this)->evnArray);
			array_init(((wxLocale_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxLocale_php*) _this)->phpObj);
			*((wxLocale_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxLocale_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxLocale_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxLocale, Init)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxLocale_php*)_this)->Init((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxLocale_php*)_this)->Init((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxLocale_php*)_this)->Init();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxLocale, IsAvailable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxLocale_php*)_this)->IsAvailable((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxLocale, IsLoaded)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxLocale_php*)_this)->IsLoaded(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxLocale, AddCatalogLookupPathPrefix)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxLocale_php*)_this)->AddCatalogLookupPathPrefix(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxLocale, AddCatalog)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxLocale_php*)_this)->AddCatalog(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!l!s!", &_argStr0 , &_argStr0_len , &_argLong0 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxLocale_php*)_this)->AddCatalog(wxString(_argStr0, wxConvUTF8) , (wxLanguage) _argLong0 , wxString(_argStr1, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxLocale, GetName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxLocale_php*)_this)->GetName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxLocale, GetLocale)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			const wxChar * ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxLocale_php*)_this)->GetLocale();
					break;
				default:
					break;
			}
			RETURN_STRING((char *)wxString(ret0).c_str(),1)			
		}
	}
}
PHP_METHOD(php_wxLocale, GetLanguage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxLocale_php*)_this)->GetLanguage();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxLocale, GetCanonicalName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxLocale_php*)_this)->GetCanonicalName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxLocale, GetSystemLanguage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxLocale_php*)_this)->GetSystemLanguage();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxLocale, GetSystemEncoding)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxLocale_php*)_this)->GetSystemEncoding();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxLocale, GetSystemEncodingName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxLocale_php*)_this)->GetSystemEncodingName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
void php_wxTreeCtrlBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTreeCtrlBase, AssignImageList)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTreeCtrlBase_php*)_this)->AssignImageList((wxImageList*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTreeCtrlBase, AppendItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!|l!l!z!", &_argObj0 , &_argStr0 , &_argStr0_len , &_argLong0 , &_argLong1 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxTreeItemId ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret0 =  ((wxTreeCtrlBase_php*)_this)->AppendItem(*(wxTreeItemId *) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1 , (wxTreeItemData*) _ptrObj1);
					break;
				case 4:
					ret0 =  ((wxTreeCtrlBase_php*)_this)->AppendItem(*(wxTreeItemId *) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1);
					break;
				case 3:
					ret0 =  ((wxTreeCtrlBase_php*)_this)->AppendItem(*(wxTreeItemId *) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 2:
					ret0 =  ((wxTreeCtrlBase_php*)_this)->AppendItem(*(wxTreeItemId *) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxTreeItemId),0);memcpy(ptr,&ret0,sizeof(wxTreeItemId));object_init_ex(return_value,php_wxTreeItemId_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxTreeItemId));return;			
		}
	}
}
void php_wxRadioBox_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxRadioBox, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	void *_ptrObj4 = 0;
	zval *_argObj4 = 0;
	int id_to_find4;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!|z!z!l!s!l!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr1 , &_argStr1_len , &_argLong2 , &_argLong3 , &_argObj3 , &_argStr2 , &_argStr2_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 11:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8) , (int)_argLong2 , (long int)_argLong3 , *(wxValidator *) _ptrObj3 , wxString(_argStr2, wxConvUTF8));
					break;
				case 10:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8) , (int)_argLong2 , (long int)_argLong3 , *(wxValidator *) _ptrObj3);
					break;
				case 9:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8) , (int)_argLong2 , (long int)_argLong3);
					break;
				case 8:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8) , (int)_argLong2);
					break;
				case 7:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8));
					break;
				case 6:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1);
					break;
				case 5:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRadioBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRadioBox_php*) _this)->evnArray);
			array_init(((wxRadioBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRadioBox_php*) _this)->phpObj);
			*((wxRadioBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRadioBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRadioBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!z!z!z!|l!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong1 , &_argLong2 , &_argObj4 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj4)
		{
			if (_argObj4->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj4), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find4 = Z_RESVAL_P(*tmp);
				_ptrObj4 = zend_list_find(id_to_find4, &rsrc_type);
				if (!_ptrObj4 )
					valid = 0;
			}
			else if(_argObj4->type==IS_LONG)
				_ptrObj4= (void *)_argObj4->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 10:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (int)_argLong1 , (long int)_argLong2 , *(wxValidator *) _ptrObj4 , wxString(_argStr1, wxConvUTF8));
					break;
				case 9:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (int)_argLong1 , (long int)_argLong2 , *(wxValidator *) _ptrObj4);
					break;
				case 8:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (int)_argLong1 , (long int)_argLong2);
					break;
				case 7:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (int)_argLong1);
					break;
				case 6:
					_this = new wxRadioBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRadioBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRadioBox_php*) _this)->evnArray);
			array_init(((wxRadioBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRadioBox_php*) _this)->phpObj);
			*((wxRadioBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRadioBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRadioBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxRadioBox, Enable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRadioBox_php*)_this)->Enable((unsigned int)_argLong0 , _argBool0);
					break;
				case 1:
					ret0 =  ((wxRadioBox_php*)_this)->Enable((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxRadioBox_php*)_this)->Enable(_argBool0);
					break;
				case 0:
					ret1 =  ((wxRadioBox_php*)_this)->Enable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxRadioBox, GetItemFromPoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRadioBox_php*)_this)->GetItemFromPoint(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRadioBox, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRadioBox_php*)_this)->GetSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRadioBox, GetString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRadioBox_php*)_this)->GetString((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRadioBox, IsItemEnabled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRadioBox_php*)_this)->IsItemEnabled((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRadioBox, IsItemShown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRadioBox_php*)_this)->IsItemShown((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRadioBox, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRadioBox_php*)_this)->SetSelection((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRadioBox, SetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRadioBox_php*)_this)->SetLabel(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRadioBox, SetString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRadioBox_php*)_this)->SetString((unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRadioBox, Show)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRadioBox_php*)_this)->Show((unsigned int)_argLong0 , _argBool0);
					break;
				case 1:
					ret0 =  ((wxRadioBox_php*)_this)->Show((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxRadioBox_php*)_this)->Show(_argBool0);
					break;
				case 0:
					ret1 =  ((wxRadioBox_php*)_this)->Show();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
void php_wxRadioButton_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxRadioButton, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!|z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxRadioButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr1, wxConvUTF8));
					break;
				case 7:
					_this = new wxRadioButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 6:
					_this = new wxRadioButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxRadioButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxRadioButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxRadioButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRadioButton);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRadioButton_php*) _this)->evnArray);
			array_init(((wxRadioButton_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRadioButton_php*) _this)->phpObj);
			*((wxRadioButton_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRadioButton_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRadioButton_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxRadioButton, SetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRadioButton_php*)_this)->SetLabel(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRadioButton, SetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRadioButton_php*)_this)->SetValue(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRadioButton, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRadioButton_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRadioButton, Enable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRadioButton_php*)_this)->Enable(_argBool0);
					break;
				case 0:
					ret0 =  ((wxRadioButton_php*)_this)->Enable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxListItem_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxListItem, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxListItem_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxListItem);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxListItem_php*) _this)->evnArray);
			array_init(((wxListItem_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxListItem_php*) _this)->phpObj);
			*((wxListItem_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxListItem_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxListItem_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxListItem_php(*(wxListItem *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxListItem);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxListItem_php*) _this)->evnArray);
			array_init(((wxListItem_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxListItem_php*) _this)->phpObj);
			*((wxListItem_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxListItem_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxListItem_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxListItem, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxListItem_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListItem, ClearAttributes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxListItem_php*)_this)->ClearAttributes();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListItem, SetMask)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListItem_php*)_this)->SetMask((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListItem, SetId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListItem_php*)_this)->SetId((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListItem, SetColumn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListItem_php*)_this)->SetColumn((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListItem, SetImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListItem_php*)_this)->SetImage((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListItem, SetText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListItem_php*)_this)->SetText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListItem, SetWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListItem_php*)_this)->SetWidth((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListItem, GetId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListItem_php*)_this)->GetId();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListItem, GetColumn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListItem_php*)_this)->GetColumn();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListItem, GetText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListItem_php*)_this)->GetText();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxListItem, GetWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListItem_php*)_this)->GetWidth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxHtmlHelpController_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxHtmlHelpController, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxHtmlHelpController_php((int)_argLong0 , (wxWindow*) _ptrObj0);
					break;
				case 1:
					_this = new wxHtmlHelpController_php((int)_argLong0);
					break;
				case 0:
					_this = new wxHtmlHelpController_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlHelpController);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlHelpController_php*) _this)->evnArray);
			array_init(((wxHtmlHelpController_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlHelpController_php*) _this)->phpObj);
			*((wxHtmlHelpController_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlHelpController_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlHelpController_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxHtmlHelpController, AddBook)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|b!", &_argStr0 , &_argStr0_len , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxHtmlHelpController_php*)_this)->AddBook(wxString(_argStr0, wxConvUTF8) , _argBool0);
					break;
				case 1:
					ret0 =  ((wxHtmlHelpController_php*)_this)->AddBook(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlHelpController, Display)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxHtmlHelpController_php*)_this)->Display(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxHtmlHelpController_php*)_this)->Display((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxHtmlHelpController, DisplayContents)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlHelpController_php*)_this)->DisplayContents();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlHelpController, DisplayIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlHelpController_php*)_this)->DisplayIndex();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlHelpController, SetTempDir)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlHelpController_php*)_this)->SetTempDir(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlHelpController, SetTitleFormat)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlHelpController_php*)_this)->SetTitleFormat(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxTaskBarIcon_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTaskBarIcon, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxTaskBarIcon_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTaskBarIcon);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTaskBarIcon_php*) _this)->evnArray);
			array_init(((wxTaskBarIcon_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTaskBarIcon_php*) _this)->phpObj);
			*((wxTaskBarIcon_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTaskBarIcon_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTaskBarIcon_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxTaskBarIcon, SetIcon)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|s!", &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxTaskBarIcon_php*)_this)->SetIcon(*(wxIcon *) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 1:
					ret0 =  ((wxTaskBarIcon_php*)_this)->SetIcon(*(wxIcon *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTaskBarIcon, IsIconInstalled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTaskBarIcon_php*)_this)->IsIconInstalled();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTaskBarIcon, RemoveIcon)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTaskBarIcon_php*)_this)->RemoveIcon();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTaskBarIcon, PopupMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTaskBarIcon_php*)_this)->PopupMenu((wxMenu*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTaskBarIcon, IsOk)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTaskBarIcon_php*)_this)->IsOk();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxAuiManager_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxAuiManager, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxAuiManager_php((wxWindow*) _ptrObj0 , (unsigned int)_argLong0);
					break;
				case 1:
					_this = new wxAuiManager_php((wxWindow*) _ptrObj0);
					break;
				case 0:
					_this = new wxAuiManager_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiManager);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiManager_php*) _this)->evnArray);
			array_init(((wxAuiManager_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiManager_php*) _this)->phpObj);
			*((wxAuiManager_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiManager_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiManager_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxAuiManager, AddPane)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxAuiManager_php*)_this)->AddPane((wxWindow*) _ptrObj0 , *(wxAuiPaneInfo *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxAuiManager_php*)_this)->AddPane((wxWindow*) _ptrObj0 , *(wxAuiPaneInfo *) _ptrObj1 , *(wxPoint *) _ptrObj2);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret2 =  ((wxAuiManager_php*)_this)->AddPane((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					ret2 =  ((wxAuiManager_php*)_this)->AddPane((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret2 =  ((wxAuiManager_php*)_this)->AddPane((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
PHP_METHOD(php_wxAuiManager, Update)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiManager_php*)_this)->Update();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiManager, DetachPane)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiManager_php*)_this)->DetachPane((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiManager, GetAllPanes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiManager_php*)_this)->GetAllPanes();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiManager, GetArtProvider)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxAuiDockArt* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiManager_php*)_this)->GetArtProvider();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxAuiDockArt_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxAuiDockArt));return;			
		}
	}
}
PHP_METHOD(php_wxAuiManager, GetDockSizeConstraint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiManager_php*)_this)->GetDockSizeConstraint((double*) _ptrObj0 , (double*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiManager, GetFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			unsigned int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiManager_php*)_this)->GetFlags();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiManager, GetManagedWindow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxWindow* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiManager_php*)_this)->GetManagedWindow();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxWindow_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxWindow));return;			
		}
	}
}
PHP_METHOD(php_wxAuiManager, GetManager)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxAuiManager* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiManager_php*)_this)->GetManager((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxAuiManager_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxAuiManager));return;			
		}
	}
}
PHP_METHOD(php_wxAuiManager, GetPane)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiManager_php*)_this)->GetPane((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiManager_php*)_this)->GetPane(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiManager, HideHint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiManager_php*)_this)->HideHint();
					break;
				default:
					break;
			}
			
		}
	}
}
bool wxAuiManager_php::ProcessDockResult(wxAuiPaneInfo& arg0 , const wxAuiPaneInfo& arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "ProcessDockResult", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(const long int) &arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxAuiManager, ProcessDockResult)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxAuiManager_php*)_this)->ProcessDockResult(*(wxAuiPaneInfo *) _ptrObj0 , *(wxAuiPaneInfo *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiManager, SavePaneInfo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiManager_php*)_this)->SavePaneInfo(*(wxAuiPaneInfo *) _ptrObj0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxAuiManager, SavePerspective)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiManager_php*)_this)->SavePerspective();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxAuiManager, SetArtProvider)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxAuiDefaultDockArt))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiManager_php*)_this)->SetArtProvider((wxAuiDockArt*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiManager, SetDockSizeConstraint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiManager_php*)_this)->SetDockSizeConstraint((double)_argLong0 , (double)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiManager, SetFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiManager_php*)_this)->SetFlags((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiManager, SetManagedWindow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiManager_php*)_this)->SetManagedWindow((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiManager, ShowHint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiManager_php*)_this)->ShowHint(*(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiManager, UnInit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiManager_php*)_this)->UnInit();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiManager, InsertPane)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|l!", &_argObj0 , &_argObj1 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxAuiManager_php*)_this)->InsertPane((wxWindow*) _ptrObj0 , *(wxAuiPaneInfo *) _ptrObj1 , (int)_argLong0);
					break;
				case 2:
					ret0 =  ((wxAuiManager_php*)_this)->InsertPane((wxWindow*) _ptrObj0 , *(wxAuiPaneInfo *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiManager, LoadPerspective)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|b!", &_argStr0 , &_argStr0_len , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxAuiManager_php*)_this)->LoadPerspective(wxString(_argStr0, wxConvUTF8) , _argBool0);
					break;
				case 1:
					ret0 =  ((wxAuiManager_php*)_this)->LoadPerspective(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxAuiDockArt_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxAuiDockArt, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxAuiDefaultDockArt))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxAuiDockArt_php(*(wxAuiDockArt *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiDockArt);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiDockArt_php*) _this)->evnArray);
			array_init(((wxAuiDockArt_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiDockArt_php*) _this)->phpObj);
			*((wxAuiDockArt_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiDockArt_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiDockArt_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxAuiDockArt_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiDockArt);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiDockArt_php*) _this)->evnArray);
			array_init(((wxAuiDockArt_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiDockArt_php*) _this)->phpObj);
			*((wxAuiDockArt_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiDockArt_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiDockArt_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void wxAuiDockArt_php::SetFont(int arg0 , const wxFont& arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetFont", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(const long int) &arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiDockArt, SetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiDockArt_php*)_this)->SetFont((int)_argLong0 , *(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiDockArt_php::SetColour(int arg0 , const wxColour& arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetColour", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(const long int) &arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiDockArt, SetColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiDockArt_php*)_this)->SetColour((int)_argLong0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiDockArt, GetColor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiDockArt_php*)_this)->GetColor((int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxAuiDockArt, SetColor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiDockArt_php*)_this)->SetColor((int)_argLong0 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiDockArt_php::DrawBackground(wxDC& arg0 , wxWindow* arg1 , int arg2 , const wxRect& arg3){
	zval *args[4];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawBackground", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(const long int) &arg3);
	args[3]= &argLng3;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 4, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiDockArt, DrawBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!l!z!", &_argObj0 , &_argObj1 , &_argLong0 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxAuiDockArt_php*)_this)->DrawBackground(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , (int)_argLong0 , *(wxRect *) _ptrObj2);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiDockArt_php::DrawBorder(wxDC& arg0 , wxWindow* arg1 , const wxRect& arg2 , wxAuiPaneInfo& arg3){
	zval *args[4];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawBorder", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(long int) &arg3);
	args[3]= &argLng3;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 4, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiDockArt, DrawBorder)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxAuiDockArt_php*)_this)->DrawBorder(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxRect *) _ptrObj2 , *(wxAuiPaneInfo *) _ptrObj3);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiDockArt_php::DrawGripper(wxDC& arg0 , wxWindow* arg1 , const wxRect& arg2 , wxAuiPaneInfo& arg3){
	zval *args[4];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawGripper", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(long int) &arg3);
	args[3]= &argLng3;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 4, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiDockArt, DrawGripper)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxAuiDockArt_php*)_this)->DrawGripper(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxRect *) _ptrObj2 , *(wxAuiPaneInfo *) _ptrObj3);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiDockArt_php::DrawPaneButton(wxDC& arg0 , wxWindow* arg1 , int arg2 , int arg3 , const wxRect& arg4 , wxAuiPaneInfo& arg5){
	zval *args[6];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawPaneButton", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,arg3);
	args[3]= &argLng3;
		zval argLng4;
	ZVAL_LONG(&argLng4,(const long int) &arg4);
	args[4]= &argLng4;
		zval argLng5;
	ZVAL_LONG(&argLng5,(long int) &arg5);
	args[5]= &argLng5;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 6, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiDockArt, DrawPaneButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!l!l!z!z!", &_argObj0 , &_argObj1 , &_argLong0 , &_argLong1 , &_argObj2 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					 ((wxAuiDockArt_php*)_this)->DrawPaneButton(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , (int)_argLong0 , (int)_argLong1 , *(wxRect *) _ptrObj2 , *(wxAuiPaneInfo *) _ptrObj3);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiDockArt_php::DrawSash(wxDC& arg0 , wxWindow* arg1 , int arg2 , const wxRect& arg3){
	zval *args[4];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawSash", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(const long int) &arg3);
	args[3]= &argLng3;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 4, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiDockArt, DrawSash)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!l!z!", &_argObj0 , &_argObj1 , &_argLong0 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxAuiDockArt_php*)_this)->DrawSash(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , (int)_argLong0 , *(wxRect *) _ptrObj2);
					break;
				default:
					break;
			}
			
		}
	}
}
int wxAuiDockArt_php::GetMetric(int arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetMetric", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxAuiDockArt, GetMetric)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiDockArt_php*)_this)->GetMetric((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void wxAuiDockArt_php::SetMetric(int arg0 , int arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetMetric", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiDockArt, SetMetric)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiDockArt_php*)_this)->SetMetric((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiDockArt_php::DrawCaption(wxDC& arg0 , wxWindow* arg1 , const wxString& arg2 , const wxRect& arg3 , wxAuiPaneInfo& arg4){
	zval *args[5];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawCaption", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(const long int) &arg3);
	args[3]= &argLng3;
		zval argLng4;
	ZVAL_LONG(&argLng4,(long int) &arg4);
	args[4]= &argLng4;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 5, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiDockArt, DrawCaption)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!s!z!z!", &_argObj0 , &_argObj1 , &_argStr0 , &_argStr0_len , &_argObj2 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					 ((wxAuiDockArt_php*)_this)->DrawCaption(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , wxString(_argStr0, wxConvUTF8) , *(wxRect *) _ptrObj2 , *(wxAuiPaneInfo *) _ptrObj3);
					break;
				default:
					break;
			}
			
		}
	}
}
wxColour wxAuiDockArt_php::GetColour(int arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetColour", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		wxColour* return_var = (wxColour*) zend_object_store_get_object(&retval TSRMLS_CC);return *return_var;	}
	}
PHP_METHOD(php_wxAuiDockArt, GetColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiDockArt_php*)_this)->GetColour((int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
wxFont wxAuiDockArt_php::GetFont(int arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetFont", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		wxFont* return_var = (wxFont*) zend_object_store_get_object(&retval TSRMLS_CC);return *return_var;	}
	}
PHP_METHOD(php_wxAuiDockArt, GetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxFont ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiDockArt_php*)_this)->GetFont((int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxFont),0);memcpy(ptr,&ret0,sizeof(wxFont));object_init_ex(return_value,php_wxFont_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxFont));return;			
		}
	}
}
void php_wxAuiPaneInfo_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxAuiPaneInfo, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxAuiPaneInfo_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiPaneInfo);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiPaneInfo_php*) _this)->evnArray);
			array_init(((wxAuiPaneInfo_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiPaneInfo_php*) _this)->phpObj);
			*((wxAuiPaneInfo_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiPaneInfo_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiPaneInfo_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxAuiPaneInfo_php(*(wxAuiPaneInfo *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiPaneInfo);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiPaneInfo_php*) _this)->evnArray);
			array_init(((wxAuiPaneInfo_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiPaneInfo_php*) _this)->phpObj);
			*((wxAuiPaneInfo_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiPaneInfo_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiPaneInfo_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, BestSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->BestSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiPaneInfo_php*)_this)->BestSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Bottom)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Bottom();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, BottomDockable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->BottomDockable(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->BottomDockable();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Caption)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Caption(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, CaptionVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->CaptionVisible(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->CaptionVisible();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Centre)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Centre();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, CentrePane)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->CentrePane();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, CloseButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->CloseButton(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->CloseButton();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, DefaultPane)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->DefaultPane();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, DestroyOnClose)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->DestroyOnClose(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->DestroyOnClose();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Direction)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Direction((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Dock)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Dock();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, DockFixed)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->DockFixed(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->DockFixed();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Dockable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Dockable(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Dockable();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Fixed)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Fixed();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Float)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Float();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Floatable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Floatable(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Floatable();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, FloatingPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->FloatingPosition(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiPaneInfo_php*)_this)->FloatingPosition((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, FloatingSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->FloatingSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiPaneInfo_php*)_this)->FloatingSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Gripper)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Gripper(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Gripper();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, GripperTop)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->GripperTop(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->GripperTop();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, HasBorder)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->HasBorder();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, HasCaption)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->HasCaption();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, HasCloseButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->HasCloseButton();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, HasFlag)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->HasFlag((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, HasGripper)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->HasGripper();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, HasGripperTop)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->HasGripperTop();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, HasMaximizeButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->HasMaximizeButton();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, HasMinimizeButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->HasMinimizeButton();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, HasPinButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->HasPinButton();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Hide)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Hide();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsBottomDockable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsBottomDockable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsDocked)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsDocked();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsFixed)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsFixed();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsFloatable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsFloatable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsFloating)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsFloating();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsLeftDockable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsLeftDockable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsMovable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsMovable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsOk)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsOk();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsResizable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsResizable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsRightDockable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsRightDockable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsShown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsShown();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsToolbar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsToolbar();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsTopDockable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsTopDockable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Layer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Layer((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Left)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Left();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, LeftDockable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->LeftDockable(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->LeftDockable();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, MaxSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->MaxSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiPaneInfo_php*)_this)->MaxSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Maximize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Maximize();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, MaximizeButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->MaximizeButton(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->MaximizeButton();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, MinSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->MinSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiPaneInfo_php*)_this)->MinSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, MinimizeButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->MinimizeButton(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->MinimizeButton();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Movable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Movable(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Movable();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Name)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Name(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, PaneBorder)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->PaneBorder(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->PaneBorder();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, PinButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->PinButton(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->PinButton();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Position)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Position((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Resizable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Resizable(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Resizable();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Right)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Right();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, RightDockable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->RightDockable(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->RightDockable();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Row)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Row((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, SetFlag)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiPaneInfo_php*)_this)->SetFlag((unsigned int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Show)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Show(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Show();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, ToolbarPane)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->ToolbarPane();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Top)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Top();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, TopDockable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->TopDockable(_argBool0);
					break;
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->TopDockable();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Window)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiPaneInfo_php*)_this)->Window((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Center)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Center();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, CenterPane)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->CenterPane();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, IsMaximized)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiPaneInfo_php*)_this)->IsMaximized();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiPaneInfo, Restore)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiPaneInfo_php*)_this)->Restore();
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxAuiNotebook_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxAuiNotebook, AddPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!|b!z!", &_argObj0 , &_argStr0 , &_argStr0_len , &_argBool0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxAuiNotebook_php*)_this)->AddPage((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0 , *(wxBitmap *) _ptrObj1);
					break;
				case 3:
					ret0 =  ((wxAuiNotebook_php*)_this)->AddPage((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0);
					break;
				case 2:
					ret0 =  ((wxAuiNotebook_php*)_this)->AddPage((wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, AdvanceSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiNotebook_php*)_this)->AdvanceSelection(_argBool0);
					break;
				case 0:
					 ((wxAuiNotebook_php*)_this)->AdvanceSelection();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, DeletePage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiNotebook_php*)_this)->DeletePage((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, GetArtProvider)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxAuiTabArt* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiNotebook_php*)_this)->GetArtProvider();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxAuiTabArt_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxAuiTabArt));return;			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, GetHeightForPageHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiNotebook_php*)_this)->GetHeightForPageHeight((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, GetPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxWindow* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiNotebook_php*)_this)->GetPage((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxWindow_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxWindow));return;			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, GetPageBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiNotebook_php*)_this)->GetPageBitmap((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxBitmap),0);memcpy(ptr,&ret0,sizeof(wxBitmap));object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxBitmap));return;			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, GetPageCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiNotebook_php*)_this)->GetPageCount();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, GetPageIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiNotebook_php*)_this)->GetPageIndex((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, GetPageText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiNotebook_php*)_this)->GetPageText((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiNotebook_php*)_this)->GetSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, GetTabCtrlHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiNotebook_php*)_this)->GetTabCtrlHeight();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, InsertPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!s!|b!z!", &_argLong0 , &_argObj0 , &_argStr0 , &_argStr0_len , &_argBool0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret0 =  ((wxAuiNotebook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0 , *(wxBitmap *) _ptrObj1);
					break;
				case 4:
					ret0 =  ((wxAuiNotebook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0);
					break;
				case 3:
					ret0 =  ((wxAuiNotebook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, RemovePage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiNotebook_php*)_this)->RemovePage((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, SetArtProvider)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiNotebook_php*)_this)->SetArtProvider((wxAuiTabArt*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, SetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiNotebook_php*)_this)->SetFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, SetMeasuringFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiNotebook_php*)_this)->SetMeasuringFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, SetNormalFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiNotebook_php*)_this)->SetNormalFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, SetPageBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxAuiNotebook_php*)_this)->SetPageBitmap((long unsigned int)_argLong0 , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, SetPageText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxAuiNotebook_php*)_this)->SetPageText((long unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, SetSelectedFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiNotebook_php*)_this)->SetSelectedFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiNotebook_php*)_this)->SetSelection((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, SetTabCtrlHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiNotebook_php*)_this)->SetTabCtrlHeight((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, SetUniformBitmapSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiNotebook_php*)_this)->SetUniformBitmapSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, ShowWindowMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiNotebook_php*)_this)->ShowWindowMenu();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiNotebook, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					_this = new wxAuiNotebook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxAuiNotebook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxAuiNotebook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxAuiNotebook_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxAuiNotebook_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiNotebook);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiNotebook_php*) _this)->evnArray);
			array_init(((wxAuiNotebook_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiNotebook_php*) _this)->phpObj);
			*((wxAuiNotebook_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiNotebook_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiNotebook_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxAuiNotebook_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiNotebook);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiNotebook_php*) _this)->evnArray);
			array_init(((wxAuiNotebook_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiNotebook_php*) _this)->phpObj);
			*((wxAuiNotebook_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiNotebook_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiNotebook_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxAuiDefaultDockArt_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxAuiDefaultDockArt, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxAuiDefaultDockArt_php(*(wxAuiDefaultDockArt *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiDefaultDockArt);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiDefaultDockArt_php*) _this)->evnArray);
			array_init(((wxAuiDefaultDockArt_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiDefaultDockArt_php*) _this)->phpObj);
			*((wxAuiDefaultDockArt_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiDefaultDockArt_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiDefaultDockArt_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxAuiDefaultDockArt_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiDefaultDockArt);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiDefaultDockArt_php*) _this)->evnArray);
			array_init(((wxAuiDefaultDockArt_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiDefaultDockArt_php*) _this)->phpObj);
			*((wxAuiDefaultDockArt_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiDefaultDockArt_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiDefaultDockArt_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxAuiMDIParentFrame_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
void php_wxAuiTabArt_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxAuiTabArt, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxAuiTabArt_php(*(wxAuiTabArt *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiTabArt);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiTabArt_php*) _this)->evnArray);
			array_init(((wxAuiTabArt_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiTabArt_php*) _this)->phpObj);
			*((wxAuiTabArt_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiTabArt_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiTabArt_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxAuiTabArt_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiTabArt);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiTabArt_php*) _this)->evnArray);
			array_init(((wxAuiTabArt_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiTabArt_php*) _this)->phpObj);
			*((wxAuiTabArt_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiTabArt_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiTabArt_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void wxAuiTabArt_php::DrawBackground(wxDC& arg0 , wxWindow* arg1 , const wxRect& arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawBackground", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiTabArt, DrawBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxAuiTabArt_php*)_this)->DrawBackground(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxRect *) _ptrObj2);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiTabArt_php::DrawButton(wxDC& arg0 , wxWindow* arg1 , const wxRect& arg2 , int arg3 , int arg4 , int arg5 , wxRect* arg6){
	zval *args[7];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawButton", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,arg3);
	args[3]= &argLng3;
		zval argLng4;
	ZVAL_LONG(&argLng4,arg4);
	args[4]= &argLng4;
		zval argLng5;
	ZVAL_LONG(&argLng5,arg5);
	args[5]= &argLng5;
		zval argLng6;
	ZVAL_LONG(&argLng6,(long int) arg6);
	args[6]= &argLng6;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 7, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiTabArt, DrawButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!l!l!l!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argLong0 , &_argLong1 , &_argLong2 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					 ((wxAuiTabArt_php*)_this)->DrawButton(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxRect *) _ptrObj2 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (wxRect*) _ptrObj3);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiTabArt_php::DrawTab(wxDC& arg0 , wxWindow* arg1 , const wxAuiNotebookPage& arg2 , const wxRect& arg3 , int arg4 , wxRect* arg5 , wxRect* arg6 , int* arg7){
	zval *args[8];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawTab", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(const long int) &arg3);
	args[3]= &argLng3;
		zval argLng4;
	ZVAL_LONG(&argLng4,arg4);
	args[4]= &argLng4;
		zval argLng5;
	ZVAL_LONG(&argLng5,(long int) arg5);
	args[5]= &argLng5;
		zval argLng6;
	ZVAL_LONG(&argLng6,(long int) arg6);
	args[6]= &argLng6;
		zval argLng7;
	ZVAL_LONG(&argLng7,(long int) arg7);
	args[7]= &argLng7;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 8, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiTabArt, DrawTab)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	void *_ptrObj4 = 0;
	zval *_argObj4 = 0;
	int id_to_find4;
	void *_ptrObj5 = 0;
	zval *_argObj5 = 0;
	int id_to_find5;
	void *_ptrObj6 = 0;
	zval *_argObj6 = 0;
	int id_to_find6;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!z!l!z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong0 , &_argObj4 , &_argObj5 , &_argObj6 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj4)
		if (valid) 
		{
			if(_argObj4->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj4), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find4 = Z_RESVAL_P(*tmp);
				_ptrObj4 = zend_list_find(id_to_find4, &rsrc_type);
				if (!_ptrObj4 )
					valid = 0;
			}
			else if(_argObj4->type==IS_LONG)
				_ptrObj4= (void *)_argObj4->value.lval;
			else if(_argObj4->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj5)
		if (valid) 
		{
			if(_argObj5->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj5), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find5 = Z_RESVAL_P(*tmp);
				_ptrObj5 = zend_list_find(id_to_find5, &rsrc_type);
				if (!_ptrObj5 )
					valid = 0;
			}
			else if(_argObj5->type==IS_LONG)
				_ptrObj5= (void *)_argObj5->value.lval;
			else if(_argObj5->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj6)
		if (valid) 
		{
			if(_argObj6->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj6), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find6 = Z_RESVAL_P(*tmp);
				_ptrObj6 = zend_list_find(id_to_find6, &rsrc_type);
				if (!_ptrObj6 )
					valid = 0;
			}
			else if(_argObj6->type==IS_LONG)
				_ptrObj6= (void *)_argObj6->value.lval;
			else if(_argObj6->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					 ((wxAuiTabArt_php*)_this)->DrawTab(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxAuiNotebookPage *) _ptrObj2 , *(wxRect *) _ptrObj3 , (int)_argLong0 , (wxRect*) _ptrObj4 , (wxRect*) _ptrObj5 , (int*) _ptrObj6);
					break;
				default:
					break;
			}
			
		}
	}
}
int wxAuiTabArt_php::GetBestTabCtrlSize(wxWindow* arg0 , const wxAuiNotebookPageArray& arg1 , const wxSize& arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetBestTabCtrlSize", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(const long int) &arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxAuiTabArt, GetBestTabCtrlSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxAuiTabArt_php*)_this)->GetBestTabCtrlSize((wxWindow*) _ptrObj0 , *(wxAuiNotebookPageArray *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
int wxAuiTabArt_php::GetIndentSize(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetIndentSize", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxAuiTabArt, GetIndentSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiTabArt_php*)_this)->GetIndentSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
wxSize wxAuiTabArt_php::GetTabSize(wxDC& arg0 , wxWindow* arg1 , const wxString& arg2 , const wxBitmap& arg3 , bool arg4 , int arg5 , int* arg6){
	zval *args[7];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetTabSize", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(const long int) &arg3);
	args[3]= &argLng3;
		zval argLng4;
	ZVAL_LONG(&argLng4,arg4);
	args[4]= &argLng4;
		zval argLng5;
	ZVAL_LONG(&argLng5,arg5);
	args[5]= &argLng5;
		zval argLng6;
	ZVAL_LONG(&argLng6,(long int) arg6);
	args[6]= &argLng6;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 7, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		wxSize* return_var = (wxSize*) zend_object_store_get_object(&retval TSRMLS_CC);return *return_var;	}
	}
PHP_METHOD(php_wxAuiTabArt, GetTabSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!s!z!b!l!z!", &_argObj0 , &_argObj1 , &_argStr0 , &_argStr0_len , &_argObj2 , &_argBool0 , &_argLong0 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					ret0 =  ((wxAuiTabArt_php*)_this)->GetTabSize(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj2 , _argBool0 , (int)_argLong0 , (int*) _ptrObj3);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
void wxAuiTabArt_php::SetFlags(unsigned int arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetFlags", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiTabArt, SetFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiTabArt_php*)_this)->SetFlags((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiTabArt_php::SetMeasuringFont(const wxFont& arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetMeasuringFont", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(const long int) &arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiTabArt, SetMeasuringFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiTabArt_php*)_this)->SetMeasuringFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiTabArt_php::SetNormalFont(const wxFont& arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetNormalFont", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(const long int) &arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiTabArt, SetNormalFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiTabArt_php*)_this)->SetNormalFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiTabArt_php::SetSelectedFont(const wxFont& arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetSelectedFont", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(const long int) &arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiTabArt, SetSelectedFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiTabArt_php*)_this)->SetSelectedFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiTabArt_php::SetSizingInfo(const wxSize& arg0 , long unsigned int arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetSizingInfo", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(const long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiTabArt, SetSizingInfo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiTabArt_php*)_this)->SetSizingInfo(*(wxSize *) _ptrObj0 , (long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
int wxAuiTabArt_php::ShowDropDown(wxWindow* arg0 , const wxAuiNotebookPageArray& arg1 , int arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "ShowDropDown", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(const long int) &arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxAuiTabArt, ShowDropDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!l!", &_argObj0 , &_argObj1 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxAuiTabArt_php*)_this)->ShowDropDown((wxWindow*) _ptrObj0 , *(wxAuiNotebookPageArray *) _ptrObj1 , (int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
wxAuiTabArt* wxAuiTabArt_php::Clone(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Clone", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return (wxAuiTabArt*) zend_object_store_get_object(&retval TSRMLS_CC);	}
	}
PHP_METHOD(php_wxAuiTabArt, Clone)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxAuiTabArt* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiTabArt_php*)_this)->Clone();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxAuiTabArt_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxAuiTabArt));return;			
		}
	}
}
void php_wxGDIObject_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGDIObject, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxGDIObject_php(*(wxGDIObject *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGDIObject);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGDIObject_php*) _this)->evnArray);
			array_init(((wxGDIObject_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGDIObject_php*) _this)->phpObj);
			*((wxGDIObject_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGDIObject_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGDIObject_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxGDIObject_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGDIObject);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGDIObject_php*) _this)->evnArray);
			array_init(((wxGDIObject_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGDIObject_php*) _this)->phpObj);
			*((wxGDIObject_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGDIObject_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGDIObject_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxChoicebook_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxChoicebook, ChangeSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxChoicebook_php*)_this)->ChangeSelection((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxChoicebook, DeleteAllPages)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxChoicebook_php*)_this)->DeleteAllPages();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxChoicebook, GetPageText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxChoicebook_php*)_this)->GetPageText((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxChoicebook_php*)_this)->GetPageText((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret1.size()+1));strcpy ( ro2, (const char *) ret1.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxChoicebook, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxChoicebook_php*)_this)->GetSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxChoicebook, GetPageImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxChoicebook_php*)_this)->GetPageImage((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxChoicebook, InsertPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!s!|b!l!", &_argLong0 , &_argObj0 , &_argStr0 , &_argStr0_len , &_argBool0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret0 =  ((wxChoicebook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0 , (int)_argLong1);
					break;
				case 4:
					ret0 =  ((wxChoicebook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0);
					break;
				case 3:
					ret0 =  ((wxChoicebook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxChoicebook, SetImageList)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxChoicebook_php*)_this)->SetImageList((wxImageList*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxChoicebook, SetPageImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxChoicebook_php*)_this)->SetPageImage((long unsigned int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxChoicebook, SetPageText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxChoicebook_php*)_this)->SetPageText((long unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxChoicebook_php*)_this)->SetPageText((unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxChoicebook, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxChoicebook_php*)_this)->SetSelection((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxChoicebook_php*)_this)->SetSelection((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret1)			
		}
	}
}
PHP_METHOD(php_wxChoicebook, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxChoicebook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxChoicebook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxChoicebook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxChoicebook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxChoicebook_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxChoicebook);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxChoicebook_php*) _this)->evnArray);
			array_init(((wxChoicebook_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxChoicebook_php*) _this)->phpObj);
			*((wxChoicebook_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxChoicebook_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxChoicebook_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void wxChoicebook_php::UpdateSelectedPage(long unsigned int arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "UpdateSelectedPage", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxChoicebook, UpdateSelectedPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxChoicebook_php*)_this)->UpdateSelectedPage((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxGrid_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGrid, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxGrid_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxGrid_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxGrid_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxGrid_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxGrid_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGrid);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGrid_php*) _this)->evnArray);
			array_init(((wxGrid_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGrid_php*) _this)->phpObj);
			*((wxGrid_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGrid_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGrid_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!|l!l!l!s!", &_argObj0 , &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argLong4 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxGrid_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (long int)_argLong4 , wxString(_argStr0, wxConvUTF8));
					break;
				case 6:
					_this = new wxGrid_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (long int)_argLong4);
					break;
				case 5:
					_this = new wxGrid_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				case 4:
					_this = new wxGrid_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					_this = new wxGrid_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGrid);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGrid_php*) _this)->evnArray);
			array_init(((wxGrid_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGrid_php*) _this)->phpObj);
			*((wxGrid_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGrid_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGrid_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxGrid, YToRow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->YToRow((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, YToEdgeOfRow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->YToEdgeOfRow((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, XToEdgeOfCol)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->XToEdgeOfCol((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, XToCol)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->XToCol((int)_argLong0 , _argBool0);
					break;
				case 1:
					ret0 =  ((wxGrid_php*)_this)->XToCol((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, UpdateDimensions)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->UpdateDimensions();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, StringToLines)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!z!", &_argStr0 , &_argStr0_len , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->StringToLines(wxString(_argStr0, wxConvUTF8) , *(wxArrayString *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, ShowCellEditControl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->ShowCellEditControl();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetSelectionForeground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetSelectionForeground(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetSelectionBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetSelectionBackground(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetScrollY)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetScrollY((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetScrollX)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetScrollX((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetScrollLineY)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetScrollLineY((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetScrollLineX)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetScrollLineX((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetRowSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetRowSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetRowMinimalHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetRowMinimalHeight((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetRowMinimalAcceptableHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetRowMinimalAcceptableHeight((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetRowLabelValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetRowLabelValue((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetRowLabelSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetRowLabelSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetRowLabelAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetRowLabelAlignment((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetRowHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetRowHeight((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetReadOnly)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|b!", &_argLong0 , &_argLong1 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGrid_php*)_this)->SetReadOnly((int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				case 2:
					 ((wxGrid_php*)_this)->SetReadOnly((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
int wxGrid_php::SetOrCalcRowSizes(bool arg0 , bool arg1=true){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetOrCalcRowSizes", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxGrid, SetOrCalcRowSizes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	bool _argBool1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!|b!", &_argBool0 , &_argBool1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->SetOrCalcRowSizes(_argBool0 , _argBool1);
					break;
				case 1:
					ret0 =  ((wxGrid_php*)_this)->SetOrCalcRowSizes(_argBool0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
int wxGrid_php::SetOrCalcColumnSizes(bool arg0 , bool arg1=true){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetOrCalcColumnSizes", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxGrid, SetOrCalcColumnSizes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	bool _argBool1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!|b!", &_argBool0 , &_argBool1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->SetOrCalcColumnSizes(_argBool0 , _argBool1);
					break;
				case 1:
					ret0 =  ((wxGrid_php*)_this)->SetOrCalcColumnSizes(_argBool0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
bool wxGrid_php::SetModelValues(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetModelValues", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxGrid, SetModelValues)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->SetModelValues();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, SetMargins)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetMargins((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetLabelValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!l!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGrid_php*)_this)->SetLabelValue((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetLabelTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetLabelTextColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetLabelSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetLabelSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetLabelBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetLabelBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetLabelAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetLabelAlignment((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetGridLineColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetGridLineColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetGridCursor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetGridCursor((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetEditable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetEditable(_argBool0);
					break;
				case 0:
					 ((wxGrid_php*)_this)->SetEditable();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetEditInPlace)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetEditInPlace(_argBool0);
					break;
				case 0:
					 ((wxGrid_php*)_this)->SetEditInPlace();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetDividerPen)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetDividerPen(*(wxPen *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetDefaultRowSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetDefaultRowSize((int)_argLong0 , _argBool0);
					break;
				case 1:
					 ((wxGrid_php*)_this)->SetDefaultRowSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetDefaultColSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetDefaultColSize((int)_argLong0 , _argBool0);
					break;
				case 1:
					 ((wxGrid_php*)_this)->SetDefaultColSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetDefaultCellTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetDefaultCellTextColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetDefaultCellOverflow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetDefaultCellOverflow(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetDefaultCellBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetDefaultCellBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetDefaultCellAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetDefaultCellAlignment((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxGrid_php::SetCurrentCell(int arg0 , int arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetCurrentCell", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxGrid, SetCurrentCell)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetCurrentCell((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetColumnWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetColumnWidth((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetColSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetColSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetColPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetColPos((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetColMinimalWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetColMinimalWidth((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetColMinimalAcceptableWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetColMinimalAcceptableWidth((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetColLabelValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetColLabelValue((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetColLabelTextOrientation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetColLabelTextOrientation((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetColLabelSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetColLabelSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetColLabelAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetColLabelAlignment((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetColFormatNumber)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetColFormatNumber((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, AppendCols)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->AppendCols((int)_argLong0 , _argBool0);
					break;
				case 1:
					ret0 =  ((wxGrid_php*)_this)->AppendCols((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGrid_php*)_this)->AppendCols();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, AppendRows)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->AppendRows((int)_argLong0 , _argBool0);
					break;
				case 1:
					ret0 =  ((wxGrid_php*)_this)->AppendRows((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGrid_php*)_this)->AppendRows();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, AutoSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->AutoSize();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, AutoSizeColLabelSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->AutoSizeColLabelSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxGrid_php::AutoSizeColOrRow(int arg0 , bool arg1 , bool arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "AutoSizeColOrRow", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxGrid, AutoSizeColOrRow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	bool _argBool1;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!b!", &_argLong0 , &_argBool0 , &_argBool1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGrid_php*)_this)->AutoSizeColOrRow((int)_argLong0 , _argBool0 , _argBool1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, AutoSizeColumn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->AutoSizeColumn((int)_argLong0 , _argBool0);
					break;
				case 1:
					 ((wxGrid_php*)_this)->AutoSizeColumn((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, AutoSizeColumns)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->AutoSizeColumns(_argBool0);
					break;
				case 0:
					 ((wxGrid_php*)_this)->AutoSizeColumns();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, AutoSizeRow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->AutoSizeRow((int)_argLong0 , _argBool0);
					break;
				case 1:
					 ((wxGrid_php*)_this)->AutoSizeRow((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, AutoSizeRowLabelSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->AutoSizeRowLabelSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, AutoSizeRows)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->AutoSizeRows(_argBool0);
					break;
				case 0:
					 ((wxGrid_php*)_this)->AutoSizeRows();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, ClearGrid)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->ClearGrid();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, ClearSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->ClearSelection();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, DeleteCols)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!b!", &_argLong0 , &_argLong1 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxGrid_php*)_this)->DeleteCols((int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				case 2:
					ret0 =  ((wxGrid_php*)_this)->DeleteCols((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxGrid_php*)_this)->DeleteCols((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGrid_php*)_this)->DeleteCols();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, DeleteRows)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!b!", &_argLong0 , &_argLong1 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxGrid_php*)_this)->DeleteRows((int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				case 2:
					ret0 =  ((wxGrid_php*)_this)->DeleteRows((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxGrid_php*)_this)->DeleteRows((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGrid_php*)_this)->DeleteRows();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, DeselectCell)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->DeselectCell((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, DeselectCol)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->DeselectCol((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, DeselectRow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->DeselectRow((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, DisableCellEditControl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->DisableCellEditControl();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, DisableDragCell)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->DisableDragCell();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, DisableDragColMove)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->DisableDragColMove();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, DisableDragColSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->DisableDragColSize();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, DisableDragGridSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->DisableDragGridSize();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, DisableDragRowSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->DisableDragRowSize();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, EnableCellEditControl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->EnableCellEditControl(_argBool0);
					break;
				case 0:
					 ((wxGrid_php*)_this)->EnableCellEditControl();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, EnableDragCell)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->EnableDragCell(_argBool0);
					break;
				case 0:
					 ((wxGrid_php*)_this)->EnableDragCell();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, EnableDragColMove)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->EnableDragColMove(_argBool0);
					break;
				case 0:
					 ((wxGrid_php*)_this)->EnableDragColMove();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, EnableDragColSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->EnableDragColSize(_argBool0);
					break;
				case 0:
					 ((wxGrid_php*)_this)->EnableDragColSize();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, EnableDragGridSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->EnableDragGridSize(_argBool0);
					break;
				case 0:
					 ((wxGrid_php*)_this)->EnableDragGridSize();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, EnableDragRowSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->EnableDragRowSize(_argBool0);
					break;
				case 0:
					 ((wxGrid_php*)_this)->EnableDragRowSize();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, EnableEditing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->EnableEditing(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, EnableGridLines)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->EnableGridLines(_argBool0);
					break;
				case 0:
					 ((wxGrid_php*)_this)->EnableGridLines();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, EndBatch)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->EndBatch();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, Fit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->Fit();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, ForceRefresh)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->ForceRefresh();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, GetBatchCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->GetBatchCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, GetCellBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->GetCellBackgroundColour((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxGrid, GetCellHighlightColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->GetCellHighlightColour();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxGrid, GetCellTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->GetCellTextColour((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxGrid, GetCellValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->GetCellValue((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxGrid, GetColAt)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->GetColAt((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, SetColFormatFloat)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGrid_php*)_this)->SetColFormatFloat((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					 ((wxGrid_php*)_this)->SetColFormatFloat((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					 ((wxGrid_php*)_this)->SetColFormatFloat((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetCellValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGrid_php*)_this)->SetCellValue((int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, CreateGrid)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|zl!", &_argLong0 , &_argLong1 , &_argObj0 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxGrid_php*)_this)->CreateGrid((int)_argLong0 , (int)_argLong1 , (wxGrid::wxGridSelectionModes) _argLong2);
					break;
				case 3:
					ret0 =  ((wxGrid_php*)_this)->CreateGrid((int)_argLong0 , (int)_argLong1 , (wxGrid::wxGridSelectionModes) _argLong2);
					break;
				case 2:
					ret0 =  ((wxGrid_php*)_this)->CreateGrid((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, BeginBatch)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->BeginBatch();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, BlockToDeviceRect)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxRect ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->BlockToDeviceRect(*(wxGridCellCoords *) _ptrObj0 , *(wxGridCellCoords *) _ptrObj1);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxRect),0);memcpy(ptr,&ret0,sizeof(wxRect));object_init_ex(return_value,php_wxRect_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRect));return;			
		}
	}
}
void wxGrid_php::CacheAttr(int arg0 , int arg1 , wxGridCellAttr* arg2) const{
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "CacheAttr", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(long int) arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxGrid, CacheAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!", &_argLong0 , &_argLong1 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGrid_php*)_this)->CacheAttr((int)_argLong0 , (int)_argLong1 , (wxGridCellAttr*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
bool wxGrid_php::CanHaveAttributes(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "CanHaveAttributes", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxGrid, CanHaveAttributes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->CanHaveAttributes();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, CanEnableCellControl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->CanEnableCellControl();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, CanDragGridSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->CanDragGridSize();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, CanDragColMove)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->CanDragColMove();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, CanDragColSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->CanDragColSize();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, CanDragRowSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->CanDragRowSize();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, GetCellAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!z!", &_argLong0 , &_argLong1 , &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxGrid_php*)_this)->GetCellAlignment((int)_argLong0 , (int)_argLong1 , (int*) _ptrObj0 , (int*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, GetCellEditor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxGridCellEditor* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->GetCellEditor((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGridCellEditor_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGridCellEditor));return;			
		}
	}
}
PHP_METHOD(php_wxGrid, GetCellFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxFont ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->GetCellFont((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxFont),0);memcpy(ptr,&ret0,sizeof(wxFont));object_init_ex(return_value,php_wxFont_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxFont));return;			
		}
	}
}
PHP_METHOD(php_wxGrid, GetLabelFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxFont ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->GetLabelFont();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxFont),0);memcpy(ptr,&ret0,sizeof(wxFont));object_init_ex(return_value,php_wxFont_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxFont));return;			
		}
	}
}
PHP_METHOD(php_wxGrid, GetLabelTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->GetLabelTextColour();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxGrid, HideCellEditControl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->HideCellEditControl();
					break;
				default:
					break;
			}
			
		}
	}
}
void wxGrid_php::InitColWidths(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "InitColWidths", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxGrid, InitColWidths)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->InitColWidths();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, GetViewWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->GetViewWidth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, GetTable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxGridTableBase* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->GetTable();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGridTableBase_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGridTableBase));return;			
		}
	}
}
void wxGrid_php::InitRowHeights(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "InitRowHeights", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxGrid, InitRowHeights)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->InitRowHeights();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, InsertCols)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!b!", &_argLong0 , &_argLong1 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxGrid_php*)_this)->InsertCols((int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				case 2:
					ret0 =  ((wxGrid_php*)_this)->InsertCols((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxGrid_php*)_this)->InsertCols((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGrid_php*)_this)->InsertCols();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, InsertRows)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!b!", &_argLong0 , &_argLong1 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxGrid_php*)_this)->InsertRows((int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				case 2:
					ret0 =  ((wxGrid_php*)_this)->InsertRows((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxGrid_php*)_this)->InsertRows((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGrid_php*)_this)->InsertRows();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, IsCellEditControlEnabled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->IsCellEditControlEnabled();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, IsEditable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->IsEditable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, IsCurrentCellReadOnly)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->IsCurrentCellReadOnly();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, IsInSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->IsInSelection((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxGrid_php*)_this)->IsInSelection(*(wxGridCellCoords *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxGrid, IsReadOnly)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGrid_php*)_this)->IsReadOnly((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, IsSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->IsSelection();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, IsVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|b!", &_argLong0 , &_argLong1 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxGrid_php*)_this)->IsVisible((int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				case 2:
					ret0 =  ((wxGrid_php*)_this)->IsVisible((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, MakeCellVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->MakeCellVisible((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, MoveCursorDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->MoveCursorDown(_argBool0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, MoveCursorLeft)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->MoveCursorLeft(_argBool0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, MoveCursorDownBlock)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->MoveCursorDownBlock(_argBool0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, MoveCursorLeftBlock)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->MoveCursorLeftBlock(_argBool0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, MoveCursorRight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->MoveCursorRight(_argBool0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, MoveCursorRightBlock)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->MoveCursorRightBlock(_argBool0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, MoveCursorUp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->MoveCursorUp(_argBool0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, MoveCursorUpBlock)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGrid_php*)_this)->MoveCursorUpBlock(_argBool0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, MovePageDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->MovePageDown();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, MovePageUp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGrid_php*)_this)->MovePageUp();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGrid, SetRowAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SetRowAttr((int)_argLong0 , (wxGridCellAttr*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetLabelFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetLabelFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetDefaultRenderer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetDefaultRenderer((wxGridCellRenderer*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetDefaultEditor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxGridCellFloatEditor && rsrc_type != le_wxGridCellBoolEditor && rsrc_type != le_wxGridCellChoiceEditor && rsrc_type != le_wxGridCellNumberEditor && rsrc_type != le_wxGridCellTextEditor))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetDefaultEditor((wxGridCellEditor*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetDefaultCellFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetDefaultCellFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SelectAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGrid_php*)_this)->SelectAll();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SelectBlock)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!|b!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					 ((wxGrid_php*)_this)->SelectBlock((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , _argBool0);
					break;
				case 4:
					 ((wxGrid_php*)_this)->SelectBlock((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|b!", &_argObj0 , &_argObj1 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGrid_php*)_this)->SelectBlock(*(wxGridCellCoords *) _ptrObj0 , *(wxGridCellCoords *) _ptrObj1 , _argBool0);
					break;
				case 2:
					 ((wxGrid_php*)_this)->SelectBlock(*(wxGridCellCoords *) _ptrObj0 , *(wxGridCellCoords *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SelectCol)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SelectCol((int)_argLong0 , _argBool0);
					break;
				case 1:
					 ((wxGrid_php*)_this)->SelectCol((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SelectRow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGrid_php*)_this)->SelectRow((int)_argLong0 , _argBool0);
					break;
				case 1:
					 ((wxGrid_php*)_this)->SelectRow((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetCellAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxGrid_php*)_this)->SetCellAlignment((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGrid_php*)_this)->SetCellAlignment((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetCellAlignment((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetCellBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!", &_argLong0 , &_argLong1 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGrid_php*)_this)->SetCellBackgroundColour((int)_argLong0 , (int)_argLong1 , *(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGrid_php*)_this)->SetCellBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!", &_argObj0 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGrid_php*)_this)->SetCellBackgroundColour(*(wxColour *) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGrid, SetCellEditor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!", &_argLong0 , &_argLong1 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxGridCellFloatEditor && rsrc_type != le_wxGridCellBoolEditor && rsrc_type != le_wxGridCellChoiceEditor && rsrc_type != le_wxGridCellNumberEditor && rsrc_type != le_wxGridCellTextEditor))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGrid_php*)_this)->SetCellEditor((int)_argLong0 , (int)_argLong1 , (wxGridCellEditor*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxHyperlinkCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxHyperlinkCtrl, GetHoverColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHyperlinkCtrl_php*)_this)->GetHoverColour();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxHyperlinkCtrl, SetHoverColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHyperlinkCtrl_php*)_this)->SetHoverColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHyperlinkCtrl, GetNormalColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHyperlinkCtrl_php*)_this)->GetNormalColour();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxHyperlinkCtrl, SetNormalColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHyperlinkCtrl_php*)_this)->SetNormalColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHyperlinkCtrl, GetVisitedColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHyperlinkCtrl_php*)_this)->GetVisitedColour();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxHyperlinkCtrl, SetVisited)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHyperlinkCtrl_php*)_this)->SetVisited(_argBool0);
					break;
				case 0:
					 ((wxHyperlinkCtrl_php*)_this)->SetVisited();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHyperlinkCtrl, GetVisited)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHyperlinkCtrl_php*)_this)->GetVisited();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHyperlinkCtrl, SetVisitedColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHyperlinkCtrl_php*)_this)->SetVisitedColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHyperlinkCtrl, GetURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHyperlinkCtrl_php*)_this)->GetURL();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxHyperlinkCtrl, SetURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHyperlinkCtrl_php*)_this)->SetURL(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHyperlinkCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxHyperlinkCtrl_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHyperlinkCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHyperlinkCtrl_php*) _this)->evnArray);
			array_init(((wxHyperlinkCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHyperlinkCtrl_php*) _this)->phpObj);
			*((wxHyperlinkCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHyperlinkCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHyperlinkCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!s!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr2 , &_argStr2_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxHyperlinkCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr2, wxConvUTF8));
					break;
				case 7:
					_this = new wxHyperlinkCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 6:
					_this = new wxHyperlinkCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 5:
					_this = new wxHyperlinkCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 4:
					_this = new wxHyperlinkCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHyperlinkCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHyperlinkCtrl_php*) _this)->evnArray);
			array_init(((wxHyperlinkCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHyperlinkCtrl_php*) _this)->phpObj);
			*((wxHyperlinkCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHyperlinkCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHyperlinkCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxHyperlinkEvent_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxHyperlinkEvent, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxHyperlinkEvent_php(*(wxHyperlinkEvent *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHyperlinkEvent);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHyperlinkEvent_php*) _this)->evnArray);
			array_init(((wxHyperlinkEvent_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHyperlinkEvent_php*) _this)->phpObj);
			*((wxHyperlinkEvent_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHyperlinkEvent_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHyperlinkEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxHyperlinkEvent_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHyperlinkEvent);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHyperlinkEvent_php*) _this)->evnArray);
			array_init(((wxHyperlinkEvent_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHyperlinkEvent_php*) _this)->phpObj);
			*((wxHyperlinkEvent_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHyperlinkEvent_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHyperlinkEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxHyperlinkEvent_php((wxObject*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHyperlinkEvent);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHyperlinkEvent_php*) _this)->evnArray);
			array_init(((wxHyperlinkEvent_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHyperlinkEvent_php*) _this)->phpObj);
			*((wxHyperlinkEvent_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHyperlinkEvent_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHyperlinkEvent_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxHyperlinkEvent, GetURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHyperlinkEvent_php*)_this)->GetURL();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxHyperlinkEvent, SetURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHyperlinkEvent_php*)_this)->SetURL(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxMenuBarBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxMenuBarBase, Check)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBarBase_php*)_this)->Check((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, Enable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBarBase_php*)_this)->Enable((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxMenuBarBase_php*)_this)->Enable(_argBool0);
					break;
				case 0:
					ret1 =  ((wxMenuBarBase_php*)_this)->Enable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, FindMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBarBase_php*)_this)->FindMenu(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, GetHelpString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBarBase_php*)_this)->GetHelpString((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, GetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBarBase_php*)_this)->GetLabel((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret1 =  ((wxMenuBarBase_php*)_this)->GetLabel();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret1.size()+1));strcpy ( ro2, (const char *) ret1.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, GetMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxMenu* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBarBase_php*)_this)->GetMenu((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenu_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenu));return;			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, GetMenuCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxMenuBarBase_php*)_this)->GetMenuCount();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, GetMenuLabelText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBarBase_php*)_this)->GetMenuLabelText((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, IsChecked)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBarBase_php*)_this)->IsChecked((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, IsEnabled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxMenuBarBase_php*)_this)->IsEnabled((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret1 =  ((wxMenuBarBase_php*)_this)->IsEnabled();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, SetHelpString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBarBase_php*)_this)->SetHelpString((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, SetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBarBase_php*)_this)->SetLabel((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxMenuBarBase_php*)_this)->SetLabel(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxMenuBarBase, SetMenuLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBarBase_php*)_this)->SetMenuLabel((long unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void wxMenuBarBase_php::SetLabelTop(long unsigned int arg0 , const wxString& arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetLabelTop", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(const long int) &arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxMenuBarBase, SetLabelTop)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxMenuBarBase_php*)_this)->SetLabelTop((long unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxAuiToolBarItem_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxAuiToolBarItem, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxAuiToolBarItem_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiToolBarItem);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiToolBarItem_php*) _this)->evnArray);
			array_init(((wxAuiToolBarItem_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiToolBarItem_php*) _this)->phpObj);
			*((wxAuiToolBarItem_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiToolBarItem_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiToolBarItem_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxAuiToolBarItem_php(*(wxAuiToolBarItem *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiToolBarItem);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiToolBarItem_php*) _this)->evnArray);
			array_init(((wxAuiToolBarItem_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiToolBarItem_php*) _this)->phpObj);
			*((wxAuiToolBarItem_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiToolBarItem_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiToolBarItem_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetWindow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetWindow((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetWindow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxWindow* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetWindow();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxWindow_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxWindow));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetId((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetId();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetKind)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetKind((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetKind)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetKind();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetState)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetState((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetState)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetState();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetSizerItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetSizerItem((wxSizerItem*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetSizerItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetSizerItem();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetLabel(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetLabel();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetBitmap(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetBitmap();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxBitmap));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetDisabledBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetDisabledBitmap(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetDisabledBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetDisabledBitmap();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxBitmap));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetHoverBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetHoverBitmap(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetHoverBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetHoverBitmap();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxBitmap));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetShortHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetShortHelp();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetShortHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetShortHelp(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetLongHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetLongHelp(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetLongHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetLongHelp();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetMinSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetMinSize();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetMinSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetMinSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetSpacerPixels)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetSpacerPixels((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetSpacerPixels)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetSpacerPixels();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetProportion)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetProportion();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetProportion)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetProportion((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetActive)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetActive(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, IsActive)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->IsActive();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetHasDropDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetHasDropDown(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, HasDropDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->HasDropDown();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetSticky)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetSticky(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, IsSticky)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->IsSticky();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, SetUserData)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->SetUserData((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, GetUserData)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarItem_php*)_this)->GetUserData();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarItem, Assign)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarItem_php*)_this)->Assign(*(wxAuiToolBarItem *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxAuiToolBarArt_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
void wxAuiToolBarArt_php::SetFlags(unsigned int arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetFlags", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, SetFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarArt_php*)_this)->SetFlags((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBarArt, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxAuiToolBarArt_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiToolBarArt);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiToolBarArt_php*) _this)->evnArray);
			array_init(((wxAuiToolBarArt_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiToolBarArt_php*) _this)->phpObj);
			*((wxAuiToolBarArt_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiToolBarArt_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiToolBarArt_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxAuiToolBarArt_php(*(wxAuiToolBarArt *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiToolBarArt);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiToolBarArt_php*) _this)->evnArray);
			array_init(((wxAuiToolBarArt_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiToolBarArt_php*) _this)->phpObj);
			*((wxAuiToolBarArt_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiToolBarArt_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiToolBarArt_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void wxAuiToolBarArt_php::SetFont(const wxFont& arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetFont", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(const long int) &arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, SetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarArt_php*)_this)->SetFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiToolBarArt_php::SetTextOrientation(int arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetTextOrientation", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, SetTextOrientation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBarArt_php*)_this)->SetTextOrientation((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
wxAuiToolBarArt* wxAuiToolBarArt_php::Clone(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Clone", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return (wxAuiToolBarArt*) zend_object_store_get_object(&retval TSRMLS_CC);	}
	}
PHP_METHOD(php_wxAuiToolBarArt, Clone)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxAuiToolBarArt* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBarArt_php*)_this)->Clone();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxAuiToolBarArt_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxAuiToolBarArt));return;			
		}
	}
}
void wxAuiToolBarArt_php::DrawBackground(wxDC& arg0 , wxWindow* arg1 , const wxRect& arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawBackground", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, DrawBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxAuiToolBarArt_php*)_this)->DrawBackground(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxRect *) _ptrObj2);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiToolBarArt_php::DrawButton(wxDC& arg0 , wxWindow* arg1 , const wxAuiToolBarItem& arg2 , const wxRect& arg3){
	zval *args[4];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawButton", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(const long int) &arg3);
	args[3]= &argLng3;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 4, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, DrawButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxAuiToolBarArt_php*)_this)->DrawButton(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxAuiToolBarItem *) _ptrObj2 , *(wxRect *) _ptrObj3);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiToolBarArt_php::DrawControlLabel(wxDC& arg0 , wxWindow* arg1 , const wxAuiToolBarItem& arg2 , const wxRect& arg3){
	zval *args[4];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawControlLabel", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(const long int) &arg3);
	args[3]= &argLng3;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 4, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, DrawControlLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxAuiToolBarArt_php*)_this)->DrawControlLabel(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxAuiToolBarItem *) _ptrObj2 , *(wxRect *) _ptrObj3);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiToolBarArt_php::DrawDropDownButton(wxDC& arg0 , wxWindow* arg1 , const wxAuiToolBarItem& arg2 , const wxRect& arg3){
	zval *args[4];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawDropDownButton", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(const long int) &arg3);
	args[3]= &argLng3;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 4, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, DrawDropDownButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxAuiToolBarArt_php*)_this)->DrawDropDownButton(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxAuiToolBarItem *) _ptrObj2 , *(wxRect *) _ptrObj3);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiToolBarArt_php::DrawGripper(wxDC& arg0 , wxWindow* arg1 , const wxRect& arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawGripper", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, DrawGripper)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxAuiToolBarArt_php*)_this)->DrawGripper(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxRect *) _ptrObj2);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiToolBarArt_php::DrawLabel(wxDC& arg0 , wxWindow* arg1 , const wxAuiToolBarItem& arg2 , const wxRect& arg3){
	zval *args[4];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawLabel", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(const long int) &arg3);
	args[3]= &argLng3;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 4, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, DrawLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxAuiToolBarArt_php*)_this)->DrawLabel(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxAuiToolBarItem *) _ptrObj2 , *(wxRect *) _ptrObj3);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiToolBarArt_php::DrawOverflowButton(wxDC& arg0 , wxWindow* arg1 , const wxRect& arg2 , int arg3){
	zval *args[4];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawOverflowButton", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,arg3);
	args[3]= &argLng3;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 4, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, DrawOverflowButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!l!", &_argObj0 , &_argObj1 , &_argObj2 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxAuiToolBarArt_php*)_this)->DrawOverflowButton(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxRect *) _ptrObj2 , (int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxAuiToolBarArt_php::DrawSeparator(wxDC& arg0 , wxWindow* arg1 , const wxRect& arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DrawSeparator", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, DrawSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxAuiToolBarArt_php*)_this)->DrawSeparator(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxRect *) _ptrObj2);
					break;
				default:
					break;
			}
			
		}
	}
}
int wxAuiToolBarArt_php::GetElementSize(int arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetElementSize", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxAuiToolBarArt, GetElementSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBarArt_php*)_this)->GetElementSize((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
wxSize wxAuiToolBarArt_php::GetLabelSize(wxDC& arg0 , wxWindow* arg1 , const wxAuiToolBarItem& arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetLabelSize", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		wxSize* return_var = (wxSize*) zend_object_store_get_object(&retval TSRMLS_CC);return *return_var;	}
	}
PHP_METHOD(php_wxAuiToolBarArt, GetLabelSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxAuiToolBarArt_php*)_this)->GetLabelSize(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxAuiToolBarItem *) _ptrObj2);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
wxSize wxAuiToolBarArt_php::GetToolSize(wxDC& arg0 , wxWindow* arg1 , const wxAuiToolBarItem& arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetToolSize", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		wxSize* return_var = (wxSize*) zend_object_store_get_object(&retval TSRMLS_CC);return *return_var;	}
	}
PHP_METHOD(php_wxAuiToolBarArt, GetToolSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxAuiToolBarArt_php*)_this)->GetToolSize(*(wxDC *) _ptrObj0 , (wxWindow*) _ptrObj1 , *(wxAuiToolBarItem *) _ptrObj2);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
void wxAuiToolBarArt_php::SetElementSize(int arg0 , int arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetElementSize", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxAuiToolBarArt, SetElementSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBarArt_php*)_this)->SetElementSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
int wxAuiToolBarArt_php::ShowDropDown(wxWindow* arg0 , const wxAuiToolBarItemArray& arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "ShowDropDown", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(const long int) &arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxAuiToolBarArt, ShowDropDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxAuiToolBarArt_php*)_this)->ShowDropDown((wxWindow*) _ptrObj0 , *(wxAuiToolBarItemArray *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxAuiToolBar_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxAuiToolBar, SetWindowStyleFlag)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->SetWindowStyleFlag((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetArtProvider)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->SetArtProvider((wxAuiToolBarArt*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->SetFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetMargins)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->SetMargins(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->SetMargins((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxAuiToolBar_php*)_this)->SetMargins((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolBitmapSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->SetToolBitmapSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetGripperVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->SetGripperVisible(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetOverflowVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->SetOverflowVisible(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolDropDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->SetToolDropDown((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolBorderPadding)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->SetToolBorderPadding((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolTextOrientation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->SetToolTextOrientation((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolPacking)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->SetToolPacking((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolProportion)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->SetToolProportion((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolSeparation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->SetToolSeparation((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolSticky)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->SetToolSticky((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolShortHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->SetToolShortHelp((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetCustomOverflowItems)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->SetCustomOverflowItems(*(wxAuiToolBarItemArray *) _ptrObj0 , *(wxAuiToolBarItemArray *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolLongHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->SetToolLongHelp((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->SetToolBitmap((int)_argLong0 , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, SetToolLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->SetToolLabel((int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, ToggleTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->ToggleTool((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					_this = new wxAuiToolBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxAuiToolBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxAuiToolBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxAuiToolBar_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxAuiToolBar_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxAuiToolBar);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxAuiToolBar_php*) _this)->evnArray);
			array_init(((wxAuiToolBar_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxAuiToolBar_php*) _this)->phpObj);
			*((wxAuiToolBar_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxAuiToolBar_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxAuiToolBar_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetWindowStyleFlag)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetWindowStyleFlag();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetArtProvider)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxAuiToolBarArt* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetArtProvider();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxAuiToolBarArt_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxAuiToolBarArt));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiToolBar_php*)_this)->GetToolCount();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolPos((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolIndex((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolFits)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolFits((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolRect)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxRect ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolRect((int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxRect),0);memcpy(ptr,&ret0,sizeof(wxRect));object_init_ex(return_value,php_wxRect_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRect));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolFitsByIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolFitsByIndex((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolBarFits)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolBarFits();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolBitmapSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolBitmapSize();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetOverflowVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetOverflowVisible();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetGripperVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetGripperVisible();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolToggled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolToggled((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolEnabled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolEnabled((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolDropDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolDropDown((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolBorderPadding)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolBorderPadding();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolTextOrientation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolTextOrientation();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolPacking)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolPacking();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolProportion)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolProportion((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolSeparation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolSeparation();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolLabel((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolLongHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolLongHelp((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolShortHelp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolShortHelp((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolSticky)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolSticky((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, GetToolBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->GetToolBitmap((int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxBitmap),0);memcpy(ptr,&ret0,sizeof(wxBitmap));object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxBitmap));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, AddTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!z!|b!z!s!s!", &_argLong0 , &_argObj0 , &_argObj1 , &_argBool0 , &_argObj2 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					 ((wxAuiToolBar_php*)_this)->AddTool((int)_argLong0 , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , _argBool0 , (wxObject*) _ptrObj2 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 6:
					 ((wxAuiToolBar_php*)_this)->AddTool((int)_argLong0 , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , _argBool0 , (wxObject*) _ptrObj2 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					 ((wxAuiToolBar_php*)_this)->AddTool((int)_argLong0 , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , _argBool0 , (wxObject*) _ptrObj2);
					break;
				case 4:
					 ((wxAuiToolBar_php*)_this)->AddTool((int)_argLong0 , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , _argBool0);
					break;
				case 3:
					 ((wxAuiToolBar_php*)_this)->AddTool((int)_argLong0 , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!z!z!l!s!s!z!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj0 , &_argObj1 , &_argLong1 , &_argStr1 , &_argStr1_len , &_argStr2 , &_argStr2_len , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					 ((wxAuiToolBar_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , *(wxBitmap *) _ptrObj1 , (wxItemKind) _argLong1 , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , (wxObject*) _ptrObj2);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!z!|s!l!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj0 , &_argStr1 , &_argStr1_len , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					 ((wxAuiToolBar_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , wxString(_argStr1, wxConvUTF8) , (wxItemKind) _argLong1);
					break;
				case 4:
					 ((wxAuiToolBar_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , wxString(_argStr1, wxConvUTF8));
					break;
				case 3:
					 ((wxAuiToolBar_php*)_this)->AddTool((int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, AddControl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|s!", &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxToolBar && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxRadioBox && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxSlider))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->AddControl((wxControl*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 1:
					 ((wxAuiToolBar_php*)_this)->AddControl((wxControl*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, AddSeparator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiToolBar_php*)_this)->AddSeparator();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, AddSpacer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->AddSpacer((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, AddStretchSpacer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxAuiToolBar_php*)_this)->AddStretchSpacer((int)_argLong0);
					break;
				case 0:
					 ((wxAuiToolBar_php*)_this)->AddStretchSpacer();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, Realize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxAuiToolBar_php*)_this)->Realize();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, FindControl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxControl* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->FindControl((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxControl_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxControl));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, FindToolByIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxAuiToolBarItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->FindToolByIndex((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxAuiToolBarItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxAuiToolBarItem));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, FindTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxAuiToolBarItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->FindTool((int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxAuiToolBarItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxAuiToolBarItem));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, FindToolByPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxAuiToolBarItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxAuiToolBar_php*)_this)->FindToolByPosition((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxAuiToolBarItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxAuiToolBarItem));return;			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, ClearTools)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiToolBar_php*)_this)->ClearTools();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxAuiToolBar_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, DeleteTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->DeleteTool((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, DeleteByIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxAuiToolBar_php*)_this)->DeleteByIndex((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxAuiToolBar, EnableTool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxAuiToolBar_php*)_this)->EnableTool((int)_argLong0 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxDialogBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxDialogBase, GetAffirmativeId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDialogBase_php*)_this)->GetAffirmativeId();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxDialogBase, CreateButtonSizer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxSizer* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDialogBase_php*)_this)->CreateButtonSizer((long int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizer_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizer));return;			
		}
	}
}
PHP_METHOD(php_wxDialogBase, CreateSeparatedButtonSizer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxSizer* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDialogBase_php*)_this)->CreateSeparatedButtonSizer((long int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizer_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizer));return;			
		}
	}
}
PHP_METHOD(php_wxDialogBase, CreateStdDialogButtonSizer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxStdDialogButtonSizer* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDialogBase_php*)_this)->CreateStdDialogButtonSizer((long int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxStdDialogButtonSizer_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxStdDialogButtonSizer));return;			
		}
	}
}
PHP_METHOD(php_wxDialogBase, GetEscapeId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDialogBase_php*)_this)->GetEscapeId();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxDialogBase, GetReturnCode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDialogBase_php*)_this)->GetReturnCode();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxDialogBase, SetReturnCode)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDialogBase_php*)_this)->SetReturnCode((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDialogBase, SetEscapeId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDialogBase_php*)_this)->SetEscapeId((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDialogBase, SetAffirmativeId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDialogBase_php*)_this)->SetAffirmativeId((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
bool wxDialogBase_php::IsModal() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "IsModal", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxDialogBase, IsModal)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDialogBase_php*)_this)->IsModal();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxStdDialogButtonSizer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxStdDialogButtonSizer, AddButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBitmapButton))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStdDialogButtonSizer_php*)_this)->AddButton((wxButton*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStdDialogButtonSizer, Realize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxStdDialogButtonSizer_php*)_this)->Realize();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStdDialogButtonSizer, SetAffirmativeButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBitmapButton))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStdDialogButtonSizer_php*)_this)->SetAffirmativeButton((wxButton*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStdDialogButtonSizer, SetCancelButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBitmapButton))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStdDialogButtonSizer_php*)_this)->SetCancelButton((wxButton*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStdDialogButtonSizer, SetNegativeButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBitmapButton))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxStdDialogButtonSizer_php*)_this)->SetNegativeButton((wxButton*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxStdDialogButtonSizer, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxStdDialogButtonSizer_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxStdDialogButtonSizer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxStdDialogButtonSizer_php*) _this)->evnArray);
			array_init(((wxStdDialogButtonSizer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxStdDialogButtonSizer_php*) _this)->phpObj);
			*((wxStdDialogButtonSizer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxStdDialogButtonSizer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxStdDialogButtonSizer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxHtmlWindow_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxHtmlWindow, AddFilter)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlWindow_php*)_this)->AddFilter((wxHtmlFilter*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, AppendToPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxHtmlWindow_php*)_this)->AppendToPage(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, GetInternalRepresentation)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxHtmlContainerCell* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlWindow_php*)_this)->GetInternalRepresentation();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxHtmlContainerCell_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxHtmlContainerCell));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, GetOpenedAnchor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlWindow_php*)_this)->GetOpenedAnchor();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, GetOpenedPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlWindow_php*)_this)->GetOpenedPage();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, GetOpenedPageTitle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlWindow_php*)_this)->GetOpenedPageTitle();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, GetRelatedFrame)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxFrame* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlWindow_php*)_this)->GetRelatedFrame();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxFrame_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxFrame));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, HistoryBack)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlWindow_php*)_this)->HistoryBack();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, HistoryCanBack)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlWindow_php*)_this)->HistoryCanBack();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, HistoryCanForward)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlWindow_php*)_this)->HistoryCanForward();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, HistoryClear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxHtmlWindow_php*)_this)->HistoryClear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, HistoryForward)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlWindow_php*)_this)->HistoryForward();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, LoadFile)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxHtmlWindow_php*)_this)->LoadFile(*(wxFileName *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, LoadPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxHtmlWindow_php*)_this)->LoadPage(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, SelectAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxHtmlWindow_php*)_this)->SelectAll();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, SelectionToText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlWindow_php*)_this)->SelectionToText();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, SelectLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlWindow_php*)_this)->SelectLine(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, SelectWord)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlWindow_php*)_this)->SelectWord(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, SetBorders)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlWindow_php*)_this)->SetBorders((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, SetFonts)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!s!|z!", &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxHtmlWindow_php*)_this)->SetFonts(wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , (int*) _ptrObj0);
					break;
				case 2:
					 ((wxHtmlWindow_php*)_this)->SetFonts(wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, SetPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxHtmlWindow_php*)_this)->SetPage(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, SetRelatedFrame)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!", &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxSplashScreen))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxHtmlWindow_php*)_this)->SetRelatedFrame((wxFrame*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, SetRelatedStatusBar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlWindow_php*)_this)->SetRelatedStatusBar((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, ToText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlWindow_php*)_this)->ToText();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxHtmlWindow_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlWindow);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlWindow_php*) _this)->evnArray);
			array_init(((wxHtmlWindow_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlWindow_php*) _this)->phpObj);
			*((wxHtmlWindow_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlWindow_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlWindow_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxHtmlWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxHtmlWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxHtmlWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxHtmlWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxHtmlWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxHtmlWindow_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlWindow);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlWindow_php*) _this)->evnArray);
			array_init(((wxHtmlWindow_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlWindow_php*) _this)->phpObj);
			*((wxHtmlWindow_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlWindow_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlWindow_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxHtmlWindow, Create)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					ret0 =  ((wxHtmlWindow_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					ret0 =  ((wxHtmlWindow_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					ret0 =  ((wxHtmlWindow_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					ret0 =  ((wxHtmlWindow_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					ret0 =  ((wxHtmlWindow_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret0 =  ((wxHtmlWindow_php*)_this)->Create((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxHtmlContainerCell_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxHtmlContainerCell, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxHtmlContainerCell_php((wxHtmlContainerCell*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlContainerCell);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlContainerCell_php*) _this)->evnArray);
			array_init(((wxHtmlContainerCell_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlContainerCell_php*) _this)->phpObj);
			*((wxHtmlContainerCell_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlContainerCell_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlContainerCell_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, GetAlignHor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlContainerCell_php*)_this)->GetAlignHor();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, GetAlignVer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlContainerCell_php*)_this)->GetAlignVer();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, GetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlContainerCell_php*)_this)->GetBackgroundColour();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxColour),0);memcpy(ptr,&ret0,sizeof(wxColour));object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, GetIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxHtmlContainerCell_php*)_this)->GetIndent((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, GetIndentUnits)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxHtmlContainerCell_php*)_this)->GetIndentUnits((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, InsertCell)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxHtmlContainerCell))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlContainerCell_php*)_this)->InsertCell((wxHtmlCell*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, SetAlign)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlContainerCell_php*)_this)->SetAlign(*(wxHtmlTag *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, SetAlignHor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlContainerCell_php*)_this)->SetAlignHor((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, SetAlignVer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlContainerCell_php*)_this)->SetAlignVer((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, SetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlContainerCell_php*)_this)->SetBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, SetBorder)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxHtmlContainerCell_php*)_this)->SetBorder(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, SetIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxHtmlContainerCell_php*)_this)->SetIndent((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					 ((wxHtmlContainerCell_php*)_this)->SetIndent((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, SetMinHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxHtmlContainerCell_php*)_this)->SetMinHeight((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					 ((wxHtmlContainerCell_php*)_this)->SetMinHeight((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlContainerCell, SetWidthFloat)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxHtmlContainerCell_php*)_this)->SetWidthFloat((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxHtmlCell_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxHtmlCell, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxHtmlCell_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlCell);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlCell_php*) _this)->evnArray);
			array_init(((wxHtmlCell_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlCell_php*) _this)->phpObj);
			*((wxHtmlCell_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlCell_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlCell_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, AdjustPagebreak)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxHtmlCell_php*)_this)->AdjustPagebreak((int*) _ptrObj0 , *(wxArrayInt *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, GetDescent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlCell_php*)_this)->GetDescent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, GetFirstChild)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxHtmlCell* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlCell_php*)_this)->GetFirstChild();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxHtmlCell_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxHtmlCell));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, GetHeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlCell_php*)_this)->GetHeight();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, GetId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlCell_php*)_this)->GetId();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, GetLink)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxHtmlLinkInfo* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxHtmlCell_php*)_this)->GetLink((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxHtmlCell_php*)_this)->GetLink();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxHtmlLinkInfo_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxHtmlLinkInfo));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, GetMouseCursor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxCursor ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxHtmlCell_php*)_this)->GetMouseCursor((wxHtmlWindowInterface*) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxCursor),0);memcpy(ptr,&ret0,sizeof(wxCursor));object_init_ex(return_value,php_wxCursor_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxCursor));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, GetNext)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxHtmlCell* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlCell_php*)_this)->GetNext();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxHtmlCell_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxHtmlCell));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, GetParent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxHtmlContainerCell* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlCell_php*)_this)->GetParent();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxHtmlContainerCell_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxHtmlContainerCell));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, GetPosX)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlCell_php*)_this)->GetPosX();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, GetPosY)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlCell_php*)_this)->GetPosY();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, GetWidth)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlCell_php*)_this)->GetWidth();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, Layout)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlCell_php*)_this)->Layout((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, ProcessMouseClick)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxHtmlCell_php*)_this)->ProcessMouseClick((wxHtmlWindowInterface*) _ptrObj0 , *(wxPoint *) _ptrObj1 , *(wxMouseEvent *) _ptrObj2);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, SetId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlCell_php*)_this)->SetId(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, SetLink)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlCell_php*)_this)->SetLink(*(wxHtmlLinkInfo *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, SetNext)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxHtmlContainerCell))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlCell_php*)_this)->SetNext((wxHtmlCell*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, SetParent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlCell_php*)_this)->SetParent((wxHtmlContainerCell*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlCell, SetPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxHtmlCell_php*)_this)->SetPos((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxHtmlRenderingInfo_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxHtmlRenderingInfo, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxHtmlRenderingInfo_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlRenderingInfo);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlRenderingInfo_php*) _this)->evnArray);
			array_init(((wxHtmlRenderingInfo_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlRenderingInfo_php*) _this)->phpObj);
			*((wxHtmlRenderingInfo_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlRenderingInfo_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlRenderingInfo_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxHtmlRenderingInfo_php(*(wxHtmlRenderingInfo *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlRenderingInfo);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlRenderingInfo_php*) _this)->evnArray);
			array_init(((wxHtmlRenderingInfo_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlRenderingInfo_php*) _this)->phpObj);
			*((wxHtmlRenderingInfo_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlRenderingInfo_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlRenderingInfo_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxHtmlRenderingInfo, SetStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlRenderingInfo_php*)_this)->SetStyle((wxHtmlRenderingStyle*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlRenderingInfo, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlRenderingInfo_php*)_this)->SetSelection((wxHtmlSelection*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlRenderingInfo, GetStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxHtmlRenderingInfo_php*)_this)->GetStyle();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlRenderingInfo, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxHtmlSelection* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlRenderingInfo_php*)_this)->GetSelection();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxHtmlSelection_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxHtmlSelection));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlRenderingInfo, GetState)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxHtmlRenderingInfo_php*)_this)->GetState();
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxHtmlSelection_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxHtmlSelection, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxHtmlSelection_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlSelection);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlSelection_php*) _this)->evnArray);
			array_init(((wxHtmlSelection_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlSelection_php*) _this)->phpObj);
			*((wxHtmlSelection_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlSelection_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlSelection_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxHtmlSelection_php(*(wxHtmlSelection *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlSelection);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlSelection_php*) _this)->evnArray);
			array_init(((wxHtmlSelection_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlSelection_php*) _this)->phpObj);
			*((wxHtmlSelection_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlSelection_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlSelection_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxHtmlSelection, SetToPrivPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlSelection_php*)_this)->SetToPrivPos(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlSelection, SetFromPrivPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxHtmlSelection_php*)_this)->SetFromPrivPos(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlSelection, Set)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxHtmlContainerCell))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxHtmlContainerCell))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxHtmlSelection_php*)_this)->Set((wxHtmlCell*) _ptrObj0 , (wxHtmlCell*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxHtmlContainerCell))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 || (rsrc_type != le_wxHtmlContainerCell))
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxHtmlSelection_php*)_this)->Set(*(wxPoint *) _ptrObj0 , (wxHtmlCell*) _ptrObj1 , *(wxPoint *) _ptrObj2 , (wxHtmlCell*) _ptrObj3);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxHtmlSelection, IsEmpty)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlSelection_php*)_this)->IsEmpty();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxHtmlSelection, GetToPrivPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlSelection_php*)_this)->GetToPrivPos();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlSelection, GetToPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlSelection_php*)_this)->GetToPos();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlSelection, GetFromPrivPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlSelection_php*)_this)->GetFromPrivPos();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlSelection, GetFromPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlSelection_php*)_this)->GetFromPos();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxHtmlSelection, ClearPrivPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxHtmlSelection_php*)_this)->ClearPrivPos();
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxHtmlLinkInfo_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxHtmlLinkInfo, GetHref)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlLinkInfo_php*)_this)->GetHref();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxHtmlLinkInfo, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|s!", &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxHtmlLinkInfo_php(wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 1:
					_this = new wxHtmlLinkInfo_php(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlLinkInfo);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlLinkInfo_php*) _this)->evnArray);
			array_init(((wxHtmlLinkInfo_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlLinkInfo_php*) _this)->phpObj);
			*((wxHtmlLinkInfo_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlLinkInfo_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlLinkInfo_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxHtmlLinkInfo_php(*(wxHtmlLinkInfo *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlLinkInfo);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlLinkInfo_php*) _this)->evnArray);
			array_init(((wxHtmlLinkInfo_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlLinkInfo_php*) _this)->phpObj);
			*((wxHtmlLinkInfo_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlLinkInfo_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlLinkInfo_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxHtmlLinkInfo_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxHtmlLinkInfo);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxHtmlLinkInfo_php*) _this)->evnArray);
			array_init(((wxHtmlLinkInfo_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxHtmlLinkInfo_php*) _this)->phpObj);
			*((wxHtmlLinkInfo_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxHtmlLinkInfo_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxHtmlLinkInfo_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxHtmlLinkInfo, GetTarget)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxHtmlLinkInfo_php*)_this)->GetTarget();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
void php_wxRichTextCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxRichTextCtrl, AddImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxRichTextRange ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->AddImage(*(wxImage *) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxRichTextRange),0);memcpy(ptr,&ret0,sizeof(wxRichTextRange));object_init_ex(return_value,php_wxRichTextRange_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRichTextRange));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, AddParagraph)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			wxRichTextRange ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->AddParagraph(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxRichTextRange),0);memcpy(ptr,&ret0,sizeof(wxRichTextRange));object_init_ex(return_value,php_wxRichTextRange_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRichTextRange));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, AppendText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->AppendText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, ApplyAlignmentToSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "zl!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->ApplyAlignmentToSelection((wxTextAttrAlignment) _argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, ApplyBoldToSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->ApplyBoldToSelection();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, ApplyItalicToSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->ApplyItalicToSelection();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, ApplyUnderlineToSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->ApplyUnderlineToSelection();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BatchingUndo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BatchingUndo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "zl!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginAlignment((wxTextAttrAlignment) _argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginBatchUndo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginBatchUndo(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginBold)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginBold();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginCharacterStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginCharacterStyle(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginFontSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginFontSize((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginItalic)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginItalic();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginLeftIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginLeftIndent((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginLeftIndent((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginLineSpacing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginLineSpacing((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginListStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!l!", &_argStr0 , &_argStr0_len , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginListStyle(wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1);
					break;
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginListStyle(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginListStyle(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginNumberedBullet)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!|l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginNumberedBullet((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				case 3:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginNumberedBullet((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginParagraphSpacing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginParagraphSpacing((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginParagraphStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginParagraphStyle(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginRightIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginRightIndent((int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginSuppressUndo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginSuppressUndo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginSymbolBullet)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!l!l!|l!", &_argStr0 , &_argStr0_len , &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginSymbolBullet(wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginSymbolBullet(wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginTextColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginUnderline)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginUnderline();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|s!", &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginURL(wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginURL(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, CanCopy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->CanCopy();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, CanCut)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->CanCut();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, CanDeleteSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->CanDeleteSelection();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, CanPaste)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->CanPaste();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, CanRedo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->CanRedo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, CanUndo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->CanUndo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Copy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->Copy();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Create)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!s!z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					ret0 =  ((wxRichTextCtrl_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr1, wxConvUTF8));
					break;
				case 7:
					ret0 =  ((wxRichTextCtrl_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 6:
					ret0 =  ((wxRichTextCtrl_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					ret0 =  ((wxRichTextCtrl_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					ret0 =  ((wxRichTextCtrl_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					ret0 =  ((wxRichTextCtrl_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->Create((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Cut)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->Cut();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Delete)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->Delete(*(wxRichTextRange *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, DeleteSelectedContent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|z!", &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->DeleteSelectedContent((long int*) _ptrObj0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->DeleteSelectedContent();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, DeleteSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->DeleteSelection();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, DiscardEdits)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->DiscardEdits();
					break;
				default:
					break;
			}
			
		}
	}
}
wxSize wxRichTextCtrl_php::DoGetBestSize() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DoGetBestSize", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		wxSize* return_var = (wxSize*) zend_object_store_get_object(&retval TSRMLS_CC);return *return_var;	}
	}
PHP_METHOD(php_wxRichTextCtrl, DoGetBestSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->DoGetBestSize();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndAlignment();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndAllStyles)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndAllStyles();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndBatchUndo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndBatchUndo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndBold)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndBold();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndCharacterStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndCharacterStyle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndFont();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndFontSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndFontSize();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndItalic)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndItalic();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndLeftIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndLeftIndent();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndLineSpacing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndLineSpacing();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndListStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndListStyle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndNumberedBullet)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndNumberedBullet();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndParagraphSpacing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndParagraphSpacing();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndRightIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndRightIndent();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndStyle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndSuppressUndo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndSuppressUndo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndSymbolBullet)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndSymbolBullet();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndTextColour();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndURL();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, ExtendSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxRichTextCtrl_php*)_this)->ExtendSelection((long int)_argLong0 , (long int)_argLong1 , (int)_argLong2);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndUnderline)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndUnderline();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, FindNextWordPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->FindNextWordPosition((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->FindNextWordPosition();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Freeze)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->Freeze();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetLastPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetLastPosition();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetLineLength)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetLineLength((long int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetLineText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetLineText((long int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetNumberOfLines)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetNumberOfLines();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetPhysicalPoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetPhysicalPoint(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxPoint),0);memcpy(ptr,&ret0,sizeof(wxPoint));object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetRange((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRichTextCtrl_php*)_this)->GetSelection((long int*) _ptrObj0 , (long int*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetSelectionRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxRichTextRange ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetSelectionRange();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxRichTextRange),0);memcpy(ptr,&ret0,sizeof(wxRichTextRange));object_init_ex(return_value,php_wxRichTextRange_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRichTextRange));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetStringSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetStringSelection();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxRichTextCtrl_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRichTextCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRichTextCtrl_php*) _this)->evnArray);
			array_init(((wxRichTextCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRichTextCtrl_php*) _this)->phpObj);
			*((wxRichTextCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRichTextCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRichTextCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!s!z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxRichTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr1, wxConvUTF8));
					break;
				case 7:
					_this = new wxRichTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 6:
					_this = new wxRichTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxRichTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxRichTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxRichTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxRichTextCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxRichTextCtrl_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRichTextCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRichTextCtrl_php*) _this)->evnArray);
			array_init(((wxRichTextCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRichTextCtrl_php*) _this)->phpObj);
			*((wxRichTextCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRichTextCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRichTextCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, XYToPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->XYToPosition((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, WriteText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->WriteText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, WriteImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->WriteImage(*(wxRichTextImageBlock *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxRichTextCtrl_php*)_this)->WriteImage(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret2 =  ((wxRichTextCtrl_php*)_this)->WriteImage(*(wxBitmap *) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret2 =  ((wxRichTextCtrl_php*)_this)->WriteImage(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret3;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret3 =  ((wxRichTextCtrl_php*)_this)->WriteImage(*(wxImage *) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret3 =  ((wxRichTextCtrl_php*)_this)->WriteImage(*(wxImage *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret3)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, WordRight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->WordRight((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->WordRight((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->WordRight();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, WordLeft)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->WordLeft((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->WordLeft((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->WordLeft();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Undo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->Undo();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Thaw)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->Thaw();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SuppressingUndo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->SuppressingUndo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, ShowPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->ShowPosition((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetupScrollbars)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetupScrollbars(_argBool0);
					break;
				case 0:
					 ((wxRichTextCtrl_php*)_this)->SetupScrollbars();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRichTextCtrl_php*)_this)->SetSelection((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetSelectionRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetSelectionRange(*(wxRichTextRange *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetMaxLength)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetMaxLength((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetEditable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetEditable(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetFilename)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetFilename(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->SetFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetHandlerFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetHandlerFlags((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetInsertionPoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetInsertionPoint((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetInsertionPointEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->SetInsertionPointEnd();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, BeginStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->BeginStyle(*(wxTextAttrEx *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, ClearListStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->ClearListStyle(*(wxRichTextRange *) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->ClearListStyle(*(wxRichTextRange *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Command)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxTreeEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxCalendarEvent))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->Command(*(wxCommandEvent *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, EndParagraphStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->EndParagraphStyle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetBasicStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxTextAttrEx ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetBasicStyle();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxTextAttrEx_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxTextAttrEx));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetBuffer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->GetBuffer();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetCaretPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetCaretPosition();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetCommandProcessor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxCommandProcessor* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetCommandProcessor();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxCommandProcessor_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxCommandProcessor));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetCaretPositionForIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetCaretPositionForIndex((long int)_argLong0 , *(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetDefaultStyleEx)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxTextAttrEx ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetDefaultStyleEx();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxTextAttrEx_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxTextAttrEx));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetDelayedLayoutThreshold)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetDelayedLayoutThreshold();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetFilename)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetFilename();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetFirstVisiblePoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetFirstVisiblePoint();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxPoint),0);memcpy(ptr,&ret0,sizeof(wxPoint));object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetFirstVisiblePosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetFirstVisiblePosition();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetInsertionPoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetInsertionPoint();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetLogicalPoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetLogicalPoint(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxPoint),0);memcpy(ptr,&ret0,sizeof(wxPoint));object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxTextAttrEx))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetStyle((long int)_argLong0 , *(wxTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxRichTextCtrl_php*)_this)->GetStyle((long int)_argLong0 , *(wxTextAttrEx *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret2 =  ((wxRichTextCtrl_php*)_this)->GetStyle((long int)_argLong0 , *(wxRichTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetStyleForRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetStyleForRange(*(wxRichTextRange *) _ptrObj0 , *(wxRichTextAttr *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxRichTextCtrl_php*)_this)->GetStyleForRange(*(wxRichTextRange *) _ptrObj0 , *(wxTextAttrEx *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetStyleSheet)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->GetStyleSheet();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetUncombinedStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxTextAttrEx))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetUncombinedStyle((long int)_argLong0 , *(wxTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxRichTextCtrl_php*)_this)->GetUncombinedStyle((long int)_argLong0 , *(wxTextAttrEx *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret2 =  ((wxRichTextCtrl_php*)_this)->GetUncombinedStyle((long int)_argLong0 , *(wxRichTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, GetVisibleLineForCaretPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxRichTextLine* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->GetVisibleLineForCaretPosition((long int)_argLong0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxRichTextLine_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxRichTextLine));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, HasCharacterAttributes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->HasCharacterAttributes(*(wxRichTextRange *) _ptrObj0 , *(wxTextAttrEx *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxRichTextCtrl_php*)_this)->HasCharacterAttributes(*(wxRichTextRange *) _ptrObj0 , *(wxRichTextAttr *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, HasParagraphAttributes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->HasParagraphAttributes(*(wxRichTextRange *) _ptrObj0 , *(wxTextAttrEx *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxRichTextCtrl_php*)_this)->HasParagraphAttributes(*(wxRichTextRange *) _ptrObj0 , *(wxRichTextAttr *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, HasSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->HasSelection();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, HitTest)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRichTextCtrl_php*)_this)->HitTest(*(wxPoint *) _ptrObj0 , (long int*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxRichTextCtrl_php*)_this)->HitTest(*(wxPoint *) _ptrObj0 , (long int*) _ptrObj1 , (long int*) _ptrObj2);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Init)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->Init();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, IsDefaultStyleShowing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->IsDefaultStyleShowing();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, IsEditable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->IsEditable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, IsFrozen)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->IsFrozen();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, IsModified)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->IsModified();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, IsMultiLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->IsMultiLine();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, IsPositionVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->IsPositionVisible((long int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, IsSelectionAligned)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "zl!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->IsSelectionAligned((wxTextAttrAlignment) _argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, IsSelectionBold)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->IsSelectionBold();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, IsSelectionItalics)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->IsSelectionItalics();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, IsSelectionUnderlined)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->IsSelectionUnderlined();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, IsSingleLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->IsSingleLine();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, KeyboardNavigate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->KeyboardNavigate((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, LayoutContent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->LayoutContent(_argBool0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->LayoutContent();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, LineBreak)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->LineBreak();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MarkDirty)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->MarkDirty();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveCaret)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveCaret((long int)_argLong0 , _argBool0);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveCaret((long int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveCaretBack)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->MoveCaretBack((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveCaretForward)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->MoveCaretForward((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveDown((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveDown((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveDown();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveEnd((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveEnd();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveHome)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveHome((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveHome();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveLeft)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveLeft((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveLeft((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveLeft();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveRight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveRight((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveRight((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveRight();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveToLineEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveToLineEnd((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveToLineEnd();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveToLineStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveToLineStart((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveToLineStart();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveToParagraphEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveToParagraphEnd((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveToParagraphEnd();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveToParagraphStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveToParagraphStart((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveToParagraphStart();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, MoveUp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveUp((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveUp((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->MoveUp();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Newline)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->Newline();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, PageDown)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->PageDown((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->PageDown((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->PageDown();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, PageUp)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->PageUp((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->PageUp((int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->PageUp();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, PaintBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->PaintBackground(*(wxDC *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Paste)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->Paste();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, PositionCaret)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->PositionCaret();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, PositionToXY)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!z!", &_argLong0 , &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxRichTextCtrl_php*)_this)->PositionToXY((long int)_argLong0 , (long int*) _ptrObj0 , (long int*) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, PromoteList)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!s!|l!l!", &_argLong0 , &_argObj0 , &_argStr0 , &_argStr0_len , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret0 =  ((wxRichTextCtrl_php*)_this)->PromoteList((int)_argLong0 , *(wxRichTextRange *) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong1 , (int)_argLong2);
					break;
				case 4:
					ret0 =  ((wxRichTextCtrl_php*)_this)->PromoteList((int)_argLong0 , *(wxRichTextRange *) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong1);
					break;
				case 3:
					ret0 =  ((wxRichTextCtrl_php*)_this)->PromoteList((int)_argLong0 , *(wxRichTextRange *) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Redo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->Redo();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Remove)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRichTextCtrl_php*)_this)->Remove((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, Replace)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxRichTextCtrl_php*)_this)->Replace((long int)_argLong0 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SelectAll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->SelectAll();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, ScrollIntoView)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->ScrollIntoView((long int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SelectNone)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextCtrl_php*)_this)->SelectNone();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetAndShowDefaultStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetAndShowDefaultStyle(*(wxRichTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetBasicStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetBasicStyle(*(wxTextAttrEx *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetBasicStyle(*(wxRichTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetCaretPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|b!", &_argLong0 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRichTextCtrl_php*)_this)->SetCaretPosition((long int)_argLong0 , _argBool0);
					break;
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetCaretPosition((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetDefaultStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextCtrl_php*)_this)->SetDefaultStyle(*(wxTextAttrEx *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxTextAttrEx))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxRichTextCtrl_php*)_this)->SetDefaultStyle(*(wxTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetDefaultStyleToCursorStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextCtrl_php*)_this)->SetDefaultStyleToCursorStyle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetDelayedLayoutThreshold)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextCtrl_php*)_this)->SetDelayedLayoutThreshold((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetListStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!|l!l!l!", &_argObj0 , &_argStr0 , &_argStr0_len , &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret0 =  ((wxRichTextCtrl_php*)_this)->SetListStyle(*(wxRichTextRange *) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 4:
					ret0 =  ((wxRichTextCtrl_php*)_this)->SetListStyle(*(wxRichTextRange *) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong0 , (int)_argLong1);
					break;
				case 3:
					ret0 =  ((wxRichTextCtrl_php*)_this)->SetListStyle(*(wxRichTextRange *) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 2:
					ret0 =  ((wxRichTextCtrl_php*)_this)->SetListStyle(*(wxRichTextRange *) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!", &_argLong0 , &_argLong1 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxTextAttrEx))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxRichTextCtrl_php*)_this)->SetStyle((long int)_argLong0 , (long int)_argLong1 , *(wxTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxRichTextCtrl_php*)_this)->SetStyle(*(wxRichTextRange *) _ptrObj0 , *(wxRichTextAttr *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!", &_argLong0 , &_argLong1 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret2 =  ((wxRichTextCtrl_php*)_this)->SetStyle((long int)_argLong0 , (long int)_argLong1 , *(wxTextAttrEx *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
PHP_METHOD(php_wxRichTextCtrl, SetStyleEx)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!|l!", &_argLong0 , &_argLong1 , &_argObj0 , &_argLong2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxRichTextCtrl_php*)_this)->SetStyleEx((long int)_argLong0 , (long int)_argLong1 , *(wxTextAttrEx *) _ptrObj0 , (int)_argLong2);
					break;
				case 3:
					ret0 =  ((wxRichTextCtrl_php*)_this)->SetStyleEx((long int)_argLong0 , (long int)_argLong1 , *(wxTextAttrEx *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|l!", &_argObj0 , &_argObj1 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxRichTextCtrl_php*)_this)->SetStyleEx(*(wxRichTextRange *) _ptrObj0 , *(wxTextAttrEx *) _ptrObj1 , (int)_argLong0);
					break;
				case 2:
					ret1 =  ((wxRichTextCtrl_php*)_this)->SetStyleEx(*(wxRichTextRange *) _ptrObj0 , *(wxTextAttrEx *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|l!", &_argObj0 , &_argObj1 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret2 =  ((wxRichTextCtrl_php*)_this)->SetStyleEx(*(wxRichTextRange *) _ptrObj0 , *(wxRichTextAttr *) _ptrObj1 , (int)_argLong0);
					break;
				case 2:
					ret2 =  ((wxRichTextCtrl_php*)_this)->SetStyleEx(*(wxRichTextRange *) _ptrObj0 , *(wxRichTextAttr *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
void php_wxTextAttr_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTextAttr, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxTextAttr_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTextAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTextAttr_php*) _this)->evnArray);
			array_init(((wxTextAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTextAttr_php*) _this)->phpObj);
			*((wxTextAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTextAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTextAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|z!z!zl!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					_this = new wxTextAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1 , *(wxFont *) _ptrObj2 , (wxTextAttrAlignment) _argLong0);
					break;
				case 4:
					_this = new wxTextAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1 , *(wxFont *) _ptrObj2 , (wxTextAttrAlignment) _argLong0);
					break;
				case 3:
					_this = new wxTextAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1 , *(wxFont *) _ptrObj2);
					break;
				case 2:
					_this = new wxTextAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				case 1:
					_this = new wxTextAttr_php(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTextAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTextAttr_php*) _this)->evnArray);
			array_init(((wxTextAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTextAttr_php*) _this)->phpObj);
			*((wxTextAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTextAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTextAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxTextAttrEx))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxTextAttr_php(*(wxTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTextAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTextAttr_php*) _this)->evnArray);
			array_init(((wxTextAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTextAttr_php*) _this)->phpObj);
			*((wxTextAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTextAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTextAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxTextAttr, GetAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTextAttr_php*)_this)->GetAlignment();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttr, GetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->GetBackgroundColour();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxTextAttr, GetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxFont ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->GetFont();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxFont_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxFont));return;			
		}
	}
}
PHP_METHOD(php_wxTextAttr, GetLeftIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->GetLeftIndent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttr, GetLeftSubIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->GetLeftSubIndent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttr, GetRightIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->GetRightIndent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttr, GetTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->GetTextColour();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxTextAttr, HasAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->HasAlignment();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttr, HasBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->HasBackgroundColour();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttr, HasFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->HasFont();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttr, HasLeftIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->HasLeftIndent();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttr, HasTabs)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->HasTabs();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttr, HasTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->HasTextColour();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttr, GetFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->GetFlags();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttr, IsDefault)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttr_php*)_this)->IsDefault();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttr, Merge)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxTextAttrEx))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxTextAttrEx))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxTextAttr ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxTextAttr_php*)_this)->Merge(*(wxTextAttr *) _ptrObj0 , *(wxTextAttr *) _ptrObj1);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxTextAttr),0);memcpy(ptr,&ret0,sizeof(wxTextAttr));object_init_ex(return_value,php_wxTextAttr_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxTextAttr));return;			
		}
	}
}
PHP_METHOD(php_wxTextAttr, SetAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "zl!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTextAttr_php*)_this)->SetAlignment((wxTextAttrAlignment) _argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttr, SetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttr_php*)_this)->SetBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttr, SetFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttr_php*)_this)->SetFlags((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttr, SetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTextAttr_php*)_this)->SetFont(*(wxFont *) _ptrObj0 , (long int)_argLong0);
					break;
				case 1:
					 ((wxTextAttr_php*)_this)->SetFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttr, SetLeftIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTextAttr_php*)_this)->SetLeftIndent((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					 ((wxTextAttr_php*)_this)->SetLeftIndent((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttr, SetRightIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttr_php*)_this)->SetRightIndent((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttr, SetTabs)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttr_php*)_this)->SetTabs(*(wxArrayInt *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttr, SetTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttr_php*)_this)->SetTextColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxTextAttrEx_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTextAttrEx, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxTextAttrEx))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxTextAttrEx_php(*(wxTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTextAttrEx);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTextAttrEx_php*) _this)->evnArray);
			array_init(((wxTextAttrEx_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTextAttrEx_php*) _this)->phpObj);
			*((wxTextAttrEx_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTextAttrEx_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTextAttrEx_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxTextAttrEx_php(*(wxTextAttrEx *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTextAttrEx);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTextAttrEx_php*) _this)->evnArray);
			array_init(((wxTextAttrEx_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTextAttrEx_php*) _this)->phpObj);
			*((wxTextAttrEx_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTextAttrEx_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTextAttrEx_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxTextAttrEx_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxTextAttrEx);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxTextAttrEx_php*) _this)->evnArray);
			array_init(((wxTextAttrEx_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxTextAttrEx_php*) _this)->phpObj);
			*((wxTextAttrEx_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxTextAttrEx_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxTextAttrEx_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetBulletFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetBulletFont();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetBulletName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetBulletName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetBulletNumber)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetBulletNumber();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetBulletStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetBulletStyle();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetBulletText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetBulletText();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetCharacterStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetCharacterStyleName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetLineSpacing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetLineSpacing();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetListStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetListStyleName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetOutlineLevel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetOutlineLevel();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetParagraphSpacingAfter)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetParagraphSpacingAfter();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetParagraphSpacingBefore)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetParagraphSpacingBefore();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetParagraphStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetParagraphStyleName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetTextEffectFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetTextEffectFlags();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetTextEffects)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetTextEffects();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, GetURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->GetURL();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasBulletName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasBulletName();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasBulletNumber)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasBulletNumber();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasBulletStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasBulletStyle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasBulletText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasBulletText();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasCharacterStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasCharacterStyleName();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasOutlineLevel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasOutlineLevel();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasPageBreak)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasPageBreak();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasParagraphSpacingAfter)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasParagraphSpacingAfter();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasParagraphSpacingBefore)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasParagraphSpacingBefore();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasParagraphStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasParagraphStyleName();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasTextEffects)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasTextEffects();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, HasURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->HasURL();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, Init)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTextAttrEx_php*)_this)->Init();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, IsCharacterStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->IsCharacterStyle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, IsDefault)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->IsDefault();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, IsParagraphStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextAttrEx_php*)_this)->IsParagraphStyle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetBulletFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetBulletFont(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetBulletName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetBulletName(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetBulletNumber)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetBulletNumber((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetBulletStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetBulletStyle((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetBulletText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetBulletText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetCharacterStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetCharacterStyleName(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetLineSpacing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetLineSpacing((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetListStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetListStyleName(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetOutlineLevel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetOutlineLevel((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetPageBreak)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetPageBreak(_argBool0);
					break;
				case 0:
					 ((wxTextAttrEx_php*)_this)->SetPageBreak();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetParagraphSpacingAfter)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetParagraphSpacingAfter((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetParagraphSpacingBefore)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetParagraphSpacingBefore((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetParagraphStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetParagraphStyleName(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetTextEffectFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetTextEffectFlags((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetTextEffects)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetTextEffects((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextAttrEx, SetURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxTextAttrEx_php*)_this)->SetURL(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxRichTextRange_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxRichTextRange, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxRichTextRange_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRichTextRange);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRichTextRange_php*) _this)->evnArray);
			array_init(((wxRichTextRange_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRichTextRange_php*) _this)->phpObj);
			*((wxRichTextRange_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRichTextRange_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRichTextRange_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxRichTextRange_php((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRichTextRange);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRichTextRange_php*) _this)->evnArray);
			array_init(((wxRichTextRange_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRichTextRange_php*) _this)->phpObj);
			*((wxRichTextRange_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRichTextRange_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRichTextRange_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxRichTextRange_php(*(wxRichTextRange *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRichTextRange);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRichTextRange_php*) _this)->evnArray);
			array_init(((wxRichTextRange_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRichTextRange_php*) _this)->phpObj);
			*((wxRichTextRange_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRichTextRange_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRichTextRange_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, ToInternal)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxRichTextRange ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextRange_php*)_this)->ToInternal();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxRichTextRange),0);memcpy(ptr,&ret0,sizeof(wxRichTextRange));object_init_ex(return_value,php_wxRichTextRange_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRichTextRange));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, Swap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextRange_php*)_this)->Swap();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, SetStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextRange_php*)_this)->SetStart((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, SetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRichTextRange_php*)_this)->SetRange((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, SetEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextRange_php*)_this)->SetEnd((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, LimitTo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextRange_php*)_this)->LimitTo(*(wxRichTextRange *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, IsWithin)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextRange_php*)_this)->IsWithin(*(wxRichTextRange *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, IsOutside)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextRange_php*)_this)->IsOutside(*(wxRichTextRange *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, GetStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextRange_php*)_this)->GetStart();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, GetLength)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextRange_php*)_this)->GetLength();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, GetEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextRange_php*)_this)->GetEnd();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, FromInternal)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxRichTextRange ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextRange_php*)_this)->FromInternal();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxRichTextRange),0);memcpy(ptr,&ret0,sizeof(wxRichTextRange));object_init_ex(return_value,php_wxRichTextRange_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRichTextRange));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextRange, Contains)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextRange_php*)_this)->Contains((long int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxRichTextAttr_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxRichTextAttr, Apply)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextAttr_php*)_this)->Apply(*(wxRichTextAttr *) _ptrObj0 , (wxRichTextAttr*) _ptrObj1);
					break;
				case 1:
					ret0 =  ((wxRichTextAttr_php*)_this)->Apply(*(wxRichTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextAttr_php*)_this)->GetAlignment();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetBackgroundColour();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetBulletFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetBulletFont();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetBulletName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetBulletName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetBulletNumber)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetBulletNumber();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetBulletStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetBulletStyle();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetBulletText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetBulletText();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetCharacterStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetCharacterStyleName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetFlags();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetFontAttributes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetFontAttributes(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetFontFaceName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetFontFaceName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetFontSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetFontSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetFontStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetFontStyle();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetFontUnderlined)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetFontUnderlined();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetFontWeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetFontWeight();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetLeftIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetLeftIndent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetLeftSubIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetLeftSubIndent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, Combine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxRichTextAttr ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxRichTextAttr_php*)_this)->Combine(*(wxRichTextAttr *) _ptrObj0 , (wxRichTextAttr*) _ptrObj1);
					break;
				case 1:
					ret0 =  ((wxRichTextAttr_php*)_this)->Combine(*(wxRichTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxRichTextAttr),0);memcpy(ptr,&ret0,sizeof(wxRichTextAttr));object_init_ex(return_value,php_wxRichTextAttr_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRichTextAttr));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, CreateFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxFont ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->CreateFont();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxFont),0);memcpy(ptr,&ret0,sizeof(wxFont));object_init_ex(return_value,php_wxFont_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxFont));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetLineSpacing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetLineSpacing();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetListStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetListStyleName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetOutlineLevel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetOutlineLevel();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetParagraphSpacingAfter)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetParagraphSpacingAfter();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetParagraphSpacingBefore)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetParagraphSpacingBefore();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetParagraphStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetParagraphStyleName();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetRightIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetRightIndent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetTextColour();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetTextEffectFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetTextEffectFlags();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetTextEffects)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetTextEffects();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, GetURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->GetURL();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasAlignment();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasBackgroundColour();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasBulletName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasBulletName();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasBulletNumber)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasBulletNumber();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasBulletStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasBulletStyle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasBulletText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasBulletText();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasCharacterStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasCharacterStyleName();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasFlag)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasFlag((long int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasFont();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasFontFaceName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasFontFaceName();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasFontItalic)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasFontItalic();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasFontSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasFontSize();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasFontUnderlined)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasFontUnderlined();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasFontWeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasFontWeight();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasLeftIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasLeftIndent();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasLineSpacing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasLineSpacing();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasListStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasListStyleName();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasOutlineLevel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasOutlineLevel();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasPageBreak)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasPageBreak();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasParagraphSpacingAfter)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasParagraphSpacingAfter();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasParagraphSpacingBefore)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasParagraphSpacingBefore();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasParagraphStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasParagraphStyleName();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasRightIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasRightIndent();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasTabs)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasTabs();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasTextColour();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasTextEffects)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasTextEffects();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, HasURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->HasURL();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, IsCharacterStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->IsCharacterStyle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, IsDefault)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->IsDefault();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, IsParagraphStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextAttr_php*)_this)->IsParagraphStyle();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "zl!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRichTextAttr_php*)_this)->SetAlignment((wxTextAttrAlignment) _argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetBulletFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetBulletFont(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetBulletName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetBulletName(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetBulletNumber)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetBulletNumber((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetBulletStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetBulletStyle((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetBulletText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetBulletText(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetCharacterStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetCharacterStyleName(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetFlags((long int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetFontFaceName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetFontFaceName(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetFontSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetFontSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetFontStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetFontStyle((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetFontUnderlined)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetFontUnderlined(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetFontWeight)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetFontWeight((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetLeftIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRichTextAttr_php*)_this)->SetLeftIndent((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetLeftIndent((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetLineSpacing)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetLineSpacing((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetListStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetListStyleName(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetOutlineLevel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetOutlineLevel((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetPageBreak)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetPageBreak(_argBool0);
					break;
				case 0:
					 ((wxRichTextAttr_php*)_this)->SetPageBreak();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetParagraphSpacingAfter)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetParagraphSpacingAfter((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetParagraphSpacingBefore)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetParagraphSpacingBefore((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetParagraphStyleName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetParagraphStyleName(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetRightIndent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetRightIndent((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetTabs)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetTabs(*(wxArrayInt *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetTextColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetTextEffectFlags)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetTextEffectFlags((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetTextEffects)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetTextEffects((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, SetURL)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextAttr_php*)_this)->SetURL(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextAttr, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxRichTextAttr_php(*(wxTextAttrEx *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRichTextAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRichTextAttr_php*) _this)->evnArray);
			array_init(((wxRichTextAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRichTextAttr_php*) _this)->phpObj);
			*((wxRichTextAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRichTextAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRichTextAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxRichTextAttr_php(*(wxRichTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRichTextAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRichTextAttr_php*) _this)->evnArray);
			array_init(((wxRichTextAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRichTextAttr_php*) _this)->phpObj);
			*((wxRichTextAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRichTextAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRichTextAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxRichTextAttr_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRichTextAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRichTextAttr_php*) _this)->evnArray);
			array_init(((wxRichTextAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRichTextAttr_php*) _this)->phpObj);
			*((wxRichTextAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRichTextAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRichTextAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|z!zl!", &_argObj0 , &_argObj1 , &_argObj2 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					_this = new wxRichTextAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1 , (wxTextAttrAlignment) _argLong0);
					break;
				case 3:
					_this = new wxRichTextAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1 , (wxTextAttrAlignment) _argLong0);
					break;
				case 2:
					_this = new wxRichTextAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				case 1:
					_this = new wxRichTextAttr_php(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRichTextAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRichTextAttr_php*) _this)->evnArray);
			array_init(((wxRichTextAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRichTextAttr_php*) _this)->phpObj);
			*((wxRichTextAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRichTextAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRichTextAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxCommandProcessor_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxCommandProcessor, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxCommandProcessor_php((int)_argLong0);
					break;
				case 0:
					_this = new wxCommandProcessor_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxCommandProcessor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxCommandProcessor_php*) _this)->evnArray);
			array_init(((wxCommandProcessor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxCommandProcessor_php*) _this)->phpObj);
			*((wxCommandProcessor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxCommandProcessor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxCommandProcessor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, wxCreateObject)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxObject* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandProcessor_php*)_this)->wxCreateObject();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxObject_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxObject));return;			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, CanUndo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandProcessor_php*)_this)->CanUndo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, ClearCommands)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxCommandProcessor_php*)_this)->ClearCommands();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, Redo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandProcessor_php*)_this)->Redo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, GetMaxCommands)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandProcessor_php*)_this)->GetMaxCommands();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, GetEditMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxMenu* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandProcessor_php*)_this)->GetEditMenu();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenu_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenu));return;			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, GetRedoAccelerator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandProcessor_php*)_this)->GetRedoAccelerator();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, GetRedoMenuLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandProcessor_php*)_this)->GetRedoMenuLabel();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, GetUndoAccelerator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandProcessor_php*)_this)->GetUndoAccelerator();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, GetUndoMenuLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandProcessor_php*)_this)->GetUndoMenuLabel();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, Initialize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxCommandProcessor_php*)_this)->Initialize();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, IsDirty)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCommandProcessor_php*)_this)->IsDirty();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, MarkAsSaved)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxCommandProcessor_php*)_this)->MarkAsSaved();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, SetEditMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCommandProcessor_php*)_this)->SetEditMenu((wxMenu*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, SetMenuStrings)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxCommandProcessor_php*)_this)->SetMenuStrings();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, SetRedoAccelerator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCommandProcessor_php*)_this)->SetRedoAccelerator(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, SetUndoAccelerator)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxCommandProcessor_php*)_this)->SetUndoAccelerator(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCommandProcessor, Submit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxCommandProcessor_php*)_this)->Submit((wxCommand*) _ptrObj0 , _argBool0);
					break;
				case 1:
					ret0 =  ((wxCommandProcessor_php*)_this)->Submit((wxCommand*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxRichTextLine_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxRichTextLine, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxRichTextLine_php(*(wxRichTextLine *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRichTextLine);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRichTextLine_php*) _this)->evnArray);
			array_init(((wxRichTextLine_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRichTextLine_php*) _this)->phpObj);
			*((wxRichTextLine_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRichTextLine_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRichTextLine_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxRichTextLine_php((wxRichTextParagraph*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRichTextLine);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRichTextLine_php*) _this)->evnArray);
			array_init(((wxRichTextLine_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRichTextLine_php*) _this)->phpObj);
			*((wxRichTextLine_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRichTextLine_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRichTextLine_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, SetSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextLine_php*)_this)->SetSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, SetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRichTextLine_php*)_this)->SetRange((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextLine_php*)_this)->SetRange(*(wxRichTextRange *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, SetPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextLine_php*)_this)->SetPosition(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, SetDescent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextLine_php*)_this)->SetDescent((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, Init)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextLine_php*)_this)->Init((wxRichTextParagraph*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, GetSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextLine_php*)_this)->GetSize();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, GetRect)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxRect ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextLine_php*)_this)->GetRect();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxRect),0);memcpy(ptr,&ret0,sizeof(wxRect));object_init_ex(return_value,php_wxRect_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRect));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, GetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRichTextLine_php*)_this)->GetRange();
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxRichTextRange ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret1 =  ((wxRichTextLine_php*)_this)->GetRange();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxRichTextRange_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret1, le_wxRichTextRange));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, GetPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextLine_php*)_this)->GetPosition();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxPoint),0);memcpy(ptr,&ret0,sizeof(wxPoint));object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, GetDescent)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextLine_php*)_this)->GetDescent();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, GetAbsoluteRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxRichTextRange ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextLine_php*)_this)->GetAbsoluteRange();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxRichTextRange),0);memcpy(ptr,&ret0,sizeof(wxRichTextRange));object_init_ex(return_value,php_wxRichTextRange_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRichTextRange));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, GetAbsolutePosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextLine_php*)_this)->GetAbsolutePosition();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxPoint),0);memcpy(ptr,&ret0,sizeof(wxPoint));object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, Copy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRichTextLine_php*)_this)->Copy(*(wxRichTextLine *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRichTextLine, Clone)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxRichTextLine* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRichTextLine_php*)_this)->Clone();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxRichTextLine_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxRichTextLine));return;			
		}
	}
}
void php_wxGridCellCoords_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridCellCoords, GetCol)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellCoords_php*)_this)->GetCol();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGridCellCoords, GetRow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellCoords_php*)_this)->GetRow();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGridCellCoords, Set)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridCellCoords_php*)_this)->Set((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellCoords, SetCol)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellCoords_php*)_this)->SetCol((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellCoords, SetRow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellCoords_php*)_this)->SetRow((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellCoords, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxGridCellCoords_php(*(wxGridCellCoords *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellCoords);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellCoords_php*) _this)->evnArray);
			array_init(((wxGridCellCoords_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellCoords_php*) _this)->phpObj);
			*((wxGridCellCoords_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellCoords_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellCoords_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxGridCellCoords_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellCoords);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellCoords_php*) _this)->evnArray);
			array_init(((wxGridCellCoords_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellCoords_php*) _this)->phpObj);
			*((wxGridCellCoords_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellCoords_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellCoords_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxGridCellCoords_php((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellCoords);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellCoords_php*) _this)->evnArray);
			array_init(((wxGridCellCoords_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellCoords_php*) _this)->phpObj);
			*((wxGridCellCoords_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellCoords_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellCoords_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxGridCellAttr_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridCellAttr, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|z!", &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxGridCellAttr_php((wxGridCellAttr*) _ptrObj0);
					break;
				case 0:
					_this = new wxGridCellAttr_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellAttr_php*) _this)->evnArray);
			array_init(((wxGridCellAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellAttr_php*) _this)->phpObj);
			*((wxGridCellAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!l!l!", &_argObj0 , &_argObj1 , &_argObj2 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					_this = new wxGridCellAttr_php(*(wxColour *) _ptrObj0 , *(wxColour *) _ptrObj1 , *(wxFont *) _ptrObj2 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellAttr);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellAttr_php*) _this)->evnArray);
			array_init(((wxGridCellAttr_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellAttr_php*) _this)->phpObj);
			*((wxGridCellAttr_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellAttr_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellAttr_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, Clone)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxGridCellAttr* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellAttr_php*)_this)->Clone();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGridCellAttr_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGridCellAttr));return;			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, DecRef)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGridCellAttr_php*)_this)->DecRef();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, SetEditor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxGridCellFloatEditor && rsrc_type != le_wxGridCellBoolEditor && rsrc_type != le_wxGridCellChoiceEditor && rsrc_type != le_wxGridCellNumberEditor && rsrc_type != le_wxGridCellTextEditor))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellAttr_php*)_this)->SetEditor((wxGridCellEditor*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, SetDefAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellAttr_php*)_this)->SetDefAttr((wxGridCellAttr*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, IsReadOnly)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellAttr_php*)_this)->IsReadOnly();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, IncRef)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGridCellAttr_php*)_this)->IncRef();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, HasTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellAttr_php*)_this)->HasTextColour();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, HasRenderer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellAttr_php*)_this)->HasRenderer();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, HasAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellAttr_php*)_this)->HasAlignment();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, GetAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridCellAttr_php*)_this)->GetAlignment((int*) _ptrObj0 , (int*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, GetRenderer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!", &_argObj0 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxGridCellRenderer* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxGridCellAttr_php*)_this)->GetRenderer((wxGrid*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGridCellRenderer_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGridCellRenderer));return;			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, GetEditor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!", &_argObj0 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxGridCellEditor* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxGridCellAttr_php*)_this)->GetEditor((wxGrid*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGridCellEditor_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGridCellEditor));return;			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, GetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxFont ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellAttr_php*)_this)->GetFont();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxFont_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxFont));return;			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, GetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxColour ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellAttr_php*)_this)->GetBackgroundColour();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxColour_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxColour));return;			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, HasBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellAttr_php*)_this)->HasBackgroundColour();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, HasFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellAttr_php*)_this)->HasFont();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, HasEditor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellAttr_php*)_this)->HasEditor();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, SetAlignment)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridCellAttr_php*)_this)->SetAlignment((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, SetBackgroundColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellAttr_php*)_this)->SetBackgroundColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, SetFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellAttr_php*)_this)->SetFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, SetReadOnly)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellAttr_php*)_this)->SetReadOnly(_argBool0);
					break;
				case 0:
					 ((wxGridCellAttr_php*)_this)->SetReadOnly();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, SetRenderer)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellAttr_php*)_this)->SetRenderer((wxGridCellRenderer*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttr, SetTextColour)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellAttr_php*)_this)->SetTextColour(*(wxColour *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxGridCellRenderer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
void wxGridCellRenderer_php::Draw(wxGrid& arg0 , wxGridCellAttr& arg1 , wxDC& arg2 , const wxRect& arg3 , int arg4 , int arg5 , bool arg6){
	zval *args[7];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Draw", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) &arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,(const long int) &arg3);
	args[3]= &argLng3;
		zval argLng4;
	ZVAL_LONG(&argLng4,arg4);
	args[4]= &argLng4;
		zval argLng5;
	ZVAL_LONG(&argLng5,arg5);
	args[5]= &argLng5;
		zval argLng6;
	ZVAL_LONG(&argLng6,arg6);
	args[6]= &argLng6;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 7, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxGridCellRenderer, Draw)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!z!l!l!b!", &_argObj0 , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong0 , &_argLong1 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					 ((wxGridCellRenderer_php*)_this)->Draw(*(wxGrid *) _ptrObj0 , *(wxGridCellAttr *) _ptrObj1 , *(wxDC *) _ptrObj2 , *(wxRect *) _ptrObj3 , (int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
wxSize wxGridCellRenderer_php::GetBestSize(wxGrid& arg0 , wxGridCellAttr& arg1 , wxDC& arg2 , int arg3 , int arg4){
	zval *args[5];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetBestSize", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) &arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(long int) &arg2);
	args[2]= &argLng2;
		zval argLng3;
	ZVAL_LONG(&argLng3,arg3);
	args[3]= &argLng3;
		zval argLng4;
	ZVAL_LONG(&argLng4,arg4);
	args[4]= &argLng4;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 5, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		wxSize* return_var = (wxSize*) zend_object_store_get_object(&retval TSRMLS_CC);return *return_var;	}
	}
PHP_METHOD(php_wxGridCellRenderer, GetBestSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!l!l!", &_argObj0 , &_argObj1 , &_argObj2 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret0 =  ((wxGridCellRenderer_php*)_this)->GetBestSize(*(wxGrid *) _ptrObj0 , *(wxGridCellAttr *) _ptrObj1 , *(wxDC *) _ptrObj2 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxGridCellRenderer, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxGridCellRenderer_php(*(wxGridCellRenderer *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellRenderer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellRenderer_php*) _this)->evnArray);
			array_init(((wxGridCellRenderer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellRenderer_php*) _this)->phpObj);
			*((wxGridCellRenderer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellRenderer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellRenderer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxGridCellRenderer_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellRenderer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellRenderer_php*) _this)->evnArray);
			array_init(((wxGridCellRenderer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellRenderer_php*) _this)->phpObj);
			*((wxGridCellRenderer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellRenderer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellRenderer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
wxGridCellRenderer* wxGridCellRenderer_php::Clone() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Clone", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return (wxGridCellRenderer*) zend_object_store_get_object(&retval TSRMLS_CC);	}
	}
PHP_METHOD(php_wxGridCellRenderer, Clone)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxGridCellRenderer* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellRenderer_php*)_this)->Clone();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGridCellRenderer_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGridCellRenderer));return;			
		}
	}
}
void php_wxGridCellWorker_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridCellWorker, DecRef)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGridCellWorker_php*)_this)->DecRef();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellWorker, IncRef)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGridCellWorker_php*)_this)->IncRef();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellWorker, SetParameters)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellWorker_php*)_this)->SetParameters(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellWorker, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxGridCellRenderer && rsrc_type != le_wxGridCellEditor && rsrc_type != le_wxGridCellFloatEditor && rsrc_type != le_wxGridCellBoolEditor && rsrc_type != le_wxGridCellChoiceEditor && rsrc_type != le_wxGridCellNumberEditor && rsrc_type != le_wxGridCellTextEditor))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxGridCellWorker_php(*(wxGridCellWorker *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellWorker);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellWorker_php*) _this)->evnArray);
			array_init(((wxGridCellWorker_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellWorker_php*) _this)->phpObj);
			*((wxGridCellWorker_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellWorker_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellWorker_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxGridCellWorker_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellWorker);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellWorker_php*) _this)->evnArray);
			array_init(((wxGridCellWorker_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellWorker_php*) _this)->phpObj);
			*((wxGridCellWorker_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellWorker_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellWorker_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxRegion_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxRegion, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxRegion_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRegion);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->evnArray);
			array_init(((wxRegion_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->phpObj);
			*((wxRegion_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRegion_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRegion_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					_this = new wxRegion_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRegion);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->evnArray);
			array_init(((wxRegion_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->phpObj);
			*((wxRegion_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRegion_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRegion_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxRegion_php(*(wxPoint *) _ptrObj0 , *(wxPoint *) _ptrObj1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRegion);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->evnArray);
			array_init(((wxRegion_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->phpObj);
			*((wxRegion_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRegion_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRegion_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxRegion_php(*(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRegion);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->evnArray);
			array_init(((wxRegion_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->phpObj);
			*((wxRegion_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRegion_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRegion_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxRegion_php(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRegion);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->evnArray);
			array_init(((wxRegion_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->phpObj);
			*((wxRegion_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRegion_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRegion_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|l!", &_argObj0 , &_argObj1 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxRegion_php(*(wxBitmap *) _ptrObj0 , *(wxColour *) _ptrObj1 , (int)_argLong0);
					break;
				case 2:
					_this = new wxRegion_php(*(wxBitmap *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRegion);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->evnArray);
			array_init(((wxRegion_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->phpObj);
			*((wxRegion_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRegion_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRegion_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!|l!", &_argLong0 , &_argObj0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxRegion_php((long unsigned int)_argLong0 , (wxPoint*) _ptrObj0 , (int)_argLong1);
					break;
				case 2:
					_this = new wxRegion_php((long unsigned int)_argLong0 , (wxPoint*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRegion);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->evnArray);
			array_init(((wxRegion_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->phpObj);
			*((wxRegion_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRegion_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRegion_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxRegion_php(*(wxRegion *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxRegion);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->evnArray);
			array_init(((wxRegion_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxRegion_php*) _this)->phpObj);
			*((wxRegion_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxRegion_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxRegion_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxRegion, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxRegion_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRegion, IsEmpty)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRegion_php*)_this)->IsEmpty();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxRegionBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxRegionBase, Contains)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRegionBase_php*)_this)->Contains(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxRegionBase_php*)_this)->Contains((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRegionBase_php*)_this)->Contains((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRegionBase, ConvertToBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRegionBase_php*)_this)->ConvertToBitmap();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxBitmap),0);memcpy(ptr,&ret0,sizeof(wxBitmap));object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxBitmap));return;			
		}
	}
}
PHP_METHOD(php_wxRegionBase, Intersect)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxRegionBase_php*)_this)->Intersect((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxRegionBase_php*)_this)->Intersect(*(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret2 =  ((wxRegionBase_php*)_this)->Intersect(*(wxRegion *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
PHP_METHOD(php_wxRegionBase, IsEqual)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRegionBase_php*)_this)->IsEqual(*(wxRegion *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRegionBase, Subtract)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRegionBase_php*)_this)->Subtract(*(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxRegionBase_php*)_this)->Subtract(*(wxRegion *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxRegionBase, Offset)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRegionBase_php*)_this)->Offset(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxRegionBase, Union)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRegionBase_php*)_this)->Union(*(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxRegionBase_php*)_this)->Union(*(wxRegion *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret2 =  ((wxRegionBase_php*)_this)->Union(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|l!", &_argObj0 , &_argObj1 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret3;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret3 =  ((wxRegionBase_php*)_this)->Union(*(wxBitmap *) _ptrObj0 , *(wxColour *) _ptrObj1 , (int)_argLong0);
					break;
				case 2:
					ret3 =  ((wxRegionBase_php*)_this)->Union(*(wxBitmap *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret3)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret4;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret4 =  ((wxRegionBase_php*)_this)->Union((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret4)			
		}
	}
}
PHP_METHOD(php_wxRegionBase, Xor)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxRegionBase_php*)_this)->Xor((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxRegionBase_php*)_this)->Xor(*(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret2 =  ((wxRegionBase_php*)_this)->Xor(*(wxRegion *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
void php_wxGridCellEditor_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridCellEditor, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxGridCellEditor_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellEditor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellEditor_php*) _this)->evnArray);
			array_init(((wxGridCellEditor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellEditor_php*) _this)->phpObj);
			*((wxGridCellEditor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellEditor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellEditor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxGridCellEditor, IsCreated)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellEditor_php*)_this)->IsCreated();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void wxGridCellEditor_php::Create(wxWindow* arg0 , int arg1 , wxEvtHandler* arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Create", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(long int) arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxGridCellEditor, Create)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!z!", &_argObj0 , &_argLong0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxWindow && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook && rsrc_type != le_wxMenu && rsrc_type != le_wxMenuBar && rsrc_type != le_wxValidator && rsrc_type != le_wxRadioBox && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxRichTextCtrl))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGridCellEditor_php*)_this)->Create((wxWindow*) _ptrObj0 , (int)_argLong0 , (wxEvtHandler*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellEditor, SetSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellEditor_php*)_this)->SetSize(*(wxRect *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellEditor, Show)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!|z!", &_argBool0 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridCellEditor_php*)_this)->Show(_argBool0 , (wxGridCellAttr*) _ptrObj0);
					break;
				case 1:
					 ((wxGridCellEditor_php*)_this)->Show(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellEditor, PaintBackground)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridCellEditor_php*)_this)->PaintBackground(*(wxRect *) _ptrObj0 , (wxGridCellAttr*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxGridCellEditor_php::BeginEdit(int arg0 , int arg1 , wxGrid* arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "BeginEdit", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(long int) arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxGridCellEditor, BeginEdit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!", &_argLong0 , &_argLong1 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGridCellEditor_php*)_this)->BeginEdit((int)_argLong0 , (int)_argLong1 , (wxGrid*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
bool wxGridCellEditor_php::EndEdit(int arg0 , int arg1 , wxGrid* arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "EndEdit", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(long int) arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxGridCellEditor, EndEdit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!", &_argLong0 , &_argLong1 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxGridCellEditor_php*)_this)->EndEdit((int)_argLong0 , (int)_argLong1 , (wxGrid*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void wxGridCellEditor_php::Reset(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Reset", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxGridCellEditor, Reset)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGridCellEditor_php*)_this)->Reset();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellEditor, StartingKey)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellEditor_php*)_this)->StartingKey(*(wxKeyEvent *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellEditor, StartingClick)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGridCellEditor_php*)_this)->StartingClick();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellEditor, HandleReturn)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellEditor_php*)_this)->HandleReturn(*(wxKeyEvent *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellEditor, Destroy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGridCellEditor_php*)_this)->Destroy();
					break;
				default:
					break;
			}
			
		}
	}
}
wxGridCellEditor* wxGridCellEditor_php::Clone() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Clone", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return (wxGridCellEditor*) zend_object_store_get_object(&retval TSRMLS_CC);	}
	}
PHP_METHOD(php_wxGridCellEditor, Clone)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxGridCellEditor* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellEditor_php*)_this)->Clone();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGridCellEditor_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGridCellEditor));return;			
		}
	}
}
wxString wxGridCellEditor_php::GetValue() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetValue", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return wxString(Z_STRVAL(retval),wxConvUTF8);	}
	}
PHP_METHOD(php_wxGridCellEditor, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellEditor_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxGridCellEditor, GetCellAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxGridCellAttr* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellEditor_php*)_this)->GetCellAttr();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGridCellAttr_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGridCellAttr));return;			
		}
	}
}
void php_wxGridTableBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridTableBase, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxGridTableBase_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridTableBase);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridTableBase_php*) _this)->evnArray);
			array_init(((wxGridTableBase_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridTableBase_php*) _this)->phpObj);
			*((wxGridTableBase_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridTableBase_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridTableBase_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
int wxGridTableBase_php::GetNumberRows(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetNumberRows", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxGridTableBase, GetNumberRows)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridTableBase_php*)_this)->GetNumberRows();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
int wxGridTableBase_php::GetNumberCols(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetNumberCols", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxGridTableBase, GetNumberCols)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridTableBase_php*)_this)->GetNumberCols();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
bool wxGridTableBase_php::IsEmptyCell(int arg0 , int arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "IsEmptyCell", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxGridTableBase, IsEmptyCell)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridTableBase_php*)_this)->IsEmptyCell((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
wxString wxGridTableBase_php::GetValue(int arg0 , int arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetValue", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return wxString(Z_STRVAL(retval),wxConvUTF8);	}
	}
PHP_METHOD(php_wxGridTableBase, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridTableBase_php*)_this)->GetValue((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
void wxGridTableBase_php::SetValue(int arg0 , int arg1 , const wxString& arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetValue", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxGridTableBase, SetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGridTableBase_php*)_this)->SetValue((int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, GetTypeName)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridTableBase_php*)_this)->GetTypeName((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, CanGetValueAs)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxGridTableBase_php*)_this)->CanGetValueAs((int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, CanSetValueAs)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxGridTableBase_php*)_this)->CanSetValueAs((int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, GetValueAsLong)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridTableBase_php*)_this)->GetValueAsLong((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, GetValueAsDouble)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridTableBase_php*)_this)->GetValueAsDouble((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, GetValueAsBool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridTableBase_php*)_this)->GetValueAsBool((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, SetValueAsBool)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!b!", &_argLong0 , &_argLong1 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGridTableBase_php*)_this)->SetValueAsBool((int)_argLong0 , (int)_argLong1 , _argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, SetValueAsDouble)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGridTableBase_php*)_this)->SetValueAsDouble((int)_argLong0 , (int)_argLong1 , (double)_argLong2);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, SetValueAsLong)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGridTableBase_php*)_this)->SetValueAsLong((int)_argLong0 , (int)_argLong1 , (long int)_argLong2);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, SetValueAsCustom)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!z!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					 ((wxGridTableBase_php*)_this)->SetValueAsCustom((int)_argLong0 , (int)_argLong1 , wxString(_argStr0, wxConvUTF8) , (void*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, SetView)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridTableBase_php*)_this)->SetView((wxGrid*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, GetView)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxGrid* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridTableBase_php*)_this)->GetView();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGrid_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGrid));return;			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGridTableBase_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, InsertRows)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridTableBase_php*)_this)->InsertRows((long unsigned int)_argLong0 , (long unsigned int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxGridTableBase_php*)_this)->InsertRows((long unsigned int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGridTableBase_php*)_this)->InsertRows();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, AppendRows)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGridTableBase_php*)_this)->AppendRows((long unsigned int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGridTableBase_php*)_this)->AppendRows();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, DeleteRows)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridTableBase_php*)_this)->DeleteRows((long unsigned int)_argLong0 , (long unsigned int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxGridTableBase_php*)_this)->DeleteRows((long unsigned int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGridTableBase_php*)_this)->DeleteRows();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, InsertCols)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridTableBase_php*)_this)->InsertCols((long unsigned int)_argLong0 , (long unsigned int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxGridTableBase_php*)_this)->InsertCols((long unsigned int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGridTableBase_php*)_this)->InsertCols();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, AppendCols)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGridTableBase_php*)_this)->AppendCols((long unsigned int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGridTableBase_php*)_this)->AppendCols();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, DeleteCols)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridTableBase_php*)_this)->DeleteCols((long unsigned int)_argLong0 , (long unsigned int)_argLong1);
					break;
				case 1:
					ret0 =  ((wxGridTableBase_php*)_this)->DeleteCols((long unsigned int)_argLong0);
					break;
				case 0:
					ret0 =  ((wxGridTableBase_php*)_this)->DeleteCols();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, GetRowLabelValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGridTableBase_php*)_this)->GetRowLabelValue((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, GetColLabelValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGridTableBase_php*)_this)->GetColLabelValue((int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, SetAttrProvider)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridTableBase_php*)_this)->SetAttrProvider((wxGridCellAttrProvider*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, GetAttrProvider)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxGridCellAttrProvider* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridTableBase_php*)_this)->GetAttrProvider();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGridCellAttrProvider_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGridCellAttrProvider));return;			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, CanHaveAttributes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridTableBase_php*)_this)->CanHaveAttributes();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, GetAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!zl!", &_argLong0 , &_argLong1 , &_argObj0 , &_argLong2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxGridCellAttr* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxGridTableBase_php*)_this)->GetAttr((int)_argLong0 , (int)_argLong1 , (wxGridCellAttr::wxAttrKind) _argLong2);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGridCellAttr_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGridCellAttr));return;			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, SetAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!", &_argObj0 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGridTableBase_php*)_this)->SetAttr((wxGridCellAttr*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, SetRowAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridTableBase_php*)_this)->SetRowAttr((wxGridCellAttr*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridTableBase, SetColAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridTableBase_php*)_this)->SetColAttr((wxGridCellAttr*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxGridCellAttrProvider_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridCellAttrProvider, SetAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!", &_argObj0 , &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxGridCellAttrProvider_php*)_this)->SetAttr((wxGridCellAttr*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttrProvider, SetColAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridCellAttrProvider_php*)_this)->SetColAttr((wxGridCellAttr*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttrProvider, SetRowAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridCellAttrProvider_php*)_this)->SetRowAttr((wxGridCellAttr*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttrProvider, GetAttr)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!zl!", &_argLong0 , &_argLong1 , &_argObj0 , &_argLong2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxGridCellAttr* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxGridCellAttrProvider_php*)_this)->GetAttr((int)_argLong0 , (int)_argLong1 , (wxGridCellAttr::wxAttrKind) _argLong2);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGridCellAttr_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGridCellAttr));return;			
		}
	}
}
PHP_METHOD(php_wxGridCellAttrProvider, UpdateAttrCols)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridCellAttrProvider_php*)_this)->UpdateAttrCols((long unsigned int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttrProvider, UpdateAttrRows)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridCellAttrProvider_php*)_this)->UpdateAttrRows((long unsigned int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellAttrProvider, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxGridCellAttrProvider_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellAttrProvider);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellAttrProvider_php*) _this)->evnArray);
			array_init(((wxGridCellAttrProvider_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellAttrProvider_php*) _this)->phpObj);
			*((wxGridCellAttrProvider_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellAttrProvider_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellAttrProvider_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxSearchCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSearchCtrl, SetMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSearchCtrl_php*)_this)->SetMenu((wxMenu*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSearchCtrl, GetMenu)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxMenu* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSearchCtrl_php*)_this)->GetMenu();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxMenu_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxMenu));return;			
		}
	}
}
PHP_METHOD(php_wxSearchCtrl, ShowSearchButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSearchCtrl_php*)_this)->ShowSearchButton(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSearchCtrl, IsSearchButtonVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSearchCtrl_php*)_this)->IsSearchButtonVisible();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxSearchCtrl, ShowCancelButton)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSearchCtrl_php*)_this)->ShowCancelButton(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSearchCtrl, IsCancelButtonVisible)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSearchCtrl_php*)_this)->IsCancelButtonVisible();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxSearchCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|s!z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxSearchCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr1, wxConvUTF8));
					break;
				case 7:
					_this = new wxSearchCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 6:
					_this = new wxSearchCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxSearchCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxSearchCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxSearchCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxSearchCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxSearchCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxSearchCtrl_php*) _this)->evnArray);
			array_init(((wxSearchCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxSearchCtrl_php*) _this)->phpObj);
			*((wxSearchCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxSearchCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxSearchCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxColourPickerCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
void php_wxFontPickerCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxFontPickerCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	void *_ptrObj4 = 0;
	zval *_argObj4 = 0;
	int id_to_find4;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong1 , &_argObj4 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid && _argObj4)
		{
			if (_argObj4->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj4), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find4 = Z_RESVAL_P(*tmp);
				_ptrObj4 = zend_list_find(id_to_find4, &rsrc_type);
				if (!_ptrObj4 )
					valid = 0;
			}
			else if(_argObj4->type==IS_LONG)
				_ptrObj4= (void *)_argObj4->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxFontPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxFont *) _ptrObj1 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4 , wxString(_argStr0, wxConvUTF8));
					break;
				case 7:
					_this = new wxFontPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxFont *) _ptrObj1 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4);
					break;
				case 6:
					_this = new wxFontPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxFont *) _ptrObj1 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxFontPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxFont *) _ptrObj1 , *(wxPoint *) _ptrObj2 , *(wxSize *) _ptrObj3);
					break;
				case 4:
					_this = new wxFontPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxFont *) _ptrObj1 , *(wxPoint *) _ptrObj2);
					break;
				case 3:
					_this = new wxFontPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxFont *) _ptrObj1);
					break;
				case 2:
					_this = new wxFontPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxFontPickerCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxFontPickerCtrl_php*) _this)->evnArray);
			array_init(((wxFontPickerCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxFontPickerCtrl_php*) _this)->phpObj);
			*((wxFontPickerCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxFontPickerCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxFontPickerCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxFontPickerCtrl, GetSelectedFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxFont ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFontPickerCtrl_php*)_this)->GetSelectedFont();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxFont),0);memcpy(ptr,&ret0,sizeof(wxFont));object_init_ex(return_value,php_wxFont_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxFont));return;			
		}
	}
}
PHP_METHOD(php_wxFontPickerCtrl, GetMaxPointSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			unsigned int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFontPickerCtrl_php*)_this)->GetMaxPointSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxFontPickerCtrl, SetMaxPointSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFontPickerCtrl_php*)_this)->SetMaxPointSize((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxFontPickerCtrl, SetSelectedFont)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFontPickerCtrl_php*)_this)->SetSelectedFont(*(wxFont *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxFilePickerCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxFilePickerCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	char* _argStr3;
	int _argStr3_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|s!s!s!z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argStr2 , &_argStr2_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr3 , &_argStr3_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 10:
					_this = new wxFilePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr3, wxConvUTF8));
					break;
				case 9:
					_this = new wxFilePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 8:
					_this = new wxFilePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 7:
					_this = new wxFilePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 6:
					_this = new wxFilePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 5:
					_this = new wxFilePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , wxString(_argStr2, wxConvUTF8));
					break;
				case 4:
					_this = new wxFilePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 3:
					_this = new wxFilePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxFilePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxFilePickerCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxFilePickerCtrl_php*) _this)->evnArray);
			array_init(((wxFilePickerCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxFilePickerCtrl_php*) _this)->phpObj);
			*((wxFilePickerCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxFilePickerCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxFilePickerCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxFileDirPickerCtrlBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxFileDirPickerCtrlBase, GetPath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxFileDirPickerCtrlBase_php*)_this)->GetPath();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxFileDirPickerCtrlBase, SetPath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxFileDirPickerCtrlBase_php*)_this)->SetPath(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxDirPickerCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxDirPickerCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|s!s!z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr2 , &_argStr2_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 9:
					_this = new wxDirPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr2, wxConvUTF8));
					break;
				case 8:
					_this = new wxDirPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 7:
					_this = new wxDirPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 6:
					_this = new wxDirPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 5:
					_this = new wxDirPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 4:
					_this = new wxDirPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 3:
					_this = new wxDirPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxDirPickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxDirPickerCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxDirPickerCtrl_php*) _this)->evnArray);
			array_init(((wxDirPickerCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxDirPickerCtrl_php*) _this)->phpObj);
			*((wxDirPickerCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxDirPickerCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxDirPickerCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxDatePickerCtrlBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
void wxDatePickerCtrlBase_php::SetRange(const wxDateTime& arg0 , const wxDateTime& arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetRange", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(const long int) &arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(const long int) &arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxDatePickerCtrlBase, SetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxDatePickerCtrlBase_php*)_this)->SetRange(wxDateTime(_argLong0) , wxDateTime(_argLong1));
					break;
				default:
					break;
			}
			
		}
	}
}
wxDateTime wxDatePickerCtrlBase_php::GetValue() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetValue", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		wxDateTime* return_var = (wxDateTime*) zend_object_store_get_object(&retval TSRMLS_CC);return *return_var;	}
	}
PHP_METHOD(php_wxDatePickerCtrlBase, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxDateTime ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxDatePickerCtrlBase_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxDateTime),0);memcpy(ptr,&ret0,sizeof(wxDateTime));object_init_ex(return_value,php_wxDateTime_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxDateTime));return;			
		}
	}
}
void wxDatePickerCtrlBase_php::SetValue(const wxDateTime& arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "SetValue", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(const long int) &arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxDatePickerCtrlBase, SetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDatePickerCtrlBase_php*)_this)->SetValue(wxDateTime(_argLong0));
					break;
				default:
					break;
			}
			
		}
	}
}
bool wxDatePickerCtrlBase_php::GetRange(wxDateTime* arg0 , wxDateTime* arg1) const{
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetRange", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxDatePickerCtrlBase, GetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxDatePickerCtrlBase_php*)_this)->GetRange((wxDateTime*) _ptrObj0 , (wxDateTime*) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxDatePickerCtrlGeneric_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxDatePickerCtrlGeneric, SetFormat)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDatePickerCtrlGeneric_php*)_this)->SetFormat(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxDatePickerCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxDatePickerCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|l!z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argLong1 , &_argObj1 , &_argObj2 , &_argLong2 , &_argObj3 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 8:
					_this = new wxDatePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxDateTime(_argLong1) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong2 , *(wxValidator *) _ptrObj3 , wxString(_argStr0, wxConvUTF8));
					break;
				case 7:
					_this = new wxDatePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxDateTime(_argLong1) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong2 , *(wxValidator *) _ptrObj3);
					break;
				case 6:
					_this = new wxDatePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxDateTime(_argLong1) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong2);
					break;
				case 5:
					_this = new wxDatePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxDateTime(_argLong1) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxDatePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxDateTime(_argLong1) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxDatePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxDateTime(_argLong1));
					break;
				case 2:
					_this = new wxDatePickerCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxDatePickerCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxDatePickerCtrl_php*) _this)->evnArray);
			array_init(((wxDatePickerCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxDatePickerCtrl_php*) _this)->phpObj);
			*((wxDatePickerCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxDatePickerCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxDatePickerCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxScrollBar_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxScrollBar, GetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxScrollBar_php*)_this)->GetRange();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxScrollBar, GetPageSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxScrollBar_php*)_this)->GetPageSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxScrollBar, GetThumbPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxScrollBar_php*)_this)->GetThumbPosition();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxScrollBar, GetThumbSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxScrollBar_php*)_this)->GetThumbSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxScrollBar, SetThumbPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxScrollBar_php*)_this)->SetThumbPosition((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxScrollBar, SetScrollbar)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!|b!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					 ((wxScrollBar_php*)_this)->SetScrollbar((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , _argBool0);
					break;
				case 4:
					 ((wxScrollBar_php*)_this)->SetScrollbar((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxScrollBar, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argObj3 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxScrollBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3 , wxString(_argStr0, wxConvUTF8));
					break;
				case 6:
					_this = new wxScrollBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , *(wxValidator *) _ptrObj3);
					break;
				case 5:
					_this = new wxScrollBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxScrollBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxScrollBar_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxScrollBar_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxScrollBar);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxScrollBar_php*) _this)->evnArray);
			array_init(((wxScrollBar_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxScrollBar_php*) _this)->phpObj);
			*((wxScrollBar_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxScrollBar_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxScrollBar_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxSpinCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSpinCtrl, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSpinCtrl_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSpinCtrl, GetMin)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSpinCtrl_php*)_this)->GetMin();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSpinCtrl, GetMax)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSpinCtrl_php*)_this)->GetMax();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSpinCtrl, SetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSpinCtrl_php*)_this)->SetValue((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSpinCtrl_php*)_this)->SetValue(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSpinCtrl, SetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxSpinCtrl_php*)_this)->SetRange((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSpinCtrl, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxSpinCtrl_php*)_this)->SetSelection((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSpinCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!s!z!z!l!l!l!l!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argLong2 , &_argLong3 , &_argLong4 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 10:
					_this = new wxSpinCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4 , wxString(_argStr1, wxConvUTF8));
					break;
				case 9:
					_this = new wxSpinCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4);
					break;
				case 8:
					_this = new wxSpinCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				case 7:
					_this = new wxSpinCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , (int)_argLong2);
					break;
				case 6:
					_this = new wxSpinCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxSpinCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxSpinCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxSpinCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxSpinCtrl_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxSpinCtrl_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxSpinCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxSpinCtrl_php*) _this)->evnArray);
			array_init(((wxSpinCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxSpinCtrl_php*) _this)->phpObj);
			*((wxSpinCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxSpinCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxSpinCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxSpinButton_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSpinButton, GetMax)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSpinButton_php*)_this)->GetMax();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSpinButton, GetMin)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSpinButton_php*)_this)->GetMin();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSpinButton, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSpinButton_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSpinButton, SetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSpinButton_php*)_this)->SetValue((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSpinButton, SetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxSpinButton_php*)_this)->SetRange((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSpinButton, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxSpinButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxSpinButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxSpinButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxSpinButton_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxSpinButton_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxSpinButton_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxSpinButton);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxSpinButton_php*) _this)->evnArray);
			array_init(((wxSpinButton_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxSpinButton_php*) _this)->phpObj);
			*((wxSpinButton_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxSpinButton_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxSpinButton_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxGenericDirCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGenericDirCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!s!z!z!l!s!l!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr1 , &_argStr1_len , &_argLong2 , &_argStr2 , &_argStr2_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 9:
					_this = new wxGenericDirCtrl_php((wxWindow*) _ptrObj0 , (const int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr1, wxConvUTF8) , (int)_argLong2 , wxString(_argStr2, wxConvUTF8));
					break;
				case 8:
					_this = new wxGenericDirCtrl_php((wxWindow*) _ptrObj0 , (const int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr1, wxConvUTF8) , (int)_argLong2);
					break;
				case 7:
					_this = new wxGenericDirCtrl_php((wxWindow*) _ptrObj0 , (const int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr1, wxConvUTF8));
					break;
				case 6:
					_this = new wxGenericDirCtrl_php((wxWindow*) _ptrObj0 , (const int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 5:
					_this = new wxGenericDirCtrl_php((wxWindow*) _ptrObj0 , (const int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxGenericDirCtrl_php((wxWindow*) _ptrObj0 , (const int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxGenericDirCtrl_php((wxWindow*) _ptrObj0 , (const int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxGenericDirCtrl_php((wxWindow*) _ptrObj0 , (const int)_argLong0);
					break;
				case 1:
					_this = new wxGenericDirCtrl_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGenericDirCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGenericDirCtrl_php*) _this)->evnArray);
			array_init(((wxGenericDirCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGenericDirCtrl_php*) _this)->phpObj);
			*((wxGenericDirCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGenericDirCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGenericDirCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, Init)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGenericDirCtrl_php*)_this)->Init();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, CollapseTree)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGenericDirCtrl_php*)_this)->CollapseTree();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, ExpandPath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGenericDirCtrl_php*)_this)->ExpandPath(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, CollapsePath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGenericDirCtrl_php*)_this)->CollapsePath(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, GetDefaultPath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGenericDirCtrl_php*)_this)->GetDefaultPath();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, GetPath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGenericDirCtrl_php*)_this)->GetPath();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, GetFilePath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGenericDirCtrl_php*)_this)->GetFilePath();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, GetFilter)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGenericDirCtrl_php*)_this)->GetFilter();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, GetFilterIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGenericDirCtrl_php*)_this)->GetFilterIndex();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, GetFilterListCtrl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxDirFilterListCtrl* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGenericDirCtrl_php*)_this)->GetFilterListCtrl();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxDirFilterListCtrl_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxDirFilterListCtrl));return;			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, GetRootId)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxTreeItemId ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGenericDirCtrl_php*)_this)->GetRootId();
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxTreeItemId),0);memcpy(ptr,&ret0,sizeof(wxTreeItemId));object_init_ex(return_value,php_wxTreeItemId_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxTreeItemId));return;			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, GetTreeCtrl)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxTreeCtrl* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGenericDirCtrl_php*)_this)->GetTreeCtrl();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxTreeCtrl_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxTreeCtrl));return;			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, ReCreateTree)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGenericDirCtrl_php*)_this)->ReCreateTree();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, SetDefaultPath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGenericDirCtrl_php*)_this)->SetDefaultPath(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, SetFilter)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGenericDirCtrl_php*)_this)->SetFilter(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, SetFilterIndex)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGenericDirCtrl_php*)_this)->SetFilterIndex((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, SetPath)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGenericDirCtrl_php*)_this)->SetPath(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGenericDirCtrl, ShowHidden)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!", &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGenericDirCtrl_php*)_this)->ShowHidden(_argBool0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxDirFilterListCtrl_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxDirFilterListCtrl, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					_this = new wxDirFilterListCtrl_php((wxGenericDirCtrl*) _ptrObj0 , (const int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxDirFilterListCtrl_php((wxGenericDirCtrl*) _ptrObj0 , (const int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxDirFilterListCtrl_php((wxGenericDirCtrl*) _ptrObj0 , (const int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxDirFilterListCtrl_php((wxGenericDirCtrl*) _ptrObj0 , (const int)_argLong0);
					break;
				case 1:
					_this = new wxDirFilterListCtrl_php((wxGenericDirCtrl*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxDirFilterListCtrl);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxDirFilterListCtrl_php*) _this)->evnArray);
			array_init(((wxDirFilterListCtrl_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxDirFilterListCtrl_php*) _this)->phpObj);
			*((wxDirFilterListCtrl_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxDirFilterListCtrl_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxDirFilterListCtrl_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxDirFilterListCtrl, FillFilterList)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxDirFilterListCtrl_php*)_this)->FillFilterList(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDirFilterListCtrl, Append)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxDirFilterListCtrl_php*)_this)->Append(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxDirFilterListCtrl_php*)_this)->Append(*(wxArrayString *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxDirFilterListCtrl, Insert)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxDirFilterListCtrl_php*)_this)->Insert(wxString(_argStr0, wxConvUTF8) , (unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxChoiceBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxChoiceBase, GetColumns)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxChoiceBase_php*)_this)->GetColumns();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxChoiceBase, SetColumns)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxChoiceBase_php*)_this)->SetColumns((int)_argLong0);
					break;
				case 0:
					 ((wxChoiceBase_php*)_this)->SetColumns();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxChoiceBase, GetCurrentSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxChoiceBase_php*)_this)->GetCurrentSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxBitmapButtonBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxBitmapButtonBase, GetBitmapDisabled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxBitmapButtonBase_php*)_this)->GetBitmapDisabled();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmapButtonBase, GetBitmapFocus)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxBitmapButtonBase_php*)_this)->GetBitmapFocus();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmapButtonBase, GetBitmapHover)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxBitmapButtonBase_php*)_this)->GetBitmapHover();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmapButtonBase, GetBitmapLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxBitmapButtonBase_php*)_this)->GetBitmapLabel();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmapButtonBase, GetBitmapSelected)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxBitmapButtonBase_php*)_this)->GetBitmapSelected();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmapButtonBase, SetBitmapDisabled)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBitmapButtonBase_php*)_this)->SetBitmapDisabled(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmapButtonBase, SetBitmapFocus)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBitmapButtonBase_php*)_this)->SetBitmapFocus(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmapButtonBase, SetBitmapHover)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBitmapButtonBase_php*)_this)->SetBitmapHover(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmapButtonBase, SetBitmapLabel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBitmapButtonBase_php*)_this)->SetBitmapLabel(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxBitmapButtonBase, SetBitmapSelected)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxBitmapButtonBase_php*)_this)->SetBitmapSelected(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxTextCtrlBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxTextCtrlBase, CanCopy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->CanCopy();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, CanCut)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->CanCut();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, CanPaste)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->CanPaste();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
bool wxTextCtrlBase_php::CanRedo() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "CanRedo", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxTextCtrlBase, CanRedo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->CanRedo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
bool wxTextCtrlBase_php::CanUndo() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "CanUndo", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxTextCtrlBase, CanUndo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->CanUndo();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void wxTextCtrlBase_php::Clear(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Clear", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxTextCtrlBase, Clear)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTextCtrlBase_php*)_this)->Clear();
					break;
				default:
					break;
			}
			
		}
	}
}
void wxTextCtrlBase_php::Copy(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Copy", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxTextCtrlBase, Copy)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTextCtrlBase_php*)_this)->Copy();
					break;
				default:
					break;
			}
			
		}
	}
}
void wxTextCtrlBase_php::Cut(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Cut", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxTextCtrlBase, Cut)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTextCtrlBase_php*)_this)->Cut();
					break;
				default:
					break;
			}
			
		}
	}
}
void wxTextCtrlBase_php::DiscardEdits(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "DiscardEdits", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxTextCtrlBase, DiscardEdits)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTextCtrlBase_php*)_this)->DiscardEdits();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, EmulateKeyPress)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTextCtrlBase_php*)_this)->EmulateKeyPress(*(wxKeyEvent *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, GetDefaultStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxTextAttr ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->GetDefaultStyle();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxTextAttr_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxTextAttr));return;			
		}
	}
}
long int wxTextCtrlBase_php::GetInsertionPoint() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetInsertionPoint", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		long int* return_var = (long int*) zend_object_store_get_object(&retval TSRMLS_CC);return *return_var;	}
	}
PHP_METHOD(php_wxTextCtrlBase, GetInsertionPoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->GetInsertionPoint();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
long int wxTextCtrlBase_php::GetLastPosition() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetLastPosition", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		long int* return_var = (long int*) zend_object_store_get_object(&retval TSRMLS_CC);return *return_var;	}
	}
PHP_METHOD(php_wxTextCtrlBase, GetLastPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			long int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->GetLastPosition();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
int wxTextCtrlBase_php::GetLineLength(long int arg0) const{
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetLineLength", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxTextCtrlBase, GetLineLength)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTextCtrlBase_php*)_this)->GetLineLength((long int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
wxString wxTextCtrlBase_php::GetLineText(long int arg0) const{
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetLineText", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return wxString(Z_STRVAL(retval),wxConvUTF8);	}
	}
PHP_METHOD(php_wxTextCtrlBase, GetLineText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxTextCtrlBase_php*)_this)->GetLineText((long int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
int wxTextCtrlBase_php::GetNumberOfLines() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetNumberOfLines", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_DVAL(retval);	}
	}
PHP_METHOD(php_wxTextCtrlBase, GetNumberOfLines)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->GetNumberOfLines();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, GetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxTextCtrlBase_php*)_this)->GetRange((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
void wxTextCtrlBase_php::GetSelection(long int* arg0 , long int* arg1) const{
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetSelection", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,(long int) arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxTextCtrlBase, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTextCtrlBase_php*)_this)->GetSelection((long int*) _ptrObj0 , (long int*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, GetStringSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->GetStringSelection();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, GetStyle)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxTextAttrEx))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxTextCtrlBase_php*)_this)->GetStyle((long int)_argLong0 , *(wxTextAttr *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
bool wxTextCtrlBase_php::IsEditable() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "IsEditable", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxTextCtrlBase, IsEditable)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->IsEditable();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, IsEmpty)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->IsEmpty();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
bool wxTextCtrlBase_php::IsModified() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "IsModified", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxTextCtrlBase, IsModified)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->IsModified();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, IsMultiLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->IsMultiLine();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, IsSingleLine)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->IsSingleLine();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, LoadFile)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxTextCtrlBase_php*)_this)->LoadFile(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 1:
					ret0 =  ((wxTextCtrlBase_php*)_this)->LoadFile(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void wxTextCtrlBase_php::MarkDirty(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "MarkDirty", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxTextCtrlBase, MarkDirty)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTextCtrlBase_php*)_this)->MarkDirty();
					break;
				default:
					break;
			}
			
		}
	}
}
void wxTextCtrlBase_php::Paste(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Paste", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxTextCtrlBase, Paste)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTextCtrlBase_php*)_this)->Paste();
					break;
				default:
					break;
			}
			
		}
	}
}
bool wxTextCtrlBase_php::PositionToXY(long int arg0 , long int* arg1 , long int* arg2) const{
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "PositionToXY", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,(long int) arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(long int) arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxTextCtrlBase, PositionToXY)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!z!", &_argLong0 , &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxTextCtrlBase_php*)_this)->PositionToXY((long int)_argLong0 , (long int*) _ptrObj0 , (long int*) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void wxTextCtrlBase_php::Redo(){
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Redo", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxTextCtrlBase, Redo)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxTextCtrlBase_php*)_this)->Redo();
					break;
				default:
					break;
			}
			
		}
	}
}
void wxTextCtrlBase_php::Remove(long int arg0 , long int arg1){
	zval *args[2];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Remove", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 2, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxTextCtrlBase, Remove)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxTextCtrlBase_php*)_this)->Remove((long int)_argLong0 , (long int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
void wxTextCtrlBase_php::Replace(long int arg0 , long int arg1 , const wxString& arg2){
	zval *args[3];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "Replace", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		zval argLng1;
	ZVAL_LONG(&argLng1,arg1);
	args[1]= &argLng1;
		zval argLng2;
	ZVAL_LONG(&argLng2,(const long int) &arg2);
	args[2]= &argLng2;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 3, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxTextCtrlBase, Replace)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!s!", &_argLong0 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					 ((wxTextCtrlBase_php*)_this)->Replace((long int)_argLong0 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxTextCtrlBase, SaveFile)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|s!l!", &_argStr0 , &_argStr0_len , &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxTextCtrlBase_php*)_this)->SaveFile(wxString(_argStr0, wxConvUTF8) , (int)_argLong0);
					break;
				case 1:
					ret0 =  ((wxTextCtrlBase_php*)_this)->SaveFile(wxString(_argStr0, wxConvUTF8));
					break;
				case 0:
					ret0 =  ((wxTextCtrlBase_php*)_this)->SaveFile();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxBitmapComboBox_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxBitmapComboBox, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	char* _argStr2;
	int _argStr2_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	void *_ptrObj4 = 0;
	zval *_argObj4 = 0;
	int id_to_find4;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!s!z!z!l!s!l!z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr1 , &_argStr1_len , &_argLong2 , &_argObj3 , &_argStr2 , &_argStr2_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 10:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8) , (long int)_argLong2 , *(wxValidator *) _ptrObj3 , wxString(_argStr2, wxConvUTF8));
					break;
				case 9:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8) , (long int)_argLong2 , *(wxValidator *) _ptrObj3);
					break;
				case 8:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8) , (long int)_argLong2);
					break;
				case 7:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1 , &wxString(_argStr1, wxConvUTF8));
					break;
				case 6:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (int)_argLong1);
					break;
				case 5:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 4:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1);
					break;
				case 3:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				case 2:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBitmapComboBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBitmapComboBox_php*) _this)->evnArray);
			array_init(((wxBitmapComboBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBitmapComboBox_php*) _this)->phpObj);
			*((wxBitmapComboBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBitmapComboBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBitmapComboBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!s!z!z!z!l!|z!s!", &_argObj0 , &_argLong0 , &_argStr0 , &_argStr0_len , &_argObj1 , &_argObj2 , &_argObj3 , &_argLong1 , &_argObj4 , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj4)
		{
			if (_argObj4->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj4), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find4 = Z_RESVAL_P(*tmp);
				_ptrObj4 = zend_list_find(id_to_find4, &rsrc_type);
				if (!_ptrObj4 )
					valid = 0;
			}
			else if(_argObj4->type==IS_LONG)
				_ptrObj4= (void *)_argObj4->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 9:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4 , wxString(_argStr1, wxConvUTF8));
					break;
				case 8:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1 , *(wxValidator *) _ptrObj4);
					break;
				case 7:
					_this = new wxBitmapComboBox_php((wxWindow*) _ptrObj0 , (int)_argLong0 , wxString(_argStr0, wxConvUTF8) , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , *(wxArrayString *) _ptrObj3 , (long int)_argLong1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxBitmapComboBox);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxBitmapComboBox_php*) _this)->evnArray);
			array_init(((wxBitmapComboBox_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxBitmapComboBox_php*) _this)->phpObj);
			*((wxBitmapComboBox_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxBitmapComboBox_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxBitmapComboBox_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxBitmapComboBox, Append)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!|z!", &_argStr0 , &_argStr0_len , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxBitmapComboBox_php*)_this)->Append(wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0);
					break;
				case 1:
					ret0 =  ((wxBitmapComboBox_php*)_this)->Append(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!z!z!", &_argStr0 , &_argStr0_len , &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxBitmapComboBox_php*)_this)->Append(wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , (void*) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!z!z!", &_argStr0 , &_argStr0_len , &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret2 =  ((wxBitmapComboBox_php*)_this)->Append(wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , (wxClientData*) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret2)			
		}
	}
}
PHP_METHOD(php_wxBitmapComboBox, GetBitmapSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxBitmapComboBox_php*)_this)->GetBitmapSize();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxBitmapComboBox, GetItemBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxBitmap ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxBitmapComboBox_php*)_this)->GetItemBitmap((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxBitmap),0);memcpy(ptr,&ret0,sizeof(wxBitmap));object_init_ex(return_value,php_wxBitmap_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxBitmap));return;			
		}
	}
}
PHP_METHOD(php_wxBitmapComboBox, Insert)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!z!l!", &_argStr0 , &_argStr0_len , &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxBitmapComboBox_php*)_this)->Insert(wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , (unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!z!l!z!", &_argStr0 , &_argStr0_len , &_argObj0 , &_argLong0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret1 =  ((wxBitmapComboBox_php*)_this)->Insert(wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , (unsigned int)_argLong0 , (void*) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!z!l!z!", &_argStr0 , &_argStr0_len , &_argObj0 , &_argLong0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret2 =  ((wxBitmapComboBox_php*)_this)->Insert(wxString(_argStr0, wxConvUTF8) , *(wxBitmap *) _ptrObj0 , (unsigned int)_argLong0 , (wxClientData*) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret2)			
		}
	}
}
PHP_METHOD(php_wxBitmapComboBox, SetItemBitmap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxBitmapComboBox_php*)_this)->SetItemBitmap((unsigned int)_argLong0 , *(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxCheckBoxBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxCheckBoxBase, Set3StateValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "zl!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxCheckBoxBase_php*)_this)->Set3StateValue((wxCheckBoxState) _argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxCheckBoxBase, IsChecked)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCheckBoxBase_php*)_this)->IsChecked();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCheckBoxBase, Is3State)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCheckBoxBase_php*)_this)->Is3State();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCheckBoxBase, Is3rdStateAllowedForUser)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxCheckBoxBase_php*)_this)->Is3rdStateAllowedForUser();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxCheckBoxBase, Get3StateValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxCheckBoxBase_php*)_this)->Get3StateValue();
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxRadioBoxBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxRadioBoxBase, GetColumnCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			unsigned int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRadioBoxBase_php*)_this)->GetColumnCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRadioBoxBase, GetItemHelpText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxRadioBoxBase_php*)_this)->GetItemHelpText((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxRadioBoxBase, GetItemToolTip)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxRadioBoxBase_php*)_this)->GetItemToolTip((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxRadioBoxBase, GetRowCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			unsigned int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxRadioBoxBase_php*)_this)->GetRowCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxRadioBoxBase, SetItemToolTip)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxRadioBoxBase_php*)_this)->SetItemToolTip((unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxStaticLineBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxStaticLineBase, IsVertical)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStaticLineBase_php*)_this)->IsVertical();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxStaticLineBase, GetDefaultSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxStaticLineBase_php*)_this)->GetDefaultSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxStaticLine_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxStaticLine, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxStaticLine_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxStaticLine_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxStaticLine_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxStaticLine_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxStaticLine_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxStaticLine_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxStaticLine);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxStaticLine_php*) _this)->evnArray);
			array_init(((wxStaticLine_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxStaticLine_php*) _this)->phpObj);
			*((wxStaticLine_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxStaticLine_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxStaticLine_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxSlider_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSlider, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!l!l!l!|z!z!l!z!s!", &_argObj0 , &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argObj1 , &_argObj2 , &_argLong4 , &_argObj3 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 )
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 10:
					_this = new wxSlider_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong4 , *(wxValidator *) _ptrObj3 , wxString(_argStr0, wxConvUTF8));
					break;
				case 9:
					_this = new wxSlider_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong4 , *(wxValidator *) _ptrObj3);
					break;
				case 8:
					_this = new wxSlider_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong4);
					break;
				case 7:
					_this = new wxSlider_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 6:
					_this = new wxSlider_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , *(wxPoint *) _ptrObj1);
					break;
				case 5:
					_this = new wxSlider_php((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxSlider);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxSlider_php*) _this)->evnArray);
			array_init(((wxSlider_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxSlider_php*) _this)->phpObj);
			*((wxSlider_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxSlider_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxSlider_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxSlider, SetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSlider_php*)_this)->SetValue((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSlider, SetThumbLength)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSlider_php*)_this)->SetThumbLength((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSlider, SetRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxSlider_php*)_this)->SetRange((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSlider, SetPageSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSlider_php*)_this)->SetPageSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSlider, SetLineSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSlider_php*)_this)->SetLineSize((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSlider, GetValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSlider_php*)_this)->GetValue();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSlider, GetThumbLength)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSlider_php*)_this)->GetThumbLength();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSlider, GetPageSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSlider_php*)_this)->GetPageSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSlider, GetMin)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSlider_php*)_this)->GetMin();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSlider, GetMax)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSlider_php*)_this)->GetMax();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSlider, GetLineSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSlider_php*)_this)->GetLineSize();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxSliderBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxSliderBase, SetTick)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxSliderBase_php*)_this)->SetTick((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSliderBase, ClearSel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxSliderBase_php*)_this)->ClearSel();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSliderBase, ClearTicks)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxSliderBase_php*)_this)->ClearTicks();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxSliderBase, GetTickFreq)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSliderBase_php*)_this)->GetTickFreq();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSliderBase, GetSelEnd)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSliderBase_php*)_this)->GetSelEnd();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxSliderBase, GetSelStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxSliderBase_php*)_this)->GetSelStart();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxScrolledWindow_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxScrolledWindow, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxScrolledWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxScrolledWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxScrolledWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxScrolledWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxScrolledWindow_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					_this = new wxScrolledWindow_php((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxScrolledWindow);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxScrolledWindow_php*) _this)->evnArray);
			array_init(((wxScrolledWindow_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxScrolledWindow_php*) _this)->phpObj);
			*((wxScrolledWindow_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxScrolledWindow_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxScrolledWindow_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxScrolledWindow, PrepareDC)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxScrolledWindow_php*)_this)->PrepareDC(*(wxDC *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxScrollHelper_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxScrollHelper, EnableScrolling)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	bool _argBool1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "b!b!", &_argBool0 , &_argBool1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxScrollHelper_php*)_this)->EnableScrolling(_argBool0 , _argBool1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxScrollHelper, GetScrollPixelsPerUnit)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxScrollHelper_php*)_this)->GetScrollPixelsPerUnit((int*) _ptrObj0 , (int*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxScrollHelper, GetViewStart)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxScrollHelper_php*)_this)->GetViewStart((int*) _ptrObj0 , (int*) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxScrollHelper, DoPrepareDC)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxScrollHelper_php*)_this)->DoPrepareDC(*(wxDC *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxScrollHelper, Scroll)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxScrollHelper_php*)_this)->Scroll((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxScrollHelper, SetScrollbars)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	long _argLong5;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!|l!l!b!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argLong4 , &_argLong5 , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					 ((wxScrollHelper_php*)_this)->SetScrollbars((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4 , (int)_argLong5 , _argBool0);
					break;
				case 6:
					 ((wxScrollHelper_php*)_this)->SetScrollbars((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4 , (int)_argLong5);
					break;
				case 5:
					 ((wxScrollHelper_php*)_this)->SetScrollbars((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4);
					break;
				case 4:
					 ((wxScrollHelper_php*)_this)->SetScrollbars((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxScrollHelper, SetScrollRate)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxScrollHelper_php*)_this)->SetScrollRate((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxScrollHelper, SetTargetWindow)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxScrollHelper_php*)_this)->SetTargetWindow((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxScrollHelper, CalcScrolledPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxScrollHelper_php*)_this)->CalcScrolledPosition(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxPoint),0);memcpy(ptr,&ret0,sizeof(wxPoint));object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));return;			
		}
	}
}
PHP_METHOD(php_wxScrollHelper, CalcUnscrolledPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxPoint ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxScrollHelper_php*)_this)->CalcUnscrolledPosition(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			void* ptr = safe_emalloc(1,sizeof(wxPoint),0);memcpy(ptr,&ret0,sizeof(wxPoint));object_init_ex(return_value,php_wxPoint_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));return;			
		}
	}
}
void php_wxNotebookBase_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxNotebookBase, GetRowCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxNotebookBase_php*)_this)->GetRowCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
void php_wxListbook_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxListbook, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!|z!z!l!s!", &_argObj0 , &_argLong0 , &_argObj1 , &_argObj2 , &_argLong1 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxListbook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1 , wxString(_argStr0, wxConvUTF8));
					break;
				case 5:
					_this = new wxListbook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2 , (long int)_argLong1);
					break;
				case 4:
					_this = new wxListbook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1 , *(wxSize *) _ptrObj2);
					break;
				case 3:
					_this = new wxListbook_php((wxWindow*) _ptrObj0 , (int)_argLong0 , *(wxPoint *) _ptrObj1);
					break;
				case 2:
					_this = new wxListbook_php((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxListbook);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxListbook_php*) _this)->evnArray);
			array_init(((wxListbook_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxListbook_php*) _this)->phpObj);
			*((wxListbook_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxListbook_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxListbook_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxListbook, GetPageImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListbook_php*)_this)->GetPageImage((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListbook, GetPageText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListbook_php*)_this)->GetPageText((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxString ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxListbook_php*)_this)->GetPageText((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret1.size()+1));strcpy ( ro2, (const char *) ret1.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxListbook, GetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListbook_php*)_this)->GetSelection();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListbook, InsertPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	bool _argBool0;
	long _argLong0;
	long _argLong1;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!s!|b!l!", &_argLong0 , &_argObj0 , &_argStr0 , &_argStr0_len , &_argBool0 , &_argLong1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret0 =  ((wxListbook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0 , (int)_argLong1);
					break;
				case 4:
					ret0 =  ((wxListbook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8) , _argBool0);
					break;
				case 3:
					ret0 =  ((wxListbook_php*)_this)->InsertPage((long unsigned int)_argLong0 , (wxWindow*) _ptrObj0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListbook, SetImageList)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListbook_php*)_this)->SetImageList((wxImageList*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListbook, SetPageImage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListbook_php*)_this)->SetPageImage((long unsigned int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxListbook, SetPageText)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxListbook_php*)_this)->SetPageText((long unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!s!", &_argLong0 , &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxListbook_php*)_this)->SetPageText((unsigned int)_argLong0 , wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxListbook, SetSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListbook_php*)_this)->SetSelection((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxListbook_php*)_this)->SetSelection((unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret1)			
		}
	}
}
void wxListbook_php::UpdateSelectedPage(long unsigned int arg0){
	zval *args[1];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "UpdateSelectedPage", 0);
	
	
	
		zval argLng0;
	ZVAL_LONG(&argLng0,arg0);
	args[0]= &argLng0;
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 1, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
	}
PHP_METHOD(php_wxListbook, UpdateSelectedPage)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxListbook_php*)_this)->UpdateSelectedPage((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxListbook, ChangeSelection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxListbook_php*)_this)->ChangeSelection((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxListbook, DeleteAllPages)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxListbook_php*)_this)->DeleteAllPages();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxGridSizer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridSizer, GetCols)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridSizer_php*)_this)->GetCols();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGridSizer, GetHGap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridSizer_php*)_this)->GetHGap();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGridSizer, GetRows)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridSizer_php*)_this)->GetRows();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGridSizer, GetVGap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridSizer_php*)_this)->GetVGap();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxGridSizer, SetCols)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridSizer_php*)_this)->SetCols((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridSizer, SetHGap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridSizer_php*)_this)->SetHGap((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridSizer, SetRows)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridSizer_php*)_this)->SetRows((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridSizer, SetVGap)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridSizer_php*)_this)->SetVGap((int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridSizer, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFlexGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxGridSizer_php(*(wxGridSizer *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridSizer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridSizer_php*) _this)->evnArray);
			array_init(((wxGridSizer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridSizer_php*) _this)->phpObj);
			*((wxGridSizer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridSizer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridSizer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					_this = new wxGridSizer_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridSizer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridSizer_php*) _this)->evnArray);
			array_init(((wxGridSizer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridSizer_php*) _this)->phpObj);
			*((wxGridSizer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridSizer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridSizer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!|l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxGridSizer_php((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					_this = new wxGridSizer_php((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					_this = new wxGridSizer_php((int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridSizer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridSizer_php*) _this)->evnArray);
			array_init(((wxGridSizer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridSizer_php*) _this)->phpObj);
			*((wxGridSizer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridSizer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridSizer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxGridBagSizer_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridBagSizer, CalcMin)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridBagSizer_php*)_this)->CalcMin();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, CheckForIntersection)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridBagSizer_php*)_this)->CheckForIntersection((wxGBSizerItem*) _ptrObj0 , (wxGBSizerItem*) _ptrObj1);
					break;
				case 1:
					ret0 =  ((wxGridBagSizer_php*)_this)->CheckForIntersection((wxGBSizerItem*) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|z!", &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret1 =  ((wxGridBagSizer_php*)_this)->CheckForIntersection(*(wxGBPosition *) _ptrObj0 , *(wxGBSpan *) _ptrObj1 , (wxGBSizerItem*) _ptrObj2);
					break;
				case 2:
					ret1 =  ((wxGridBagSizer_php*)_this)->CheckForIntersection(*(wxGBPosition *) _ptrObj0 , *(wxGBSpan *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxGridBagSizer_php((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					_this = new wxGridBagSizer_php((int)_argLong0);
					break;
				case 0:
					_this = new wxGridBagSizer_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridBagSizer);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridBagSizer_php*) _this)->evnArray);
			array_init(((wxGridBagSizer_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridBagSizer_php*) _this)->phpObj);
			*((wxGridBagSizer_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridBagSizer_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridBagSizer_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, FindItem)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxGBSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGridBagSizer_php*)_this)->FindItem((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGBSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGBSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxGBSizerItem* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret1 =  ((wxGridBagSizer_php*)_this)->FindItem((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGBSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxGBSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, FindItemAtPoint)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxGBSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGridBagSizer_php*)_this)->FindItemAtPoint(*(wxPoint *) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGBSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGBSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, FindItemAtPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxGBSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGridBagSizer_php*)_this)->FindItemAtPosition(*(wxGBPosition *) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGBSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGBSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, FindItemWithData)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxGBSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGridBagSizer_php*)_this)->FindItemWithData((wxObject*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxGBSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxGBSizerItem));return;			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, GetCellSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridBagSizer_php*)_this)->GetCellSize((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, GetEmptyCellSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxSize ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridBagSizer_php*)_this)->GetEmptyCellSize();
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSize_entry);add_property_resource(return_value, "wxResource", zend_list_insert(&ret0, le_wxSize));return;			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, GetItemPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridBagSizer_php*)_this)->GetItemPosition((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridBagSizer_php*)_this)->GetItemPosition((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridBagSizer_php*)_this)->GetItemPosition((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, GetItemSpan)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridBagSizer_php*)_this)->GetItemSpan((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridBagSizer_php*)_this)->GetItemSpan((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!", &_argLong0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridBagSizer_php*)_this)->GetItemSpan((long unsigned int)_argLong0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, SetItemPosition)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridBagSizer_php*)_this)->SetItemPosition((wxWindow*) _ptrObj0 , *(wxGBPosition *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxGridBagSizer_php*)_this)->SetItemPosition((wxSizer*) _ptrObj0 , *(wxGBPosition *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret2 =  ((wxGridBagSizer_php*)_this)->SetItemPosition((long unsigned int)_argLong0 , *(wxGBPosition *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, SetItemSpan)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxGridBagSizer_php*)_this)->SetItemSpan((wxWindow*) _ptrObj0 , *(wxGBSpan *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxGridBagSizer_php*)_this)->SetItemSpan((wxSizer*) _ptrObj0 , *(wxGBSpan *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!", &_argLong0 , &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret2 =  ((wxGridBagSizer_php*)_this)->SetItemSpan((long unsigned int)_argLong0 , *(wxGBSpan *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, RecalcSizes)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGridBagSizer_php*)_this)->RecalcSizes();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, SetEmptyCellSize)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridBagSizer_php*)_this)->SetEmptyCellSize(*(wxSize *) _ptrObj0);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridBagSizer, Add)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	long _argLong4;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSizerItem* ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGridBagSizer_php*)_this)->Add((wxSizerItem*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret0, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!|l!l!l!z!", &_argLong0 , &_argLong1 , &_argLong2 , &_argLong3 , &_argLong4 , &_argObj0 ) == SUCCESS)
	{
		
		if(valid && _argObj0)
		{
			if (_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					ret1 =  ((wxGridBagSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4 , (wxObject*) _ptrObj0);
					break;
				case 5:
					ret1 =  ((wxGridBagSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3 , (int)_argLong4);
					break;
				case 4:
					ret1 =  ((wxGridBagSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (int)_argLong3);
					break;
				case 3:
					ret1 =  ((wxGridBagSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 2:
					ret1 =  ((wxGridBagSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret1, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!l!l!z!", &_argObj0 , &_argLong0 , &_argLong1 , &_argLong2 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret2 =  ((wxGridBagSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (wxObject*) _ptrObj1);
					break;
				case 4:
					ret2 =  ((wxGridBagSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					ret2 =  ((wxGridBagSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				case 2:
					ret2 =  ((wxGridBagSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret2 =  ((wxGridBagSizer_php*)_this)->Add((wxSizer*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret2, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			wxSizerItem* ret3;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret3 =  ((wxGridBagSizer_php*)_this)->Add((wxGBSizerItem*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret3, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!|z!l!l!z!", &_argLong0 , &_argLong1 , &_argObj0 , &_argObj1 , &_argLong2 , &_argLong3 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret4;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					ret4 =  ((wxGridBagSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , *(wxGBPosition *) _ptrObj0 , *(wxGBSpan *) _ptrObj1 , (int)_argLong2 , (int)_argLong3 , (wxObject*) _ptrObj2);
					break;
				case 6:
					ret4 =  ((wxGridBagSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , *(wxGBPosition *) _ptrObj0 , *(wxGBSpan *) _ptrObj1 , (int)_argLong2 , (int)_argLong3);
					break;
				case 5:
					ret4 =  ((wxGridBagSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , *(wxGBPosition *) _ptrObj0 , *(wxGBSpan *) _ptrObj1 , (int)_argLong2);
					break;
				case 4:
					ret4 =  ((wxGridBagSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , *(wxGBPosition *) _ptrObj0 , *(wxGBSpan *) _ptrObj1);
					break;
				case 3:
					ret4 =  ((wxGridBagSizer_php*)_this)->Add((int)_argLong0 , (int)_argLong1 , *(wxGBPosition *) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret4, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|l!l!l!z!", &_argObj0 , &_argLong0 , &_argLong1 , &_argLong2 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj1)
		{
			if (_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret5;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 5:
					ret5 =  ((wxGridBagSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2 , (wxObject*) _ptrObj1);
					break;
				case 4:
					ret5 =  ((wxGridBagSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1 , (int)_argLong2);
					break;
				case 3:
					ret5 =  ((wxGridBagSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , (int)_argLong0 , (int)_argLong1);
					break;
				case 2:
					ret5 =  ((wxGridBagSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , (int)_argLong0);
					break;
				case 1:
					ret5 =  ((wxGridBagSizer_php*)_this)->Add((wxWindow*) _ptrObj0);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret5, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|z!l!l!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argLong0 , &_argLong1 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret6;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					ret6 =  ((wxGridBagSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , *(wxGBPosition *) _ptrObj1 , *(wxGBSpan *) _ptrObj2 , (int)_argLong0 , (int)_argLong1 , (wxObject*) _ptrObj3);
					break;
				case 5:
					ret6 =  ((wxGridBagSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , *(wxGBPosition *) _ptrObj1 , *(wxGBSpan *) _ptrObj2 , (int)_argLong0 , (int)_argLong1);
					break;
				case 4:
					ret6 =  ((wxGridBagSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , *(wxGBPosition *) _ptrObj1 , *(wxGBSpan *) _ptrObj2 , (int)_argLong0);
					break;
				case 3:
					ret6 =  ((wxGridBagSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , *(wxGBPosition *) _ptrObj1 , *(wxGBSpan *) _ptrObj2);
					break;
				case 2:
					ret6 =  ((wxGridBagSizer_php*)_this)->Add((wxSizer*) _ptrObj0 , *(wxGBPosition *) _ptrObj1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret6, le_wxSizerItem));return;			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!|z!l!l!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argLong0 , &_argLong1 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid && _argObj2)
		{
			if (_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
		}
		if(valid && _argObj3)
		{
			if (_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS) 
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
		}
		if(valid)
		{
			wxSizerItem* ret7;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					ret7 =  ((wxGridBagSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , *(wxGBPosition *) _ptrObj1 , *(wxGBSpan *) _ptrObj2 , (int)_argLong0 , (int)_argLong1 , (wxObject*) _ptrObj3);
					break;
				case 5:
					ret7 =  ((wxGridBagSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , *(wxGBPosition *) _ptrObj1 , *(wxGBSpan *) _ptrObj2 , (int)_argLong0 , (int)_argLong1);
					break;
				case 4:
					ret7 =  ((wxGridBagSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , *(wxGBPosition *) _ptrObj1 , *(wxGBSpan *) _ptrObj2 , (int)_argLong0);
					break;
				case 3:
					ret7 =  ((wxGridBagSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , *(wxGBPosition *) _ptrObj1 , *(wxGBSpan *) _ptrObj2);
					break;
				case 2:
					ret7 =  ((wxGridBagSizer_php*)_this)->Add((wxWindow*) _ptrObj0 , *(wxGBPosition *) _ptrObj1);
					break;
				default:
					break;
			}
			object_init_ex(return_value,php_wxSizerItem_entry);add_property_resource(return_value, "wxResource", zend_list_insert(ret7, le_wxSizerItem));return;			
		}
	}
}
void php_wxGBSizerItem_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGBSizerItem, GetEndPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGBSizerItem_php*)_this)->GetEndPos(*(int *) _ptrObj0 , *(int *) _ptrObj1);
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGBSizerItem, GetSpan)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGBSizerItem_php*)_this)->GetSpan();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGBSizerItem, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	long _argLong2;
	long _argLong3;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	void *_ptrObj3 = 0;
	zval *_argObj3 = 0;
	int id_to_find3;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!z!z!l!l!z!", &_argLong0 , &_argLong1 , &_argObj0 , &_argObj1 , &_argLong2 , &_argLong3 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 7:
					_this = new wxGBSizerItem_php((int)_argLong0 , (int)_argLong1 , *(wxGBPosition *) _ptrObj0 , *(wxGBSpan *) _ptrObj1 , (int)_argLong2 , (int)_argLong3 , (wxObject*) _ptrObj2);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGBSizerItem);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGBSizerItem_php*) _this)->evnArray);
			array_init(((wxGBSizerItem_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGBSizerItem_php*) _this)->phpObj);
			*((wxGBSizerItem_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGBSizerItem_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGBSizerItem_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!l!l!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argLong0 , &_argLong1 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxToolBar && rsrc_type != le_wxStatusBar && rsrc_type != le_wxPanel && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxNotebook && rsrc_type != le_wxStaticText && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxStaticBox && rsrc_type != le_wxListBox && rsrc_type != le_wxFileDialog && rsrc_type != le_wxDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxListCtrl && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxGauge && rsrc_type != le_wxComboBox && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxCheckBox && rsrc_type != le_wxToggleButton && rsrc_type != le_wxChoice && rsrc_type != le_wxDirFilterListCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxRadioButton && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxGrid && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxStaticLine && rsrc_type != le_wxSlider && rsrc_type != le_wxListbook))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxGBSizerItem_php((wxWindow*) _ptrObj0 , *(wxGBPosition *) _ptrObj1 , *(wxGBSpan *) _ptrObj2 , (int)_argLong0 , (int)_argLong1 , (wxObject*) _ptrObj3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGBSizerItem);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGBSizerItem_php*) _this)->evnArray);
			array_init(((wxGBSizerItem_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGBSizerItem_php*) _this)->phpObj);
			*((wxGBSizerItem_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGBSizerItem_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGBSizerItem_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!z!l!l!z!", &_argObj0 , &_argObj1 , &_argObj2 , &_argLong0 , &_argLong1 , &_argObj3 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxBoxSizer && rsrc_type != le_wxStaticBoxSizer && rsrc_type != le_wxStdDialogButtonSizer && rsrc_type != le_wxFlexGridSizer && rsrc_type != le_wxGridSizer))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj3)
		if (valid) 
		{
			if(_argObj3->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find3 = Z_RESVAL_P(*tmp);
				_ptrObj3 = zend_list_find(id_to_find3, &rsrc_type);
				if (!_ptrObj3 || (rsrc_type != le_wxBitmap && rsrc_type != le_wxIcon && rsrc_type != le_wxAuiManager && rsrc_type != le_wxGDIObject && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxHyperlinkEvent))
					valid = 0;
			}
			else if(_argObj3->type==IS_LONG)
				_ptrObj3= (void *)_argObj3->value.lval;
			else if(_argObj3->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 6:
					_this = new wxGBSizerItem_php((wxSizer*) _ptrObj0 , *(wxGBPosition *) _ptrObj1 , *(wxGBSpan *) _ptrObj2 , (int)_argLong0 , (int)_argLong1 , (wxObject*) _ptrObj3);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGBSizerItem);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGBSizerItem_php*) _this)->evnArray);
			array_init(((wxGBSizerItem_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGBSizerItem_php*) _this)->phpObj);
			*((wxGBSizerItem_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGBSizerItem_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGBSizerItem_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxGBSizerItem_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGBSizerItem);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGBSizerItem_php*) _this)->evnArray);
			array_init(((wxGBSizerItem_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGBSizerItem_php*) _this)->phpObj);
			*((wxGBSizerItem_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGBSizerItem_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGBSizerItem_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxGBSizerItem, SetSpan)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGBSizerItem_php*)_this)->SetSpan(*(wxGBSpan *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGBSizerItem, SetPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGBSizerItem_php*)_this)->SetPos(*(wxGBPosition *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGBSizerItem, GetPos)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					 ((wxGBSizerItem_php*)_this)->GetPos();
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGBSizerItem, Intersects)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGBSizerItem_php*)_this)->Intersects(*(wxGBSizerItem *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxGBSizerItem_php*)_this)->Intersects(*(wxGBPosition *) _ptrObj0 , *(wxGBSpan *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
}
void php_wxMask_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxMask, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxMask_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxMask);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxMask_php*) _this)->evnArray);
			array_init(((wxMask_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxMask_php*) _this)->phpObj);
			*((wxMask_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxMask_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxMask_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxMask_php(*(wxBitmap *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxMask);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxMask_php*) _this)->evnArray);
			array_init(((wxMask_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxMask_php*) _this)->phpObj);
			*((wxMask_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxMask_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxMask_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxMask_php(*(wxBitmap *) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxMask);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxMask_php*) _this)->evnArray);
			array_init(((wxMask_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxMask_php*) _this)->phpObj);
			*((wxMask_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxMask_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxMask_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxMask_php(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxMask);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxMask_php*) _this)->evnArray);
			array_init(((wxMask_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxMask_php*) _this)->phpObj);
			*((wxMask_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxMask_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxMask_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxMask, Create)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!z!", &_argObj0 , &_argObj1 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret0 =  ((wxMask_php*)_this)->Create(*(wxBitmap *) _ptrObj0 , *(wxColour *) _ptrObj1);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!l!", &_argObj0 , &_argLong0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret1;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					ret1 =  ((wxMask_php*)_this)->Create(*(wxBitmap *) _ptrObj0 , (int)_argLong0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret1)			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 || (rsrc_type != le_wxIcon))
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret2;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret2 =  ((wxMask_php*)_this)->Create(*(wxBitmap *) _ptrObj0);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret2)			
		}
	}
}
void php_wxPalette_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxPalette, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!", &_argObj0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					_this = new wxPalette_php(*(wxPalette *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxPalette);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxPalette_php*) _this)->evnArray);
			array_init(((wxPalette_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxPalette_php*) _this)->phpObj);
			*((wxPalette_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxPalette_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxPalette_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxPalette_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxPalette);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxPalette_php*) _this)->evnArray);
			array_init(((wxPalette_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxPalette_php*) _this)->phpObj);
			*((wxPalette_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxPalette_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxPalette_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!z!z!", &_argLong0 , &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					_this = new wxPalette_php((int)_argLong0 , (unsigned char*) _ptrObj0 , (unsigned char*) _ptrObj1 , (unsigned char*) _ptrObj2);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxPalette);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxPalette_php*) _this)->evnArray);
			array_init(((wxPalette_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxPalette_php*) _this)->phpObj);
			*((wxPalette_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxPalette_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxPalette_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxPalette, IsOk)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxPalette_php*)_this)->IsOk();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxPalette, GetRGB)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!z!z!", &_argLong0 , &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxPalette_php*)_this)->GetRGB((int)_argLong0 , (unsigned char*) _ptrObj0 , (unsigned char*) _ptrObj1 , (unsigned char*) _ptrObj2);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxPalette, GetPixel)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	long _argLong1;
	long _argLong2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!l!l!", &_argLong0 , &_argLong1 , &_argLong2 ) == SUCCESS)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					ret0 =  ((wxPalette_php*)_this)->GetPixel((unsigned char)_argLong0 , (unsigned char)_argLong1 , (unsigned char)_argLong2);
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxPalette, GetColoursCount)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxPalette_php*)_this)->GetColoursCount();
					break;
				default:
					break;
			}
			RETURN_LONG((long)ret0)			
		}
	}
}
PHP_METHOD(php_wxPalette, Create)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	long _argLong0;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	void *_ptrObj1 = 0;
	zval *_argObj1 = 0;
	int id_to_find1;
	void *_ptrObj2 = 0;
	zval *_argObj2 = 0;
	int id_to_find2;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "l!z!z!z!", &_argLong0 , &_argObj0 , &_argObj1 , &_argObj2 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj1)
		if (valid) 
		{
			if(_argObj1->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find1 = Z_RESVAL_P(*tmp);
				_ptrObj1 = zend_list_find(id_to_find1, &rsrc_type);
				if (!_ptrObj1 )
					valid = 0;
			}
			else if(_argObj1->type==IS_LONG)
				_ptrObj1= (void *)_argObj1->value.lval;
			else if(_argObj1->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(_argObj2)
		if (valid) 
		{
			if(_argObj2->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find2 = Z_RESVAL_P(*tmp);
				_ptrObj2 = zend_list_find(id_to_find2, &rsrc_type);
				if (!_ptrObj2 )
					valid = 0;
			}
			else if(_argObj2->type==IS_LONG)
				_ptrObj2= (void *)_argObj2->value.lval;
			else if(_argObj2->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 4:
					ret0 =  ((wxPalette_php*)_this)->Create((int)_argLong0 , (unsigned char*) _ptrObj0 , (unsigned char*) _ptrObj1 , (unsigned char*) _ptrObj2);
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
void php_wxGridCellFloatEditor_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridCellFloatEditor, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxGridCellFloatEditor_php((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					_this = new wxGridCellFloatEditor_php((int)_argLong0);
					break;
				case 0:
					_this = new wxGridCellFloatEditor_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellFloatEditor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellFloatEditor_php*) _this)->evnArray);
			array_init(((wxGridCellFloatEditor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellFloatEditor_php*) _this)->phpObj);
			*((wxGridCellFloatEditor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellFloatEditor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellFloatEditor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxGridCellFloatEditor, SetParameters)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellFloatEditor_php*)_this)->SetParameters(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxGridCellBoolEditor_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridCellBoolEditor, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxGridCellBoolEditor_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellBoolEditor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellBoolEditor_php*) _this)->evnArray);
			array_init(((wxGridCellBoolEditor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellBoolEditor_php*) _this)->phpObj);
			*((wxGridCellBoolEditor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellBoolEditor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellBoolEditor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
PHP_METHOD(php_wxGridCellBoolEditor, IsTrueValue)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					ret0 =  ((wxGridCellBoolEditor_php*)_this)->IsTrueValue(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
PHP_METHOD(php_wxGridCellBoolEditor, UseStringValues)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	char* _argStr1;
	int _argStr1_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|s!s!", &_argStr0 , &_argStr0_len , &_argStr1 , &_argStr1_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					 ((wxGridCellBoolEditor_php*)_this)->UseStringValues(wxString(_argStr0, wxConvUTF8) , wxString(_argStr1, wxConvUTF8));
					break;
				case 1:
					 ((wxGridCellBoolEditor_php*)_this)->UseStringValues(wxString(_argStr0, wxConvUTF8));
					break;
				case 0:
					 ((wxGridCellBoolEditor_php*)_this)->UseStringValues();
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxGridCellChoiceEditor_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridCellChoiceEditor, SetParameters)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellChoiceEditor_php*)_this)->SetParameters(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellChoiceEditor, __construct)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	bool _argBool0;
	long _argLong0;
	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!|b!", &_argObj0 , &_argBool0 ) == SUCCESS)
	{
		
		if(_argObj0)
		if (valid) 
		{
			if(_argObj0->type==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
				if (!_ptrObj0 )
					valid = 0;
			}
			else if(_argObj0->type==IS_LONG)
				_ptrObj0= (void *)_argObj0->value.lval;
			else if(_argObj0->type!=IS_NULL)
				valid = 0;
		}
		else
			valid = 0;
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxGridCellChoiceEditor_php(*(wxArrayString *) _ptrObj0 , _argBool0);
					break;
				case 1:
					_this = new wxGridCellChoiceEditor_php(*(wxArrayString *) _ptrObj0);
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellChoiceEditor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellChoiceEditor_php*) _this)->evnArray);
			array_init(((wxGridCellChoiceEditor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellChoiceEditor_php*) _this)->phpObj);
			*((wxGridCellChoiceEditor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellChoiceEditor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellChoiceEditor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!s!b!", &_argLong0 , &_argStr0 , &_argStr0_len , &_argBool0 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 3:
					_this = new wxGridCellChoiceEditor_php((long unsigned int)_argLong0 , &wxString(_argStr0, wxConvUTF8) , _argBool0);
					break;
				case 2:
					_this = new wxGridCellChoiceEditor_php((long unsigned int)_argLong0 , &wxString(_argStr0, wxConvUTF8));
					break;
				case 1:
					_this = new wxGridCellChoiceEditor_php((long unsigned int)_argLong0);
					break;
				case 0:
					_this = new wxGridCellChoiceEditor_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellChoiceEditor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellChoiceEditor_php*) _this)->evnArray);
			array_init(((wxGridCellChoiceEditor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellChoiceEditor_php*) _this)->phpObj);
			*((wxGridCellChoiceEditor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellChoiceEditor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellChoiceEditor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
void php_wxGridCellNumberEditor_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridCellNumberEditor, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	long _argLong0;
	long _argLong1;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "|l!l!", &_argLong0 , &_argLong1 ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 2:
					_this = new wxGridCellNumberEditor_php((int)_argLong0 , (int)_argLong1);
					break;
				case 1:
					_this = new wxGridCellNumberEditor_php((int)_argLong0);
					break;
				case 0:
					_this = new wxGridCellNumberEditor_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellNumberEditor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellNumberEditor_php*) _this)->evnArray);
			array_init(((wxGridCellNumberEditor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellNumberEditor_php*) _this)->phpObj);
			*((wxGridCellNumberEditor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellNumberEditor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellNumberEditor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
bool wxGridCellNumberEditor_php::HasRange() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "HasRange", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return Z_BVAL(retval);	}
	}
PHP_METHOD(php_wxGridCellNumberEditor, HasRange)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			bool ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellNumberEditor_php*)_this)->HasRange();
					break;
				default:
					break;
			}
			RETURN_BOOL(ret0)			
		}
	}
}
wxString wxGridCellNumberEditor_php::GetString() const{
	zval *args[0];
	zval retval, funcname;
	ZVAL_STRING(&funcname, "GetString", 0);
	
	
	
		
	if (call_user_function(NULL, (zval**) &this->phpObj, &funcname, &retval, 0, args TSRMLS_CC) == FAILURE) {
		wxMessageBox(_T("Failed method Call!\n"));
	}
		else{
		return wxString(Z_STRVAL(retval),wxConvUTF8);	}
	}
PHP_METHOD(php_wxGridCellNumberEditor, GetString)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			wxString ret0;
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					ret0 =  ((wxGridCellNumberEditor_php*)_this)->GetString();
					break;
				default:
					break;
			}
			char * ro2;ro2 = (char*)malloc(sizeof(wxChar)*(ret0.size()+1));strcpy ( ro2, (const char *) ret0.char_str() );RETURN_STRING( ro2 ,1)			
		}
	}
}
PHP_METHOD(php_wxGridCellNumberEditor, SetParameters)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellNumberEditor_php*)_this)->SetParameters(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
void php_wxGridCellTextEditor_destruction_handler(zend_rsrc_list_entry *rsrc TSRMLS_DC) 
{
	}			
PHP_METHOD(php_wxGridCellTextEditor, SetParameters)
{
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	
	if (zend_hash_find(Z_OBJPROP_P(getThis()), _wxResource, sizeof(_wxResource),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	id_to_find = Z_RESVAL_P(*tmp);
	_this = zend_list_find(id_to_find, &rsrc_type);
	
	char* _argStr0;
	int _argStr0_len;
	valid=1;
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s!", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 1:
					 ((wxGridCellTextEditor_php*)_this)->SetParameters(wxString(_argStr0, wxConvUTF8));
					break;
				default:
					break;
			}
			
		}
	}
}
PHP_METHOD(php_wxGridCellTextEditor, __construct)
{
	char _wxResource[] = "wxResource";
	int valid = 1;
	void *_this;
	valid=1;
	if (ZEND_NUM_ARGS()==0)
	{
		
		if(valid)
		{
			int gr = ZEND_NUM_ARGS(); 
			switch(gr)
			{
				case 0:
					_this = new wxGridCellTextEditor_php();
					break;
				default:
					break;
			}
			long id_to_find = zend_list_insert(_this, le_wxGridCellTextEditor);
			add_property_resource(getThis(), _wxResource, id_to_find);					
			MAKE_STD_ZVAL(((wxGridCellTextEditor_php*) _this)->evnArray);
			array_init(((wxGridCellTextEditor_php*) _this)->evnArray);
			MAKE_STD_ZVAL(((wxGridCellTextEditor_php*) _this)->phpObj);
			*((wxGridCellTextEditor_php*) _this)->phpObj = *getThis();
			zval_copy_ctor(((wxGridCellTextEditor_php*) _this)->phpObj);
			#ifdef ZTS 
			((wxGridCellTextEditor_php*) _this)->TSRMLS_C = TSRMLS_C;
			#endif
			
		}
	}
}
