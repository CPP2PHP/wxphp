/*
 * @author Mário Soares
 * @contributors Jefferson González
 * 
 * @license 
 * This file is part of wxPHP check the LICENSE file for information.
 * 
 * @description
 * Main start point for the wxWidgets php extension
 * 
 * @note
 * Some parts of this file are auto-generated by the wxPHP source maker
*/

#include "php_wxwidgets.h"
#include "app.h"

/**
 * Custom function to register global objects as constants
 */
BEGIN_EXTERN_C()
ZEND_API void wxphp_register_resource_constant(const char *name, uint name_len, void* resource, zend_class_entry* class_entry, int list_entry, int flags, int module_number TSRMLS_DC)
{
	zend_constant c;
	char _wxResource[] = "wxResource";
	
	object_init_ex(&c.value, class_entry);
	add_property_resource(&c.value, _wxResource, zend_list_insert(resource, list_entry));
	
	c.value.type = IS_OBJECT;
	c.flags = flags;
	c.name = zend_strndup(name, name_len-1);
	c.name_len = name_len;
	c.module_number = module_number;
	zend_register_constant(&c TSRMLS_CC);
}
END_EXTERN_C()

/**
 * Space reserved for the zend_class_entry declaration of each class
 */
#include "classes.h"

zend_class_entry *php_wxAboutDialogInfo_entry;
int le_wxAboutDialogInfo;

zend_class_entry *php_wxFrame_entry;
int le_wxFrame;

zend_class_entry *php_wxTopLevelWindow_entry;
int le_wxTopLevelWindow;

zend_class_entry *php_wxNonOwnedWindow_entry;
int le_wxNonOwnedWindow;

zend_class_entry *php_wxWindow_entry;
int le_wxWindow;

zend_class_entry *php_wxSize_entry;
int le_wxSize;

zend_class_entry *php_wxPoint_entry;
int le_wxPoint;

zend_class_entry *php_wxRealPoint_entry;
int le_wxRealPoint;

zend_class_entry *php_wxEvtHandler_entry;
int le_wxEvtHandler;

zend_class_entry *php_wxStatusBar_entry;
int le_wxStatusBar;

zend_class_entry *php_wxButton_entry;
int le_wxButton;

zend_class_entry *php_wxAnyButton_entry;
int le_wxAnyButton;

zend_class_entry *php_wxControl_entry;
int le_wxControl;

zend_class_entry *php_wxValidator_entry;
int le_wxValidator;

zend_class_entry *php_wxBitmapHandler_entry;
int le_wxBitmapHandler;

zend_class_entry *php_wxBitmap_entry;
int le_wxBitmap;

zend_class_entry *php_wxPalette_entry;
int le_wxPalette;

zend_class_entry *php_wxImage_entry;
int le_wxImage;

zend_class_entry *php_wxIcon_entry;
int le_wxIcon;

zend_class_entry *php_wxSplitterWindow_entry;
int le_wxSplitterWindow;

zend_class_entry *php_wxBoxSizer_entry;
int le_wxBoxSizer;

zend_class_entry *php_wxSizer_entry;
int le_wxSizer;

zend_class_entry *php_wxSizerItem_entry;
int le_wxSizerItem;

zend_class_entry *php_wxSizerFlags_entry;
int le_wxSizerFlags;

zend_class_entry *php_wxRect_entry;
int le_wxRect;

zend_class_entry *php_wxTreeCtrl_entry;
int le_wxTreeCtrl;

zend_class_entry *php_wxTreeItemId_entry;
int le_wxTreeItemId;

zend_class_entry *php_wxTreeItemData_entry;
int le_wxTreeItemData;

zend_class_entry *php_wxClientData_entry;
int le_wxClientData;

zend_class_entry *php_wxImageList_entry;
int le_wxImageList;

zend_class_entry *php_wxDC_entry;
int le_wxDC;

zend_class_entry *php_wxColour_entry;
int le_wxColour;

zend_class_entry *php_wxFont_entry;
int le_wxFont;

zend_class_entry *php_wxPanel_entry;
int le_wxPanel;

zend_class_entry *php_wxCheckListBox_entry;
int le_wxCheckListBox;

zend_class_entry *php_wxListBox_entry;
int le_wxListBox;

zend_class_entry *php_wxControlWithItems_entry;
int le_wxControlWithItems;

zend_class_entry *php_wxMenuBar_entry;
int le_wxMenuBar;

zend_class_entry *php_wxMenuEvent_entry;
int le_wxMenuEvent;

zend_class_entry *php_wxMenuItem_entry;
int le_wxMenuItem;

zend_class_entry *php_wxMenu_entry;
int le_wxMenu;

zend_class_entry *php_wxEvent_entry;
int le_wxEvent;

zend_class_entry *php_wxTreeEvent_entry;
int le_wxTreeEvent;

zend_class_entry *php_wxKeyEvent_entry;
int le_wxKeyEvent;

zend_class_entry *php_wxKeyboardState_entry;
int le_wxKeyboardState;

zend_class_entry *php_wxNotifyEvent_entry;
int le_wxNotifyEvent;

zend_class_entry *php_wxCommandEvent_entry;
int le_wxCommandEvent;

zend_class_entry *php_wxCloseEvent_entry;
int le_wxCloseEvent;

zend_class_entry *php_wxActivateEvent_entry;
int le_wxActivateEvent;

zend_class_entry *php_wxAuiManager_entry;
int le_wxAuiManager;

zend_class_entry *php_wxAuiDockArt_entry;
int le_wxAuiDockArt;

zend_class_entry *php_wxAuiPaneInfo_entry;
int le_wxAuiPaneInfo;

zend_class_entry *php_wxAuiManagerEvent_entry;
int le_wxAuiManagerEvent;

zend_class_entry *php_wxAuiNotebook_entry;
int le_wxAuiNotebook;

zend_class_entry *php_wxAuiNotebookEvent_entry;
int le_wxAuiNotebookEvent;

zend_class_entry *php_wxBookCtrlEvent_entry;
int le_wxBookCtrlEvent;

zend_class_entry *php_wxAuiDefaultToolBarArt_entry;
int le_wxAuiDefaultToolBarArt;

zend_class_entry *php_wxBookCtrlBase_entry;
int le_wxBookCtrlBase;

zend_class_entry *php_wxWithImages_entry;
int le_wxWithImages;

zend_class_entry *php_wxAcceleratorEntry_entry;
int le_wxAcceleratorEntry;

zend_class_entry *php_wxAcceleratorTable_entry;
int le_wxAcceleratorTable;

zend_class_entry *php_wxGDIObject_entry;
int le_wxGDIObject;

zend_class_entry *php_wxAnimation_entry;
int le_wxAnimation;

zend_class_entry *php_wxAnimationCtrl_entry;
int le_wxAnimationCtrl;

zend_class_entry *php_wxArtProvider_entry;
int le_wxArtProvider;

zend_class_entry *php_wxIconBundle_entry;
int le_wxIconBundle;

zend_class_entry *php_wxStyledTextCtrl_entry;
int le_wxStyledTextCtrl;

zend_class_entry *php_wxStyledTextEvent_entry;
int le_wxStyledTextEvent;

zend_class_entry *php_wxVersionInfo_entry;
int le_wxVersionInfo;

zend_class_entry *php_wxScrollBar_entry;
int le_wxScrollBar;

zend_class_entry *php_wxStaticText_entry;
int le_wxStaticText;

zend_class_entry *php_wxStatusBarPane_entry;
int le_wxStatusBarPane;

zend_class_entry *php_wxStaticLine_entry;
int le_wxStaticLine;

zend_class_entry *php_wxStaticBoxSizer_entry;
int le_wxStaticBoxSizer;

zend_class_entry *php_wxStaticBox_entry;
int le_wxStaticBox;

zend_class_entry *php_wxStaticBitmap_entry;
int le_wxStaticBitmap;

zend_class_entry *php_wxAuiToolBarItem_entry;
int le_wxAuiToolBarItem;

zend_class_entry *php_wxCheckBox_entry;
int le_wxCheckBox;

zend_class_entry *php_wxWrapSizer_entry;
int le_wxWrapSizer;

zend_class_entry *php_wxBitmapButton_entry;
int le_wxBitmapButton;

zend_class_entry *php_wxTextEntry_entry;
int le_wxTextEntry;

zend_class_entry *php_wxTextCompleter_entry;
int le_wxTextCompleter;

zend_class_entry *php_wxTextCtrl_entry;
int le_wxTextCtrl;

zend_class_entry *php_wxTextAttr_entry;
int le_wxTextAttr;

zend_class_entry *php_wxTextEntryDialog_entry;
int le_wxTextEntryDialog;

zend_class_entry *php_wxComboBox_entry;
int le_wxComboBox;

zend_class_entry *php_wxItemContainer_entry;
int le_wxItemContainer;

zend_class_entry *php_wxItemContainerImmutable_entry;
int le_wxItemContainerImmutable;

zend_class_entry *php_wxBitmapComboBox_entry;
int le_wxBitmapComboBox;

zend_class_entry *php_wxAuiToolBarEvent_entry;
int le_wxAuiToolBarEvent;

zend_class_entry *php_wxAuiToolBar_entry;
int le_wxAuiToolBar;

zend_class_entry *php_wxBannerWindow_entry;
int le_wxBannerWindow;

zend_class_entry *php_wxChoice_entry;
int le_wxChoice;

zend_class_entry *php_wxListEvent_entry;
int le_wxListEvent;

zend_class_entry *php_wxListCtrl_entry;
int le_wxListCtrl;

zend_class_entry *php_wxListItemAttr_entry;
int le_wxListItemAttr;

zend_class_entry *php_wxListItem_entry;
int le_wxListItem;

zend_class_entry *php_wxListbook_entry;
int le_wxListbook;

zend_class_entry *php_wxChildFocusEvent_entry;
int le_wxChildFocusEvent;

zend_class_entry *php_wxChoicebook_entry;
int le_wxChoicebook;

zend_class_entry *php_wxRadioBox_entry;
int le_wxRadioBox;

zend_class_entry *php_wxRadioButton_entry;
int le_wxRadioButton;

zend_class_entry *php_wxRearrangeCtrl_entry;
int le_wxRearrangeCtrl;

zend_class_entry *php_wxRearrangeDialog_entry;
int le_wxRearrangeDialog;

zend_class_entry *php_wxRearrangeList_entry;
int le_wxRearrangeList;

zend_class_entry *php_wxSlider_entry;
int le_wxSlider;

zend_class_entry *php_wxSpinCtrl_entry;
int le_wxSpinCtrl;

zend_class_entry *php_wxSpinButton_entry;
int le_wxSpinButton;

zend_class_entry *php_wxSpinEvent_entry;
int le_wxSpinEvent;

zend_class_entry *php_wxSplitterEvent_entry;
int le_wxSplitterEvent;

zend_class_entry *php_wxSplashScreen_entry;
int le_wxSplashScreen;

zend_class_entry *php_wxSizeEvent_entry;
int le_wxSizeEvent;

zend_class_entry *php_wxGauge_entry;
int le_wxGauge;

zend_class_entry *php_wxHtmlWindow_entry;
int le_wxHtmlWindow;

zend_class_entry *php_wxHtmlContainerCell_entry;
int le_wxHtmlContainerCell;

zend_class_entry *php_wxHtmlCell_entry;
int le_wxHtmlCell;

zend_class_entry *php_wxHtmlCellEvent_entry;
int le_wxHtmlCellEvent;

zend_class_entry *php_wxHtmlColourCell_entry;
int le_wxHtmlColourCell;

zend_class_entry *php_wxHtmlEasyPrinting_entry;
int le_wxHtmlEasyPrinting;

zend_class_entry *php_wxHtmlLinkEvent_entry;
int le_wxHtmlLinkEvent;

zend_class_entry *php_wxHtmlLinkInfo_entry;
int le_wxHtmlLinkInfo;

zend_class_entry *php_wxMouseEvent_entry;
int le_wxMouseEvent;

zend_class_entry *php_wxMouseState_entry;
int le_wxMouseState;

zend_class_entry *php_wxMoveEvent_entry;
int le_wxMoveEvent;

zend_class_entry *php_wxMouseCaptureLostEvent_entry;
int le_wxMouseCaptureLostEvent;

zend_class_entry *php_wxMouseCaptureChangedEvent_entry;
int le_wxMouseCaptureChangedEvent;

zend_class_entry *php_wxMouseEventsManager_entry;
int le_wxMouseEventsManager;

zend_class_entry *php_wxMessageDialog_entry;
int le_wxMessageDialog;

zend_class_entry *php_wxHtmlListBox_entry;
int le_wxHtmlListBox;

zend_class_entry *php_wxVListBox_entry;
int le_wxVListBox;

zend_class_entry *php_wxVScrolledWindow_entry;
int le_wxVScrolledWindow;

zend_class_entry *php_wxHtmlTag_entry;
int le_wxHtmlTag;

zend_class_entry *php_wxHyperlinkCtrl_entry;
int le_wxHyperlinkCtrl;

zend_class_entry *php_wxHyperlinkEvent_entry;
int le_wxHyperlinkEvent;

zend_class_entry *php_wxCursor_entry;
int le_wxCursor;

zend_class_entry *php_wxToggleButton_entry;
int le_wxToggleButton;

zend_class_entry *php_wxTimer_entry;
int le_wxTimer;

zend_class_entry *php_wxTimerEvent_entry;
int le_wxTimerEvent;

zend_class_entry *php_wxThreadEvent_entry;
int le_wxThreadEvent;

zend_class_entry *php_wxSearchCtrl_entry;
int le_wxSearchCtrl;

zend_class_entry *php_wxColourPickerEvent_entry;
int le_wxColourPickerEvent;

zend_class_entry *php_wxColourPickerCtrl_entry;
int le_wxColourPickerCtrl;

zend_class_entry *php_wxFontPickerCtrl_entry;
int le_wxFontPickerCtrl;

zend_class_entry *php_wxFontPickerEvent_entry;
int le_wxFontPickerEvent;

zend_class_entry *php_wxFilePickerCtrl_entry;
int le_wxFilePickerCtrl;

zend_class_entry *php_wxFindReplaceDialog_entry;
int le_wxFindReplaceDialog;

zend_class_entry *php_wxFindReplaceData_entry;
int le_wxFindReplaceData;

zend_class_entry *php_wxDirPickerCtrl_entry;
int le_wxDirPickerCtrl;

zend_class_entry *php_wxDirDialog_entry;
int le_wxDirDialog;

zend_class_entry *php_wxSpinDoubleEvent_entry;
int le_wxSpinDoubleEvent;

zend_class_entry *php_wxSpinCtrlDouble_entry;
int le_wxSpinCtrlDouble;

zend_class_entry *php_wxGenericDirCtrl_entry;
int le_wxGenericDirCtrl;

zend_class_entry *php_wxFileName_entry;
int le_wxFileName;

zend_class_entry *php_wxGridSizeEvent_entry;
int le_wxGridSizeEvent;

zend_class_entry *php_wxGridSizer_entry;
int le_wxGridSizer;

zend_class_entry *php_wxFlexGridSizer_entry;
int le_wxFlexGridSizer;

zend_class_entry *php_wxGridBagSizer_entry;
int le_wxGridBagSizer;

zend_class_entry *php_wxStdDialogButtonSizer_entry;
int le_wxStdDialogButtonSizer;

zend_class_entry *php_wxScrollEvent_entry;
int le_wxScrollEvent;

zend_class_entry *php_wxScrollWinEvent_entry;
int le_wxScrollWinEvent;

zend_class_entry *php_wxNotebook_entry;
int le_wxNotebook;

zend_class_entry *php_wxDialog_entry;
int le_wxDialog;

zend_class_entry *php_wxSysColourChangedEvent_entry;
int le_wxSysColourChangedEvent;

zend_class_entry *php_wxSymbolPickerDialog_entry;
int le_wxSymbolPickerDialog;

zend_class_entry *php_wxGBPosition_entry;
int le_wxGBPosition;

zend_class_entry *php_wxGBSpan_entry;
int le_wxGBSpan;

zend_class_entry *php_wxGBSizerItem_entry;
int le_wxGBSizerItem;

zend_class_entry *php_wxPopupWindow_entry;
int le_wxPopupWindow;

zend_class_entry *php_wxMDIChildFrame_entry;
int le_wxMDIChildFrame;

zend_class_entry *php_wxMDIClientWindow_entry;
int le_wxMDIClientWindow;

zend_class_entry *php_wxMDIParentFrame_entry;
int le_wxMDIParentFrame;

zend_class_entry *php_wxMiniFrame_entry;
int le_wxMiniFrame;

zend_class_entry *php_wxPropertySheetDialog_entry;
int le_wxPropertySheetDialog;

zend_class_entry *php_wxWizard_entry;
int le_wxWizard;

zend_class_entry *php_wxWizardEvent_entry;
int le_wxWizardEvent;

zend_class_entry *php_wxWizardPage_entry;
int le_wxWizardPage;

zend_class_entry *php_wxWizardPageSimple_entry;
int le_wxWizardPageSimple;

zend_class_entry *php_wxWindowModalDialogEvent_entry;
int le_wxWindowModalDialogEvent;

zend_class_entry *php_wxTreeListItem_entry;
int le_wxTreeListItem;

zend_class_entry *php_wxTreebook_entry;
int le_wxTreebook;

zend_class_entry *php_wxTreeListCtrl_entry;
int le_wxTreeListCtrl;

zend_class_entry *php_wxSound_entry;
int le_wxSound;

zend_class_entry *php_wxSimpleHtmlListBox_entry;
int le_wxSimpleHtmlListBox;

zend_class_entry *php_wxFileSystem_entry;
int le_wxFileSystem;

zend_class_entry *php_wxFileSystemHandler_entry;
int le_wxFileSystemHandler;

zend_class_entry *php_wxNativeFontInfo_entry;
int le_wxNativeFontInfo;

zend_class_entry *php_wxDateEvent_entry;
int le_wxDateEvent;

zend_class_entry *php_wxBitmapToggleButton_entry;
int le_wxBitmapToggleButton;

zend_class_entry *php_wxCalendarDateAttr_entry;
int le_wxCalendarDateAttr;

zend_class_entry *php_wxCalendarCtrl_entry;
int le_wxCalendarCtrl;

zend_class_entry *php_wxMask_entry;
int le_wxMask;

zend_class_entry *php_wxToolTip_entry;
int le_wxToolTip;

zend_class_entry *php_wxCaret_entry;
int le_wxCaret;

zend_class_entry *php_wxRegion_entry;
int le_wxRegion;

zend_class_entry *php_wxPoint2DDouble_entry;
int le_wxPoint2DDouble;

zend_class_entry *php_wxPoint2DInt_entry;
int le_wxPoint2DInt;

zend_class_entry *php_wxPopupTransientWindow_entry;
int le_wxPopupTransientWindow;

zend_class_entry *php_wxProcessEvent_entry;
int le_wxProcessEvent;

zend_class_entry *php_wxProgressDialog_entry;
int le_wxProgressDialog;

zend_class_entry *php_wxGraphicsMatrix_entry;
int le_wxGraphicsMatrix;

zend_class_entry *php_wxGraphicsRenderer_entry;
int le_wxGraphicsRenderer;

zend_class_entry *php_wxWindowDC_entry;
int le_wxWindowDC;

zend_class_entry *php_wxWindowCreateEvent_entry;
int le_wxWindowCreateEvent;

zend_class_entry *php_wxWindowDestroyEvent_entry;
int le_wxWindowDestroyEvent;

zend_class_entry *php_wxGraphicsGradientStop_entry;
int le_wxGraphicsGradientStop;

zend_class_entry *php_wxGraphicsGradientStops_entry;
int le_wxGraphicsGradientStops;

zend_class_entry *php_wxEventFilter_entry;
int le_wxEventFilter;

zend_class_entry *php_wxEventBlocker_entry;
int le_wxEventBlocker;

zend_class_entry *php_wxEraseEvent_entry;
int le_wxEraseEvent;

zend_class_entry *php_wxEventLoopActivator_entry;
int le_wxEventLoopActivator;

zend_class_entry *php_wxEventLoopBase_entry;
int le_wxEventLoopBase;

zend_class_entry *php_wxPickerBase_entry;
int le_wxPickerBase;

zend_class_entry *php_wxGridEvent_entry;
int le_wxGridEvent;

zend_class_entry *php_wxUpdateUIEvent_entry;
int le_wxUpdateUIEvent;

zend_class_entry *php_wxHelpEvent_entry;
int le_wxHelpEvent;

zend_class_entry *php_wxLayoutConstraints_entry;
int le_wxLayoutConstraints;

zend_class_entry *php_wxDropTarget_entry;
int le_wxDropTarget;

zend_class_entry *php_wxObject_entry;
int le_wxObject;

zend_class_entry *php_wxFFile_entry;
int le_wxFFile;

zend_class_entry *php_wxFSFile_entry;
int le_wxFSFile;

zend_class_entry *php_wxInputStream_entry;
int le_wxInputStream;

zend_class_entry *php_wxStreamBase_entry;
int le_wxStreamBase;

zend_class_entry *php_wxThread_entry;
int le_wxThread;

zend_class_entry *php_wxTimePickerCtrl_entry;
int le_wxTimePickerCtrl;

zend_class_entry *php_wxOutputStream_entry;
int le_wxOutputStream;

zend_class_entry *php_wxColourDialog_entry;
int le_wxColourDialog;

zend_class_entry *php_wxColourData_entry;
int le_wxColourData;

zend_class_entry *php_wxFileDialog_entry;
int le_wxFileDialog;

zend_class_entry *php_wxFontData_entry;
int le_wxFontData;

zend_class_entry *php_wxFontDialog_entry;
int le_wxFontDialog;

zend_class_entry *php_wxThreadHelper_entry;
int le_wxThreadHelper;

zend_class_entry *php_wxToolBar_entry;
int le_wxToolBar;

zend_class_entry *php_wxAuiTabArt_entry;
int le_wxAuiTabArt;

zend_class_entry *php_wxToolBarToolBase_entry;
int le_wxToolBarToolBase;

zend_class_entry *php_wxCalendarEvent_entry;
int le_wxCalendarEvent;

zend_class_entry *php_wxGrid_entry;
int le_wxGrid;

zend_class_entry *php_wxGridCellAttr_entry;
int le_wxGridCellAttr;

zend_class_entry *php_wxGridCellAttrProvider_entry;
int le_wxGridCellAttrProvider;

zend_class_entry *php_wxGridCellBoolEditor_entry;
int le_wxGridCellBoolEditor;

zend_class_entry *php_wxGridCellChoiceEditor_entry;
int le_wxGridCellChoiceEditor;

zend_class_entry *php_wxGridCellDateTimeRenderer_entry;
int le_wxGridCellDateTimeRenderer;

zend_class_entry *php_wxGridCellBoolRenderer_entry;
int le_wxGridCellBoolRenderer;

zend_class_entry *php_wxGridCellAutoWrapStringRenderer_entry;
int le_wxGridCellAutoWrapStringRenderer;

zend_class_entry *php_wxGridCellAutoWrapStringEditor_entry;
int le_wxGridCellAutoWrapStringEditor;

zend_class_entry *php_wxGridCellEditor_entry;
int le_wxGridCellEditor;

zend_class_entry *php_wxGridCellEnumEditor_entry;
int le_wxGridCellEnumEditor;

zend_class_entry *php_wxGridCellEnumRenderer_entry;
int le_wxGridCellEnumRenderer;

zend_class_entry *php_wxGridCellFloatEditor_entry;
int le_wxGridCellFloatEditor;

zend_class_entry *php_wxGridCellFloatRenderer_entry;
int le_wxGridCellFloatRenderer;

zend_class_entry *php_wxGridCellNumberEditor_entry;
int le_wxGridCellNumberEditor;

zend_class_entry *php_wxGridCellNumberRenderer_entry;
int le_wxGridCellNumberRenderer;

zend_class_entry *php_wxGridCellRenderer_entry;
int le_wxGridCellRenderer;

zend_class_entry *php_wxGridCellStringRenderer_entry;
int le_wxGridCellStringRenderer;

zend_class_entry *php_wxGridCellTextEditor_entry;
int le_wxGridCellTextEditor;

zend_class_entry *php_wxGridColumnHeaderRenderer_entry;
int le_wxGridColumnHeaderRenderer;

zend_class_entry *php_wxGridColumnHeaderRendererDefault_entry;
int le_wxGridColumnHeaderRendererDefault;

zend_class_entry *php_wxGridCornerHeaderRenderer_entry;
int le_wxGridCornerHeaderRenderer;

zend_class_entry *php_wxGridCornerHeaderRendererDefault_entry;
int le_wxGridCornerHeaderRendererDefault;

zend_class_entry *php_wxGridEditorCreatedEvent_entry;
int le_wxGridEditorCreatedEvent;

zend_class_entry *php_wxGridHeaderLabelsRenderer_entry;
int le_wxGridHeaderLabelsRenderer;

zend_class_entry *php_wxGridRangeSelectEvent_entry;
int le_wxGridRangeSelectEvent;

zend_class_entry *php_wxGridRowHeaderRenderer_entry;
int le_wxGridRowHeaderRenderer;

zend_class_entry *php_wxGridRowHeaderRendererDefault_entry;
int le_wxGridRowHeaderRendererDefault;

zend_class_entry *php_wxGridSizesInfo_entry;
int le_wxGridSizesInfo;

zend_class_entry *php_wxGridTableBase_entry;
int le_wxGridTableBase;

zend_class_entry *php_wxGridUpdateLocker_entry;
int le_wxGridUpdateLocker;

zend_class_entry *php_wxGridCellCoords_entry;
int le_wxGridCellCoords;

zend_class_entry *php_wxScrolledWindow_entry;
int le_wxScrolledWindow;

zend_class_entry *php_wxDatePickerCtrl_entry;
int le_wxDatePickerCtrl;

zend_class_entry *php_wxPasswordEntryDialog_entry;
int le_wxPasswordEntryDialog;

zend_class_entry *php_wxScreenDC_entry;
int le_wxScreenDC;

zend_class_entry *php_wxCollapsiblePane_entry;
int le_wxCollapsiblePane;

zend_class_entry *php_wxCollapsiblePaneEvent_entry;
int le_wxCollapsiblePaneEvent;

zend_class_entry *php_wxComboCtrl_entry;
int le_wxComboCtrl;

zend_class_entry *php_wxComboPopup_entry;
int le_wxComboPopup;

zend_class_entry *php_wxDataViewCtrl_entry;
int le_wxDataViewCtrl;

zend_class_entry *php_wxDataViewItem_entry;
int le_wxDataViewItem;

zend_class_entry *php_wxDataViewColumn_entry;
int le_wxDataViewColumn;

zend_class_entry *php_wxDataViewRenderer_entry;
int le_wxDataViewRenderer;

zend_class_entry *php_wxDataViewModel_entry;
int le_wxDataViewModel;

zend_class_entry *php_wxDataViewModelNotifier_entry;
int le_wxDataViewModelNotifier;

zend_class_entry *php_wxRefCounter_entry;
int le_wxRefCounter;

zend_class_entry *php_wxDataViewListCtrl_entry;
int le_wxDataViewListCtrl;

zend_class_entry *php_wxDataViewListStore_entry;
int le_wxDataViewListStore;

zend_class_entry *php_wxDataViewListModel_entry;
int le_wxDataViewListModel;

zend_class_entry *php_wxDataViewEvent_entry;
int le_wxDataViewEvent;

zend_class_entry *php_wxDataFormat_entry;
int le_wxDataFormat;

zend_class_entry *php_wxDataInputStream_entry;
int le_wxDataInputStream;

zend_class_entry *php_wxDataObject_entry;
int le_wxDataObject;

zend_class_entry *php_wxDataObjectComposite_entry;
int le_wxDataObjectComposite;

zend_class_entry *php_wxDataObjectSimple_entry;
int le_wxDataObjectSimple;

zend_class_entry *php_wxDataOutputStream_entry;
int le_wxDataOutputStream;

zend_class_entry *php_wxDataViewBitmapRenderer_entry;
int le_wxDataViewBitmapRenderer;

zend_class_entry *php_wxDataViewChoiceRenderer_entry;
int le_wxDataViewChoiceRenderer;

zend_class_entry *php_wxDataViewCustomRenderer_entry;
int le_wxDataViewCustomRenderer;

zend_class_entry *php_wxDataViewDateRenderer_entry;
int le_wxDataViewDateRenderer;

zend_class_entry *php_wxDataViewIconText_entry;
int le_wxDataViewIconText;

zend_class_entry *php_wxDataViewIconTextRenderer_entry;
int le_wxDataViewIconTextRenderer;

zend_class_entry *php_wxDataViewIndexListModel_entry;
int le_wxDataViewIndexListModel;

zend_class_entry *php_wxDataViewItemAttr_entry;
int le_wxDataViewItemAttr;

zend_class_entry *php_wxDataViewProgressRenderer_entry;
int le_wxDataViewProgressRenderer;

zend_class_entry *php_wxDataViewSpinRenderer_entry;
int le_wxDataViewSpinRenderer;

zend_class_entry *php_wxDataViewTextRenderer_entry;
int le_wxDataViewTextRenderer;

zend_class_entry *php_wxDataViewToggleRenderer_entry;
int le_wxDataViewToggleRenderer;

zend_class_entry *php_wxDataViewTreeCtrl_entry;
int le_wxDataViewTreeCtrl;

zend_class_entry *php_wxDataViewTreeStore_entry;
int le_wxDataViewTreeStore;

zend_class_entry *php_wxDataViewVirtualListModel_entry;
int le_wxDataViewVirtualListModel;

zend_class_entry *php_wxVariant_entry;
int le_wxVariant;

zend_class_entry *php_wxVariantData_entry;
int le_wxVariantData;

zend_class_entry *php_wxClassInfo_entry;
int le_wxClassInfo;

zend_class_entry *php_wxColourDatabase_entry;
int le_wxColourDatabase;

zend_class_entry *php_wxClipboard_entry;
int le_wxClipboard;

zend_class_entry *php_wxClipboardTextEvent_entry;
int le_wxClipboardTextEvent;

zend_class_entry *php_wxListView_entry;
int le_wxListView;

zend_class_entry *php_wxConfigBase_entry;
int le_wxConfigBase;

zend_class_entry *php_wxHeaderCtrlEvent_entry;
int le_wxHeaderCtrlEvent;

zend_class_entry *php_wxHeaderCtrl_entry;
int le_wxHeaderCtrl;

zend_class_entry *php_wxHeaderColumn_entry;
int le_wxHeaderColumn;

zend_class_entry *php_wxHeaderCtrlSimple_entry;
int le_wxHeaderCtrlSimple;

zend_class_entry *php_wxHeaderColumnSimple_entry;
int le_wxHeaderColumnSimple;

zend_class_entry *php_wxSettableHeaderColumn_entry;
int le_wxSettableHeaderColumn;

zend_class_entry *php_wxSetCursorEvent_entry;
int le_wxSetCursorEvent;

zend_class_entry *php_wxIconizeEvent_entry;
int le_wxIconizeEvent;

zend_class_entry *php_wxIdleEvent_entry;
int le_wxIdleEvent;

zend_class_entry *php_wxPen_entry;
int le_wxPen;

zend_class_entry *php_wxEditableListBox_entry;
int le_wxEditableListBox;

zend_class_entry *php_wxFileCtrlEvent_entry;
int le_wxFileCtrlEvent;

zend_class_entry *php_wxFileCtrl_entry;
int le_wxFileCtrl;

zend_class_entry *php_wxProcess_entry;
int le_wxProcess;

zend_class_entry *php_wxVarVScrollHelper_entry;
int le_wxVarVScrollHelper;

zend_class_entry *php_wxVarScrollHelperBase_entry;
int le_wxVarScrollHelperBase;

zend_class_entry *php_wxTextValidator_entry;
int le_wxTextValidator;

zend_class_entry *php_wxHScrolledWindow_entry;
int le_wxHScrolledWindow;

zend_class_entry *php_wxVarHScrollHelper_entry;
int le_wxVarHScrollHelper;

zend_class_entry *php_wxVarHVScrollHelper_entry;
int le_wxVarHVScrollHelper;

zend_class_entry *php_wxInfoBar_entry;
int le_wxInfoBar;

zend_class_entry *php_wxRichToolTip_entry;
int le_wxRichToolTip;

zend_class_entry *php_wxPosition_entry;
int le_wxPosition;

zend_class_entry *php_wxMutex_entry;
int le_wxMutex;

zend_class_entry *php_wxMutexLocker_entry;
int le_wxMutexLocker;

zend_class_entry *php_wxXmlResource_entry;
int le_wxXmlResource;

zend_class_entry *php_wxGenericValidator_entry;
int le_wxGenericValidator;

zend_class_entry *php_wxSashWindow_entry;
int le_wxSashWindow;

zend_class_entry *php_wxSashEvent_entry;
int le_wxSashEvent;

zend_class_entry *php_wxSashLayoutWindow_entry;
int le_wxSashLayoutWindow;

zend_class_entry *php_wxSemaphore_entry;
int le_wxSemaphore;

zend_class_entry *php_wxShowEvent_entry;
int le_wxShowEvent;

zend_class_entry *php_wxAuiToolBarArt_entry;
int le_wxAuiToolBarArt;

zend_class_entry *php_wxBrush_entry;
int le_wxBrush;

zend_class_entry *php_wxPlatformInfo_entry;
int le_wxPlatformInfo;

zend_class_entry *php_wxPageSetupDialog_entry;
int le_wxPageSetupDialog;

zend_class_entry *php_wxPageSetupDialogData_entry;
int le_wxPageSetupDialogData;

zend_class_entry *php_wxPrintDialog_entry;
int le_wxPrintDialog;

zend_class_entry *php_wxPrintDialogData_entry;
int le_wxPrintDialogData;

zend_class_entry *php_wxPrintData_entry;
int le_wxPrintData;

zend_class_entry *php_wxPostScriptDC_entry;
int le_wxPostScriptDC;

zend_class_entry *php_wxPrintPreview_entry;
int le_wxPrintPreview;

zend_class_entry *php_wxPrinter_entry;
int le_wxPrinter;

zend_class_entry *php_wxPrinterDC_entry;
int le_wxPrinterDC;

zend_class_entry *php_wxPrintout_entry;
int le_wxPrintout;

zend_class_entry *php_wxPreviewFrame_entry;
int le_wxPreviewFrame;

zend_class_entry *php_wxPreviewControlBar_entry;
int le_wxPreviewControlBar;

zend_class_entry *php_wxPreviewCanvas_entry;
int le_wxPreviewCanvas;

zend_class_entry *php_wxSingleChoiceDialog_entry;
int le_wxSingleChoiceDialog;

zend_class_entry *php_wxHtmlDCRenderer_entry;
int le_wxHtmlDCRenderer;

zend_class_entry *php_wxHtmlFilter_entry;
int le_wxHtmlFilter;

zend_class_entry *php_wxHtmlHelpController_entry;
int le_wxHtmlHelpController;

zend_class_entry *php_wxHtmlHelpData_entry;
int le_wxHtmlHelpData;

zend_class_entry *php_wxHtmlHelpDialog_entry;
int le_wxHtmlHelpDialog;

zend_class_entry *php_wxHtmlHelpFrame_entry;
int le_wxHtmlHelpFrame;

zend_class_entry *php_wxHtmlHelpWindow_entry;
int le_wxHtmlHelpWindow;

zend_class_entry *php_wxHtmlModalHelp_entry;
int le_wxHtmlModalHelp;

zend_class_entry *php_wxHtmlPrintout_entry;
int le_wxHtmlPrintout;

zend_class_entry *php_wxHtmlRenderingInfo_entry;
int le_wxHtmlRenderingInfo;

zend_class_entry *php_wxHtmlRenderingStyle_entry;
int le_wxHtmlRenderingStyle;

zend_class_entry *php_wxHtmlTagHandler_entry;
int le_wxHtmlTagHandler;

zend_class_entry *php_wxHtmlTagsModule_entry;
int le_wxHtmlTagsModule;

zend_class_entry *php_wxModule_entry;
int le_wxModule;

zend_class_entry *php_wxHtmlWidgetCell_entry;
int le_wxHtmlWidgetCell;

zend_class_entry *php_wxHtmlWinParser_entry;
int le_wxHtmlWinParser;

zend_class_entry *php_wxHtmlWinTagHandler_entry;
int le_wxHtmlWinTagHandler;

zend_class_entry *php_wxAutoBufferedPaintDC_entry;
int le_wxAutoBufferedPaintDC;

zend_class_entry *php_wxBufferedDC_entry;
int le_wxBufferedDC;

zend_class_entry *php_wxBufferedPaintDC_entry;
int le_wxBufferedPaintDC;

zend_class_entry *php_wxClientDC_entry;
int le_wxClientDC;

zend_class_entry *php_wxPaintEvent_entry;
int le_wxPaintEvent;

zend_class_entry *php_wxPaintDC_entry;
int le_wxPaintDC;

zend_class_entry *php_wxMemoryDC_entry;
int le_wxMemoryDC;

zend_class_entry *php_wxMirrorDC_entry;
int le_wxMirrorDC;

zend_class_entry *php_wxDCClipper_entry;
int le_wxDCClipper;

zend_class_entry *php_wxFontList_entry;
int le_wxFontList;

zend_class_entry *php_wxPenList_entry;
int le_wxPenList;

zend_class_entry *php_wxPaletteChangedEvent_entry;
int le_wxPaletteChangedEvent;

zend_class_entry *php_wxRendererNative_entry;
int le_wxRendererNative;

zend_class_entry *php_wxImageHandler_entry;
int le_wxImageHandler;

zend_class_entry *php_wxInitDialogEvent_entry;
int le_wxInitDialogEvent;

zend_class_entry *php_wxMaximizeEvent_entry;
int le_wxMaximizeEvent;

zend_class_entry *php_wxNavigationKeyEvent_entry;
int le_wxNavigationKeyEvent;

zend_class_entry *php_wxPathList_entry;
int le_wxPathList;

zend_class_entry *php_wxCriticalSection_entry;
int le_wxCriticalSection;

zend_class_entry *php_wxCriticalSectionLocker_entry;
int le_wxCriticalSectionLocker;

zend_class_entry *php_wxCondition_entry;
int le_wxCondition;

zend_class_entry *php_wxBusyCursor_entry;
int le_wxBusyCursor;

zend_class_entry *php_wxBusyInfo_entry;
int le_wxBusyInfo;

zend_class_entry *php_wxXmlResourceHandler_entry;
int le_wxXmlResourceHandler;

zend_class_entry *php_wxXmlNode_entry;
int le_wxXmlNode;

zend_class_entry *php_wxXmlDocument_entry;
int le_wxXmlDocument;

zend_class_entry *php_wxXmlAttribute_entry;
int le_wxXmlAttribute;

zend_class_entry *php_wxLayoutAlgorithm_entry;
int le_wxLayoutAlgorithm;

zend_class_entry *php_wxJoystick_entry;
int le_wxJoystick;

zend_class_entry *php_wxJoystickEvent_entry;
int le_wxJoystickEvent;

zend_class_entry *php_wxFocusEvent_entry;
int le_wxFocusEvent;

zend_class_entry *php_wxFontMapper_entry;
int le_wxFontMapper;

zend_class_entry *php_wxFontEnumerator_entry;
int le_wxFontEnumerator;

zend_class_entry *php_wxFFileInputStream_entry;
int le_wxFFileInputStream;

zend_class_entry *php_wxFFileOutputStream_entry;
int le_wxFFileOutputStream;

zend_class_entry *php_wxFFileStream_entry;
int le_wxFFileStream;

zend_class_entry *php_wxFile_entry;
int le_wxFile;

zend_class_entry *php_wxFileConfig_entry;
int le_wxFileConfig;

zend_class_entry *php_wxFileDirPickerEvent_entry;
int le_wxFileDirPickerEvent;

zend_class_entry *php_wxFileHistory_entry;
int le_wxFileHistory;

zend_class_entry *php_wxFileInputStream_entry;
int le_wxFileInputStream;

zend_class_entry *php_wxFileDropTarget_entry;
int le_wxFileDropTarget;

zend_class_entry *php_wxFileOutputStream_entry;
int le_wxFileOutputStream;

zend_class_entry *php_wxFileStream_entry;
int le_wxFileStream;

zend_class_entry *php_wxFileSystemWatcher_entry;
int le_wxFileSystemWatcher;

zend_class_entry *php_wxFileSystemWatcherEvent_entry;
int le_wxFileSystemWatcherEvent;

zend_class_entry *php_wxFileType_entry;
int le_wxFileType;

zend_class_entry *php_wxFileTypeInfo_entry;
int le_wxFileTypeInfo;

zend_class_entry *php_wxStopWatch_entry;
int le_wxStopWatch;

zend_class_entry *php_wxSingleInstanceChecker_entry;
int le_wxSingleInstanceChecker;

zend_class_entry *php_wxStandardPaths_entry;
int le_wxStandardPaths;

zend_class_entry *php_wxLog_entry;
int le_wxLog;

zend_class_entry *php_wxLogBuffer_entry;
int le_wxLogBuffer;

zend_class_entry *php_wxLogChain_entry;
int le_wxLogChain;

zend_class_entry *php_wxLogGui_entry;
int le_wxLogGui;

zend_class_entry *php_wxLogInterposer_entry;
int le_wxLogInterposer;

zend_class_entry *php_wxLogWindow_entry;
int le_wxLogWindow;

zend_class_entry *php_wxLogTextCtrl_entry;
int le_wxLogTextCtrl;

zend_class_entry *php_wxTextDataObject_entry;
int le_wxTextDataObject;

zend_class_entry *php_wxFileDataObject_entry;
int le_wxFileDataObject;

zend_class_entry *php_wxBitmapDataObject_entry;
int le_wxBitmapDataObject;

zend_class_entry *php_wxURLDataObject_entry;
int le_wxURLDataObject;

zend_class_entry *php_wxCustomDataObject_entry;
int le_wxCustomDataObject;

zend_class_entry *php_wxTextDropTarget_entry;
int le_wxTextDropTarget;

zend_class_entry *php_wxDisplay_entry;
int le_wxDisplay;

zend_class_entry *php_wxDisplayChangedEvent_entry;
int le_wxDisplayChangedEvent;

zend_class_entry *php_wxCalculateLayoutEvent_entry;
int le_wxCalculateLayoutEvent;

zend_class_entry *php_wxContextMenuEvent_entry;
int le_wxContextMenuEvent;

zend_class_entry *php_wxDropFilesEvent_entry;
int le_wxDropFilesEvent;

zend_class_entry *php_wxQueryLayoutInfoEvent_entry;
int le_wxQueryLayoutInfoEvent;

zend_class_entry *php_wxToolbook_entry;
int le_wxToolbook;

zend_class_entry *php_wxVideoMode_entry;
int le_wxVideoMode;

zend_class_entry *php_wxRibbonControl_entry;
int le_wxRibbonControl;

zend_class_entry *php_wxRibbonBar_entry;
int le_wxRibbonBar;

zend_class_entry *php_wxRibbonBarEvent_entry;
int le_wxRibbonBarEvent;

zend_class_entry *php_wxRibbonButtonBar_entry;
int le_wxRibbonButtonBar;

zend_class_entry *php_wxRibbonButtonBarEvent_entry;
int le_wxRibbonButtonBarEvent;

zend_class_entry *php_wxRibbonArtProvider_entry;
int le_wxRibbonArtProvider;

zend_class_entry *php_wxRibbonGallery_entry;
int le_wxRibbonGallery;

zend_class_entry *php_wxRibbonGalleryEvent_entry;
int le_wxRibbonGalleryEvent;

zend_class_entry *php_wxRibbonPage_entry;
int le_wxRibbonPage;

zend_class_entry *php_wxRibbonPanel_entry;
int le_wxRibbonPanel;

zend_class_entry *php_wxRibbonToolBar_entry;
int le_wxRibbonToolBar;

zend_class_entry *php_wxRibbonButtonBarButtonBase_entry;
int le_wxRibbonButtonBarButtonBase;

zend_class_entry *php_wxRibbonGalleryItem_entry;
int le_wxRibbonGalleryItem;

zend_class_entry *php_wxRibbonToolBarToolBase_entry;
int le_wxRibbonToolBarToolBase;

zend_class_entry *php_wxTaskBarIcon_entry;
int le_wxTaskBarIcon;

zend_class_entry *php_wxTaskBarIconEvent_entry;
int le_wxTaskBarIconEvent;

zend_class_entry *php_wxTimerRunner_entry;
int le_wxTimerRunner;

zend_class_entry *php_wxNotificationMessage_entry;
int le_wxNotificationMessage;


/**
 * Predefined handcoded class entry for wxApp
 */
zend_class_entry *php_wxApp_entry;
int le_wxApp;

/**
 * Predefined handcoded set of functions
 */
PHP_FUNCTION(php_wxInitialize)
{
	wxInitAllImageHandlers();
	RETVAL_BOOL(wxInitialize());
}

PHP_FUNCTION(php_wxInitAllImageHandlers)
{
	wxInitAllImageHandlers();
	RETVAL_TRUE;
}

PHP_FUNCTION(php_wxExecute)
{
	char* _argStr0;
	int _argStr0_len;
    
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "s", &_argStr0 , &_argStr0_len ) == SUCCESS)
	{
		long ret0;
		ret0 = wxExecute(wxString(_argStr0, wxConvUTF8));
		
		RETURN_LONG((long)ret0)
	}
}

PHP_FUNCTION(php_wxEntry)
{
	int argc = 1;
	char *argv[2] = { "wxPHP", NULL };
	
	RETVAL_LONG(wxEntry(argc,argv));
}

PHP_FUNCTION(php_wxAboutBox)
{
    zval **tmp;
	int id_to_find;
	wxAboutDialogInfo *property;
	zval *objvar;
	
	if(zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, (char *)"O", &objvar, php_wxAboutDialogInfo_entry) == FAILURE)
	{
		RETURN_NULL();
	}
	
	if(zend_hash_find(Z_OBJPROP_P(objvar), (char *)"wxResource", sizeof("wxResource"),  (void **)&tmp) == FAILURE) 
	{
		return;
	}
	
	id_to_find = Z_LVAL_PP(tmp);
	
	property = (wxAboutDialogInfo*) zend_list_find(id_to_find, &le_wxAboutDialogInfo);
	
	wxAboutBox(*property);
}

/**
 * Space reserved for autogenerated functions
 */
PHP_FUNCTION(php_wxHandleFatalExceptions)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxHandleFatalExceptions\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool doIt0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&doIt0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "|b", &doIt0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxHandleFatalExceptions())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxHandleFatalExceptions());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxHandleFatalExceptions(doIt0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxHandleFatalExceptions(doIt0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxUninitialize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxUninitialize\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
	//Parameters for overload 1
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload1_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxUninitialize()\n\n");
				#endif
				wxUninitialize();


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxUninitialize()\n\n");
				#endif
				wxUninitialize();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxWakeUpIdle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxWakeUpIdle\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxWakeUpIdle()\n\n");
				#endif
				wxWakeUpIdle();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxYield)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxYield\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxYield())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxYield());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSafeYield)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSafeYield\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* win0 = 0;
	void* object_pointer0_0 = 0;
	bool onlyIfNeeded0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|zb' (&win0, &onlyIfNeeded0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "|zb", &win0, &onlyIfNeeded0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(win0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(win0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(win0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(win0);
				}
				else if(Z_TYPE_P(win0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSafeYield())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxSafeYield());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSafeYield((wxWindow*) object_pointer0_0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxSafeYield((wxWindow*) object_pointer0_0));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSafeYield((wxWindow*) object_pointer0_0, onlyIfNeeded0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxSafeYield((wxWindow*) object_pointer0_0, onlyIfNeeded0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxExit)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxExit\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxExit()\n\n");
				#endif
				wxExit();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFromString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFromString\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	zval* font0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* string1;
	long string_len1;
	zval* colour1 = 0;
	void* object_pointer1_1 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sz' (&string0, &string_len0, &font0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sz", &string0, &string_len0, &font0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(font0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(font0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(font0) == IS_LONG)
				{
					object_pointer0_1 = Z_LVAL_P(font0);
				}
				else if(Z_TYPE_P(font0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sz' (&string1, &string_len1, &colour1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sz", &string1, &string_len1, &colour1 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(colour1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colour1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour1) == IS_LONG)
				{
					object_pointer1_1 = Z_LVAL_P(colour1);
				}
				else if(Z_TYPE_P(colour1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxFromString(wxString(string0, wxConvUTF8), (wxFont*) object_pointer0_1))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxFromString(wxString(string0, wxConvUTF8), (wxFont*) object_pointer0_1));


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxFromString(wxString(string1, wxConvUTF8), (wxColour*) object_pointer1_1))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxFromString(wxString(string1, wxConvUTF8), (wxColour*) object_pointer1_1));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxToString)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxToString\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* font0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
	//Parameters for overload 1
	zval* colour1 = 0;
	void* object_pointer1_0 = 0;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&font0, php_wxFont_entry)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "O", &font0, php_wxFont_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(font0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(font0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(font0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(font0);
				}
				else if(Z_TYPE_P(font0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&colour1, php_wxColour_entry)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "O", &colour1, php_wxColour_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(colour1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colour1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colour1) == IS_LONG)
				{
					object_pointer1_0 = Z_LVAL_P(colour1);
				}
				else if(Z_TYPE_P(colour1) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxToString(*(wxFont*) object_pointer0_0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxToString(*(wxFont*) object_pointer0_0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxToString(*(wxColour*) object_pointer1_0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxToString(*(wxColour*) object_pointer1_0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSafeShowMessage)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSafeShowMessage\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* title0;
	long title_len0;
	char* text0;
	long text_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&title0, &title_len0, &text0, &text_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &title0, &title_len0, &text0, &text_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSafeShowMessage(wxString(title0, wxConvUTF8), wxString(text0, wxConvUTF8))\n\n");
				#endif
				wxSafeShowMessage(wxString(title0, wxConvUTF8), wxString(text0, wxConvUTF8));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSysErrorCode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSysErrorCode\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxSysErrorCode())\n\n");
				#endif
				ZVAL_LONG(return_value, wxSysErrorCode());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsMainThread)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsMainThread\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsMainThread())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsMainThread());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMutexGuiEnter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMutexGuiEnter\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMutexGuiEnter()\n\n");
				#endif
				wxMutexGuiEnter();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMutexGuiLeave)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMutexGuiLeave\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMutexGuiLeave()\n\n");
				#endif
				wxMutexGuiLeave();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBase64Encode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64Encode\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dst0;
	long dst_len0;
	zval* dst0_ref;
	long dstLen0;
	char* src0;
	long src_len0;
	long srcLen0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* src1;
	long src_len1;
	long srcLen1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'slsl' (&dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "slsl", &dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzzz", &dst0_ref, &dummy, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&src1, &src_len1, &srcLen1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sl", &src1, &src_len1, &srcLen1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Encode(dst0, (size_t) dstLen0, (const void*) src0, (size_t) srcLen0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Encode(dst0, (size_t) dstLen0, (const void*) src0, (size_t) srcLen0));

				ZVAL_STRING(dst0_ref, dst0, 1);

				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxBase64Encode((const void*) src1, (size_t) srcLen1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxBase64Encode((const void*) src1, (size_t) srcLen1);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBase64DecodedSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64DecodedSize\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long srcLen0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&srcLen0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "l", &srcLen0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64DecodedSize((size_t) srcLen0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64DecodedSize((size_t) srcLen0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBase64EncodedSize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64EncodedSize\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "l", &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64EncodedSize((size_t) len0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64EncodedSize((size_t) len0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBase64Decode)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBase64Decode\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dst0;
	long dst_len0;
	zval* dst0_ref;
	long dstLen0;
	char* src0;
	long src_len0;
	long srcLen0;
	long mode0;
	long* posErr0;
	zval* posErr0_ref;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dst1;
	long dst_len1;
	zval* dst1_ref;
	long dstLen1;
	char* str1;
	long str_len1;
	long mode1;
	long* posErr1;
	zval* posErr1_ref;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sls|lll' (&dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0, &mode0, posErr0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sls|lll", &dst0, &dst_len0, &dstLen0, &src0, &src_len0, &srcLen0, &mode0, posErr0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz|zzz", &dst0_ref, &dummy, &dummy, &dummy, &dummy, &posErr0_ref );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sls|ll' (&dst1, &dst_len1, &dstLen1, &str1, &str_len1, &mode1, posErr1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sls|ll", &dst1, &dst_len1, &dstLen1, &str1, &str_len1, &mode1, posErr1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz|zz", &dst1_ref, &dummy, &dummy, &dummy, &posErr1_ref );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);

				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0, (size_t*) posErr0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst0, (size_t) dstLen0, src0, (size_t) srcLen0, (wxBase64DecodeMode) mode0, (size_t*) posErr0));

				ZVAL_STRING(dst0_ref, (char*) dst0, 1);
				size_t elements_returned0_5 = sizeof(posErr0)/sizeof(*posErr0);
				array_init(posErr0_ref);
				for(size_t i=0; i<elements_returned0_5; i++)
				{
					add_next_index_long(posErr0_ref, posErr0[i]);
				}

				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8)));

				ZVAL_STRING(dst1_ref, (char*) dst1, 1);

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1));

				ZVAL_STRING(dst1_ref, (char*) dst1, 1);

				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1, (size_t*) posErr1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxBase64Decode((void*) dst1, (size_t) dstLen1, wxString(str1, wxConvUTF8), (wxBase64DecodeMode) mode1, (size_t*) posErr1));

				ZVAL_STRING(dst1_ref, (char*) dst1, 1);
				size_t elements_returned1_4 = sizeof(posErr1)/sizeof(*posErr1);
				array_init(posErr1_ref);
				for(size_t i=0; i<elements_returned1_4; i++)
				{
					add_next_index_long(posErr1_ref, posErr1[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetSingleChoiceIndex)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetSingleChoiceIndex\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	zval* aChoices0 = 0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	long width0;
	long height0;
	long initialSelection0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* message1;
	long message_len1;
	char* caption1;
	long caption_len1;
	long n1;
	char* choices1;
	long choices_len1;
	zval* parent1 = 0;
	void* object_pointer1_4 = 0;
	long x1;
	long y1;
	bool centre1;
	long width1;
	long height1;
	long initialSelection1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* message2;
	long message_len2;
	char* caption2;
	long caption_len2;
	zval* choices2 = 0;
	long initialSelection2;
	zval* parent2 = 0;
	void* object_pointer2_4 = 0;
	bool overload2_called = false;
	//Parameters for overload 3
	char* message3;
	long message_len3;
	char* caption3;
	long caption_len3;
	long n3;
	zval* choices3;
	long initialSelection3;
	zval* parent3 = 0;
	void* object_pointer3_5 = 0;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 10)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssa|zllblll' (&message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssa|zllblll", &message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0, &initialSelection0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_3 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 4  && arguments_received <= 11)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssls|zllblll' (&message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &choices_len1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssls|zllblll", &message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &choices_len1, &parent1, &x1, &y1, &centre1, &width1, &height1, &initialSelection1 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_4 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(parent1) == IS_LONG)
				{
					object_pointer1_4 = Z_LVAL_P(parent1);
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
						goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received >= 4  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssal|z' (&message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssal|z", &message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent2) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer2_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer2_4 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload3;
					}
				}
				else if(Z_TYPE_P(parent2) == IS_LONG)
				{
					object_pointer2_4 = Z_LVAL_P(parent2);
				}
				else if(Z_TYPE_P(parent2) != IS_NULL)
				{
						goto overload3;
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received >= 5  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sslal|z' (&message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sslal|z", &message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3 ) == SUCCESS)
		{
			if(arguments_received >= 6){
				if(Z_TYPE_P(parent3) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer3_5 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer3_5 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent3) == IS_LONG)
				{
					object_pointer3_5 = Z_LVAL_P(parent3);
				}
				else if(Z_TYPE_P(parent3) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload3_called = true;
			already_called = true;
		}
	}

		
	wxArrayString strings_array0_2;
	bool strings_continue0_2 = true;
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2));


				return;
				break;
			}
			case 4:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3));


				return;
				break;
			}
			case 5:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0));


				return;
				break;
			}
			case 6:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0));


				return;
				break;
			}
			case 7:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0));


				return;
				break;
			}
			case 8:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0));


				return;
				break;
			}
			case 9:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0));


				return;
				break;
			}
			case 10:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0, (int) initialSelection0));


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8)));


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4));


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1));


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1));


				return;
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1));


				return;
				break;
			}
			case 9:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1));


				return;
				break;
			}
			case 10:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1));


				return;
				break;
			}
			case 11:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1, (int) initialSelection1));


				return;
				break;
			}
		}
	}

	wxArrayString strings_array2_2;
	bool strings_continue2_2 = true;
	
	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2));


				return;
				break;
			}
			case 5:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4));


				return;
				break;
			}
		}
	}

	int array_count3_3;
	HashTable* arr_hash3_3;
	arr_hash3_3 = Z_ARRVAL_P(choices3);
	array_count3_3 = zend_hash_num_elements(arr_hash3_3);
	wxString strings_array3_3[array_count3_3];
	bool strings_continue3_3 = true;

	
	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3));


				return;
				break;
			}
			case 6:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetSingleChoiceIndex(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetSingleChoice)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetSingleChoice\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	zval* aChoices0 = 0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	long width0;
	long height0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* message1;
	long message_len1;
	char* caption1;
	long caption_len1;
	long n1;
	char* choices1;
	long choices_len1;
	zval* parent1 = 0;
	void* object_pointer1_4 = 0;
	long x1;
	long y1;
	bool centre1;
	long width1;
	long height1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* message2;
	long message_len2;
	char* caption2;
	long caption_len2;
	zval* choices2 = 0;
	long initialSelection2;
	zval* parent2 = 0;
	void* object_pointer2_4 = 0;
	bool overload2_called = false;
	//Parameters for overload 3
	char* message3;
	long message_len3;
	char* caption3;
	long caption_len3;
	long n3;
	zval* choices3;
	long initialSelection3;
	zval* parent3 = 0;
	void* object_pointer3_5 = 0;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 3  && arguments_received <= 9)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssa|zllbll' (&message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssa|zllbll", &message0, &message_len0, &caption0, &caption_len0, &aChoices0, &parent0, &x0, &y0, &centre0, &width0, &height0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload1;
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_3 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						goto overload1;
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 4  && arguments_received <= 10)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssls|zllbll' (&message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &choices_len1, &parent1, &x1, &y1, &centre1, &width1, &height1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssls|zllbll", &message1, &message_len1, &caption1, &caption_len1, &n1, &choices1, &choices_len1, &parent1, &x1, &y1, &centre1, &width1, &height1 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent1) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent1), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer1_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer1_4 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload2;
					}
				}
				else if(Z_TYPE_P(parent1) == IS_LONG)
				{
					object_pointer1_4 = Z_LVAL_P(parent1);
				}
				else if(Z_TYPE_P(parent1) != IS_NULL)
				{
						goto overload2;
				}
			}

			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received >= 4  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssal|z' (&message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssal|z", &message2, &message_len2, &caption2, &caption_len2, &choices2, &initialSelection2, &parent2 ) == SUCCESS)
		{
			if(arguments_received >= 5){
				if(Z_TYPE_P(parent2) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent2), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer2_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer2_4 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						goto overload3;
					}
				}
				else if(Z_TYPE_P(parent2) == IS_LONG)
				{
					object_pointer2_4 = Z_LVAL_P(parent2);
				}
				else if(Z_TYPE_P(parent2) != IS_NULL)
				{
						goto overload3;
				}
			}

			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received >= 5  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sslal|z' (&message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sslal|z", &message3, &message_len3, &caption3, &caption_len3, &n3, &choices3, &initialSelection3, &parent3 ) == SUCCESS)
		{
			if(arguments_received >= 6){
				if(Z_TYPE_P(parent3) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent3), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer3_5 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer3_5 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent3) == IS_LONG)
				{
					object_pointer3_5 = Z_LVAL_P(parent3);
				}
				else if(Z_TYPE_P(parent3) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload3_called = true;
			already_called = true;
		}
	}

		
	wxArrayString strings_array0_2;
	bool strings_continue0_2 = true;
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2);
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return7;
				value_to_return7 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
			case 8:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return8;
				value_to_return8 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0);
				char* temp_string8;
				temp_string8 = (char*)malloc(sizeof(wxChar)*(value_to_return8.size()+1));
				strcpy (temp_string8, (const char *) value_to_return8.char_str() );
				ZVAL_STRING(return_value, temp_string8, 1);
				free(temp_string8);


				return;
				break;
			}
			case 9:
			{
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(aChoices0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return9;
				value_to_return9 = wxGetSingleChoice(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), strings_array0_2, (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0, (int) width0, (int) height0);
				char* temp_string9;
				temp_string9 = (char*)malloc(sizeof(wxChar)*(value_to_return9.size()+1));
				strcpy (temp_string9, (const char *) value_to_return9.char_str() );
				ZVAL_STRING(return_value, temp_string9, 1);
				free(temp_string9);


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8));
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return7;
				value_to_return7 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return8;
				value_to_return8 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1);
				char* temp_string8;
				temp_string8 = (char*)malloc(sizeof(wxChar)*(value_to_return8.size()+1));
				strcpy (temp_string8, (const char *) value_to_return8.char_str() );
				ZVAL_STRING(return_value, temp_string8, 1);
				free(temp_string8);


				return;
				break;
			}
			case 9:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return9;
				value_to_return9 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1);
				char* temp_string9;
				temp_string9 = (char*)malloc(sizeof(wxChar)*(value_to_return9.size()+1));
				strcpy (temp_string9, (const char *) value_to_return9.char_str() );
				ZVAL_STRING(return_value, temp_string9, 1);
				free(temp_string9);


				return;
				break;
			}
			case 10:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return10;
				value_to_return10 = wxGetSingleChoice(wxString(message1, wxConvUTF8), wxString(caption1, wxConvUTF8), (int) n1, wxString(choices1, wxConvUTF8), (wxWindow*) object_pointer1_4, (int) x1, (int) y1, centre1, (int) width1, (int) height1);
				char* temp_string10;
				temp_string10 = (char*)malloc(sizeof(wxChar)*(value_to_return10.size()+1));
				strcpy (temp_string10, (const char *) value_to_return10.char_str() );
				ZVAL_STRING(return_value, temp_string10, 1);
				free(temp_string10);


				return;
				break;
			}
		}
	}

	wxArrayString strings_array2_2;
	bool strings_continue2_2 = true;
	
	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				int array_index2_2 = 0;
				zval** temp_array_value2_2 = 0;
				while(strings_continue2_2)
				{
					if(zend_hash_index_find(HASH_OF(choices2), array_index2_2, (void**)&temp_array_value2_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value2_2);
						strings_array2_2.Add(wxString(Z_STRVAL_PP(temp_array_value2_2), wxConvUTF8));
						array_index2_2++;
					}
					else
					{
						strings_continue2_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message2, wxConvUTF8), wxString(caption2, wxConvUTF8), strings_array2_2, (int) initialSelection2, (wxWindow*) object_pointer2_4);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
		}
	}

	int array_count3_3;
	HashTable* arr_hash3_3;
	arr_hash3_3 = Z_ARRVAL_P(choices3);
	array_count3_3 = zend_hash_num_elements(arr_hash3_3);
	wxString strings_array3_3[array_count3_3];
	bool strings_continue3_3 = true;

	
	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 5:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				int array_index3_3 = 0;
				zval** temp_array_value3_3 = 0;
				while(strings_continue3_3)
				{
					if(zend_hash_index_find(HASH_OF(choices3), array_index3_3, (void**)&temp_array_value3_3) == SUCCESS)
					{
						convert_to_string(*temp_array_value3_3);
						strings_array3_3[array_index3_3] = wxString(Z_STRVAL_PP(temp_array_value3_3), wxConvUTF8);
						array_index3_3++;
					}
					else
					{
						strings_continue3_3 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxGetSingleChoice(wxString(message3, wxConvUTF8), wxString(caption3, wxConvUTF8), (int) n3, strings_array3_3, (int) initialSelection3, (wxWindow*) object_pointer3_5);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetColourFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetColourFromUser\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	zval* colInit0 = 0;
	void* object_pointer0_1 = 0;
	char* caption0;
	long caption_len0;
	zval* data0 = 0;
	void* object_pointer0_3 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO|sz' (&parent0, &colInit0, php_wxColour_entry, &caption0, &caption_len0, &data0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zO|sz", &parent0, &colInit0, php_wxColour_entry, &caption0, &caption_len0, &data0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(colInit0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(colInit0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(colInit0) == IS_LONG)
				{
					object_pointer0_1 = Z_LVAL_P(colInit0);
				}
				else if(Z_TYPE_P(colInit0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 4){
				if(Z_TYPE_P(data0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(data0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(data0) == IS_LONG)
				{
					object_pointer0_3 = Z_LVAL_P(data0);
				}
				else if(Z_TYPE_P(data0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1) to return new object\n\n");
				#endif
				wxColour value_to_return2;
				value_to_return2 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1);
				void* ptr = safe_emalloc(1, sizeof(wxColour), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8)) to return new object\n\n");
				#endif
				wxColour value_to_return3;
				value_to_return3 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxColour), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8), (wxColourData*) object_pointer0_3) to return new object\n\n");
				#endif
				wxColour value_to_return4;
				value_to_return4 = wxGetColourFromUser((wxWindow*) object_pointer0_0, *(wxColour*) object_pointer0_1, wxString(caption0, wxConvUTF8), (wxColourData*) object_pointer0_3);
				void* ptr = safe_emalloc(1, sizeof(wxColour), 0);
				memcpy(ptr, &value_to_return4, sizeof(wxColour));
				object_init_ex(return_value, php_wxColour_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxColour));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDisableAsserts)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisableAsserts\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxDisableAsserts()\n\n");
				#endif
				wxDisableAsserts();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsDebuggerRunning)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsDebuggerRunning\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsDebuggerRunning())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsDebuggerRunning());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSetDefaultAssertHandler)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetDefaultAssertHandler\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSetDefaultAssertHandler()\n\n");
				#endif
				wxSetDefaultAssertHandler();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTrap)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTrap\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxTrap()\n\n");
				#endif
				wxTrap();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDirSelector)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDirSelector\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* default_path0;
	long default_path_len0;
	long style0;
	zval* pos0 = 0;
	void* object_pointer0_3 = 0;
	zval* parent0 = 0;
	void* object_pointer0_4 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 5)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|sslOz' (&message0, &message_len0, &default_path0, &default_path_len0, &style0, &pos0, php_wxPoint_entry, &parent0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "|sslOz", &message0, &message_len0, &default_path0, &default_path_len0, &style0, &pos0, php_wxPoint_entry, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(pos0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pos0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pos0) == IS_LONG)
				{
					object_pointer0_3 = Z_LVAL_P(pos0);
				}
				else if(Z_TYPE_P(pos0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 5){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_4 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_4 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_4 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxDirSelector();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxDirSelector(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0);
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3, (wxWindow*) object_pointer0_4).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxDirSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), (long) style0, *(wxPoint*) object_pointer0_3, (wxWindow*) object_pointer0_4);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxNewEventType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxNewEventType\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxNewEventType())\n\n");
				#endif
				ZVAL_LONG(return_value, wxNewEventType());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxPostEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxPostEvent\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* dest0 = 0;
	void* object_pointer0_0 = 0;
	zval* event0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO' (&dest0, &event0, php_wxEvent_entry)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zO", &dest0, &event0, php_wxEvent_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dest0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dest0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dest0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(dest0);
				}
				else if(Z_TYPE_P(dest0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(event0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) == IS_LONG)
				{
					object_pointer0_1 = Z_LVAL_P(event0);
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxPostEvent((wxEvtHandler*) object_pointer0_0, *(wxEvent*) object_pointer0_1)\n\n");
				#endif
				wxPostEvent((wxEvtHandler*) object_pointer0_0, *(wxEvent*) object_pointer0_1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxQueueEvent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxQueueEvent\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* dest0 = 0;
	void* object_pointer0_0 = 0;
	zval* event0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zz' (&dest0, &event0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &dest0, &event0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(dest0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(dest0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxWindow && rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow && rsrc_type != le_wxValidator && rsrc_type != le_wxTextValidator && rsrc_type != le_wxGenericValidator && rsrc_type != le_wxMenu && rsrc_type != le_wxAuiManager && rsrc_type != le_wxMouseEventsManager && rsrc_type != le_wxTimer && rsrc_type != le_wxEventBlocker && rsrc_type != le_wxProcess && rsrc_type != le_wxFileSystemWatcher && rsrc_type != le_wxTaskBarIcon && rsrc_type != le_wxNotificationMessage))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(dest0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(dest0);
				}
				else if(Z_TYPE_P(dest0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(event0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(event0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxMenuEvent && rsrc_type != le_wxKeyEvent && rsrc_type != le_wxCommandEvent && rsrc_type != le_wxNotifyEvent && rsrc_type != le_wxTreeEvent && rsrc_type != le_wxBookCtrlEvent && rsrc_type != le_wxAuiNotebookEvent && rsrc_type != le_wxAuiToolBarEvent && rsrc_type != le_wxListEvent && rsrc_type != le_wxSpinEvent && rsrc_type != le_wxSplitterEvent && rsrc_type != le_wxSpinDoubleEvent && rsrc_type != le_wxGridSizeEvent && rsrc_type != le_wxWizardEvent && rsrc_type != le_wxGridEvent && rsrc_type != le_wxGridRangeSelectEvent && rsrc_type != le_wxDataViewEvent && rsrc_type != le_wxHeaderCtrlEvent && rsrc_type != le_wxRibbonBarEvent && rsrc_type != le_wxStyledTextEvent && rsrc_type != le_wxChildFocusEvent && rsrc_type != le_wxHtmlCellEvent && rsrc_type != le_wxHtmlLinkEvent && rsrc_type != le_wxHyperlinkEvent && rsrc_type != le_wxColourPickerEvent && rsrc_type != le_wxFontPickerEvent && rsrc_type != le_wxScrollEvent && rsrc_type != le_wxWindowModalDialogEvent && rsrc_type != le_wxDateEvent && rsrc_type != le_wxCalendarEvent && rsrc_type != le_wxWindowCreateEvent && rsrc_type != le_wxWindowDestroyEvent && rsrc_type != le_wxUpdateUIEvent && rsrc_type != le_wxHelpEvent && rsrc_type != le_wxGridEditorCreatedEvent && rsrc_type != le_wxCollapsiblePaneEvent && rsrc_type != le_wxClipboardTextEvent && rsrc_type != le_wxFileCtrlEvent && rsrc_type != le_wxSashEvent && rsrc_type != le_wxFileDirPickerEvent && rsrc_type != le_wxContextMenuEvent && rsrc_type != le_wxRibbonButtonBarEvent && rsrc_type != le_wxRibbonGalleryEvent && rsrc_type != le_wxCloseEvent && rsrc_type != le_wxActivateEvent && rsrc_type != le_wxAuiManagerEvent && rsrc_type != le_wxSizeEvent && rsrc_type != le_wxMouseEvent && rsrc_type != le_wxMoveEvent && rsrc_type != le_wxMouseCaptureLostEvent && rsrc_type != le_wxMouseCaptureChangedEvent && rsrc_type != le_wxTimerEvent && rsrc_type != le_wxThreadEvent && rsrc_type != le_wxScrollWinEvent && rsrc_type != le_wxSysColourChangedEvent && rsrc_type != le_wxProcessEvent && rsrc_type != le_wxEraseEvent && rsrc_type != le_wxSetCursorEvent && rsrc_type != le_wxIconizeEvent && rsrc_type != le_wxIdleEvent && rsrc_type != le_wxShowEvent && rsrc_type != le_wxPaintEvent && rsrc_type != le_wxPaletteChangedEvent && rsrc_type != le_wxInitDialogEvent && rsrc_type != le_wxMaximizeEvent && rsrc_type != le_wxNavigationKeyEvent && rsrc_type != le_wxFocusEvent && rsrc_type != le_wxFileSystemWatcherEvent && rsrc_type != le_wxDisplayChangedEvent && rsrc_type != le_wxCalculateLayoutEvent && rsrc_type != le_wxDropFilesEvent && rsrc_type != le_wxQueryLayoutInfoEvent && rsrc_type != le_wxTaskBarIconEvent))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(event0) == IS_LONG)
				{
					object_pointer0_1 = Z_LVAL_P(event0);
				}
				else if(Z_TYPE_P(event0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxQueueEvent((wxEvtHandler*) object_pointer0_0, (wxEvent*) object_pointer0_1)\n\n");
				#endif
				wxQueueEvent((wxEvtHandler*) object_pointer0_0, (wxEvent*) object_pointer0_1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFileSelector)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFileSelector\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* default_path0;
	long default_path_len0;
	char* default_filename0;
	long default_filename_len0;
	char* default_extension0;
	long default_extension_len0;
	char* wildcard0;
	long wildcard_len0;
	long flags0;
	zval* parent0 = 0;
	void* object_pointer0_6 = 0;
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 9)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sssslzll' (&message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, &default_extension0, &default_extension_len0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|sssslzll", &message0, &message_len0, &default_path0, &default_path_len0, &default_filename0, &default_filename_len0, &default_extension0, &default_extension_len0, &wildcard0, &wildcard_len0, &flags0, &parent0, &x0, &y0 ) == SUCCESS)
		{
			if(arguments_received >= 7){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_6 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_6 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_6 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxFileSelector(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8));
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8));
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return7;
				value_to_return7 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
			case 8:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return8;
				value_to_return8 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0);
				char* temp_string8;
				temp_string8 = (char*)malloc(sizeof(wxChar)*(value_to_return8.size()+1));
				strcpy (temp_string8, (const char *) value_to_return8.char_str() );
				ZVAL_STRING(return_value, temp_string8, 1);
				free(temp_string8);


				return;
				break;
			}
			case 9:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return9;
				value_to_return9 = wxFileSelector(wxString(message0, wxConvUTF8), wxString(default_path0, wxConvUTF8), wxString(default_filename0, wxConvUTF8), wxString(default_extension0, wxConvUTF8), wxString(wildcard0, wxConvUTF8), (int) flags0, (wxWindow*) object_pointer0_6, (int) x0, (int) y0);
				char* temp_string9;
				temp_string9 = (char*)malloc(sizeof(wxChar)*(value_to_return9.size()+1));
				strcpy (temp_string9, (const char *) value_to_return9.char_str() );
				ZVAL_STRING(return_value, temp_string9, 1);
				free(temp_string9);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetOSDirectory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetOSDirectory\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetOSDirectory().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetOSDirectory();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxParseCommonDialogsFilter)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxParseCommonDialogsFilter\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* wildCard0;
	long wildCard_len0;
	zval* descriptions0 = 0;
	zval* descriptions0_ref;
	zval* filters0 = 0;
	zval* filters0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'saa' (&wildCard0, &wildCard_len0, &descriptions0, &filters0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "saa", &wildCard0, &wildCard_len0, &descriptions0, &filters0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	wxArrayString strings_array0_1;
	bool strings_continue0_1 = true;
	wxArrayString strings_array0_2;
	bool strings_continue0_2 = true;
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				int array_index0_1 = 0;
				zval** temp_array_value0_1 = 0;
				while(strings_continue0_1)
				{
					if(zend_hash_index_find(HASH_OF(descriptions0), array_index0_1, (void**)&temp_array_value0_1) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_1);
						strings_array0_1.Add(wxString(Z_STRVAL_PP(temp_array_value0_1), wxConvUTF8));
						array_index0_1++;
					}
					else
					{
						strings_continue0_1 = false;
					}
				}
				int array_index0_2 = 0;
				zval** temp_array_value0_2 = 0;
				while(strings_continue0_2)
				{
					if(zend_hash_index_find(HASH_OF(filters0), array_index0_2, (void**)&temp_array_value0_2) == SUCCESS)
					{
						convert_to_string(*temp_array_value0_2);
						strings_array0_2.Add(wxString(Z_STRVAL_PP(temp_array_value0_2), wxConvUTF8));
						array_index0_2++;
					}
					else
					{
						strings_continue0_2 = false;
					}
				}
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxParseCommonDialogsFilter(wxString(wildCard0, wxConvUTF8), strings_array0_1, strings_array0_2))\n\n");
				#endif
				ZVAL_LONG(return_value, wxParseCommonDialogsFilter(wxString(wildCard0, wxConvUTF8), strings_array0_1, strings_array0_2));

				char* temp_string0_1;
				array_init(descriptions0);
				for(size_t i=0; i<strings_array0_1.GetCount(); i++)
				{
					temp_string0_1 = (char*)malloc(sizeof(wxChar)*(strings_array0_1[i].size()+1));
					strcpy (temp_string0_1, (const char *) strings_array0_1[i].char_str() );
					add_next_index_string(descriptions0, (char*) temp_string0_1, 1);
					free(temp_string0_1);

				}
				char* temp_string0_2;
				array_init(filters0);
				for(size_t i=0; i<strings_array0_2.GetCount(); i++)
				{
					temp_string0_2 = (char*)malloc(sizeof(wxChar)*(strings_array0_2[i].size()+1));
					strcpy (temp_string0_2, (const char *) strings_array0_2[i].char_str() );
					add_next_index_string(filters0, (char*) temp_string0_2, 1);
					free(temp_string0_2);

				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDirExists)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDirExists\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dirname0;
	long dirname_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&dirname0, &dirname_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &dirname0, &dirname_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxDirExists(wxString(dirname0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxDirExists(wxString(dirname0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSplitPath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSplitPath\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* fullname0;
	long fullname_len0;
	char* path0;
	long path_len0;
	zval* path0_ref;
	char* name0;
	long name_len0;
	zval* name0_ref;
	char* ext0;
	long ext_len0;
	zval* ext0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssss' (&fullname0, &fullname_len0, &path0, &path_len0, &name0, &name_len0, &ext0, &ext_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssss", &fullname0, &fullname_len0, &path0, &path_len0, &name0, &name_len0, &ext0, &ext_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzzz", &dummy, &path0_ref, &name0_ref, &ext0_ref );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				wxString string_arg0_1 = wxString(path0, wxConvUTF8);
				wxString string_arg0_2 = wxString(name0, wxConvUTF8);
				wxString string_arg0_3 = wxString(ext0, wxConvUTF8);
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSplitPath(wxString(fullname0, wxConvUTF8), &string_arg0_1, &string_arg0_2, &string_arg0_3)\n\n");
				#endif
				wxSplitPath(wxString(fullname0, wxConvUTF8), &string_arg0_1, &string_arg0_2, &string_arg0_3);

				char* temp_string0_1;
				temp_string0_1 = (char*)malloc(sizeof(wxChar)*(string_arg0_1.size()+1));
				strcpy (temp_string0_1, (const char *) string_arg0_1.char_str() );
				ZVAL_STRING(path0_ref, (char*) temp_string0_1, 1);
				free(temp_string0_1);

				char* temp_string0_2;
				temp_string0_2 = (char*)malloc(sizeof(wxChar)*(string_arg0_2.size()+1));
				strcpy (temp_string0_2, (const char *) string_arg0_2.char_str() );
				ZVAL_STRING(name0_ref, (char*) temp_string0_2, 1);
				free(temp_string0_2);

				char* temp_string0_3;
				temp_string0_3 = (char*)malloc(sizeof(wxChar)*(string_arg0_3.size()+1));
				strcpy (temp_string0_3, (const char *) string_arg0_3.char_str() );
				ZVAL_STRING(ext0_ref, (char*) temp_string0_3, 1);
				free(temp_string0_3);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRenameFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRenameFile\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* file10;
	long file1_len0;
	char* file20;
	long file2_len0;
	bool overwrite0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|b' (&file10, &file1_len0, &file20, &file2_len0, &overwrite0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss|b", &file10, &file1_len0, &file20, &file2_len0, &overwrite0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRenameFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxCopyFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxCopyFile\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* file10;
	long file1_len0;
	char* file20;
	long file2_len0;
	bool overwrite0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss|b' (&file10, &file1_len0, &file20, &file2_len0, &overwrite0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss|b", &file10, &file1_len0, &file20, &file2_len0, &overwrite0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8)));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxCopyFile(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), overwrite0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFileExists)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFileExists\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* filename0;
	long filename_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&filename0, &filename_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &filename0, &filename_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxFileExists(wxString(filename0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxFileExists(wxString(filename0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMatchWild)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMatchWild\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* pattern0;
	long pattern_len0;
	char* text0;
	long text_len0;
	bool dot_special0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssb' (&pattern0, &pattern_len0, &text0, &text_len0, &dot_special0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssb", &pattern0, &pattern_len0, &text0, &text_len0, &dot_special0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxMatchWild(wxString(pattern0, wxConvUTF8), wxString(text0, wxConvUTF8), dot_special0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxMatchWild(wxString(pattern0, wxConvUTF8), wxString(text0, wxConvUTF8), dot_special0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxPathOnly)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxPathOnly\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* path0;
	long path_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&path0, &path_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &path0, &path_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxPathOnly(wxString(path0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxPathOnly(wxString(path0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsWild)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsWild\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* pattern0;
	long pattern_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&pattern0, &pattern_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &pattern0, &pattern_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsWild(wxString(pattern0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsWild(wxString(pattern0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsAbsolutePath)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsAbsolutePath\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* filename0;
	long filename_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&filename0, &filename_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &filename0, &filename_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsAbsolutePath(wxString(filename0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsAbsolutePath(wxString(filename0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetCwd)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetCwd\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetCwd().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetCwd();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSetWorkingDirectory)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetWorkingDirectory\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dir0;
	long dir_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&dir0, &dir_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &dir0, &dir_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSetWorkingDirectory(wxString(dir0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxSetWorkingDirectory(wxString(dir0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxConcatFiles)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxConcatFiles\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* file10;
	long file1_len0;
	char* file20;
	long file2_len0;
	char* file30;
	long file3_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sss' (&file10, &file1_len0, &file20, &file2_len0, &file30, &file3_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sss", &file10, &file1_len0, &file20, &file2_len0, &file30, &file3_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxConcatFiles(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), wxString(file30, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxConcatFiles(wxString(file10, wxConvUTF8), wxString(file20, wxConvUTF8), wxString(file30, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRemoveFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRemoveFile\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* file0;
	long file_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&file0, &file_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &file0, &file_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRemoveFile(wxString(file0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRemoveFile(wxString(file0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMkdir)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMkdir\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dir0;
	long dir_len0;
	long perm0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&dir0, &dir_len0, &perm0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|l", &dir0, &dir_len0, &perm0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxMkdir(wxString(dir0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxMkdir(wxString(dir0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxMkdir(wxString(dir0, wxConvUTF8), (int) perm0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxMkdir(wxString(dir0, wxConvUTF8), (int) perm0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRmdir)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRmdir\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dir0;
	long dir_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&dir0, &dir_len0, &flags0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|l", &dir0, &dir_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRmdir(wxString(dir0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRmdir(wxString(dir0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRmdir(wxString(dir0, wxConvUTF8), (int) flags0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRmdir(wxString(dir0, wxConvUTF8), (int) flags0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindNextFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindNextFile\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFindNextFile().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxFindNextFile();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindFirstFile)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindFirstFile\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* spec0;
	long spec_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&spec0, &spec_len0, &flags0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|l", &spec0, &spec_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFindFirstFile(wxString(spec0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxFindFirstFile(wxString(spec0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxFindFirstFile(wxString(spec0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxFindFirstFile(wxString(spec0, wxConvUTF8), (int) flags0);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetFileKind)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetFileKind\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long fd0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&fd0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "l", &fd0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetFileKind((int) fd0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetFileKind((int) fd0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetFontFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetFontFromUser\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	zval* fontInit0 = 0;
	void* object_pointer0_1 = 0;
	char* caption0;
	long caption_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 2  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zO|s' (&parent0, &fontInit0, php_wxFont_entry, &caption0, &caption_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zO|s", &parent0, &fontInit0, php_wxFont_entry, &caption0, &caption_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			if(arguments_received >= 2){
				if(Z_TYPE_P(fontInit0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(fontInit0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(fontInit0) == IS_LONG)
				{
					object_pointer0_1 = Z_LVAL_P(fontInit0);
				}
				else if(Z_TYPE_P(fontInit0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1) to return new object\n\n");
				#endif
				wxFont value_to_return2;
				value_to_return2 = wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1);
				void* ptr = safe_emalloc(1, sizeof(wxFont), 0);
				memcpy(ptr, &value_to_return2, sizeof(wxFont));
				object_init_ex(return_value, php_wxFont_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxFont));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1, wxString(caption0, wxConvUTF8)) to return new object\n\n");
				#endif
				wxFont value_to_return3;
				value_to_return3 = wxGetFontFromUser((wxWindow*) object_pointer0_0, *(wxFont*) object_pointer0_1, wxString(caption0, wxConvUTF8));
				void* ptr = safe_emalloc(1, sizeof(wxFont), 0);
				memcpy(ptr, &value_to_return3, sizeof(wxFont));
				object_init_ex(return_value, php_wxFont_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxFont));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxColourDisplay)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxColourDisplay\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxColourDisplay())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxColourDisplay());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDisplayDepth)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisplayDepth\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxDisplayDepth())\n\n");
				#endif
				ZVAL_LONG(return_value, wxDisplayDepth());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSetCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetCursor\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&cursor0, php_wxCursor_entry)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "O", &cursor0, php_wxCursor_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(cursor0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(cursor0);
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSetCursor(*(wxCursor*) object_pointer0_0)\n\n");
				#endif
				wxSetCursor(*(wxCursor*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxClientDisplayRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxClientDisplayRect\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long* x0;
	zval* x0_ref;
	long* y0;
	zval* y0_ref;
	long* width0;
	zval* width0_ref;
	long* height0;
	zval* height0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'llll' (x0, y0, width0, height0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "llll", x0, y0, width0, height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzzz", &x0_ref, &y0_ref, &width0_ref, &height0_ref );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxClientDisplayRect((int*) x0, (int*) y0, (int*) width0, (int*) height0)\n\n");
				#endif
				wxClientDisplayRect((int*) x0, (int*) y0, (int*) width0, (int*) height0);

				size_t elements_returned0_0 = sizeof(x0)/sizeof(*x0);
				array_init(x0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(x0_ref, x0[i]);
				}
				size_t elements_returned0_1 = sizeof(y0)/sizeof(*y0);
				array_init(y0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(y0_ref, y0[i]);
				}
				size_t elements_returned0_2 = sizeof(width0)/sizeof(*width0);
				array_init(width0_ref);
				for(size_t i=0; i<elements_returned0_2; i++)
				{
					add_next_index_long(width0_ref, width0[i]);
				}
				size_t elements_returned0_3 = sizeof(height0)/sizeof(*height0);
				array_init(height0_ref);
				for(size_t i=0; i<elements_returned0_3; i++)
				{
					add_next_index_long(height0_ref, height0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetClientDisplayRect)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetClientDisplayRect\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetClientDisplayRect() to return new object\n\n");
				#endif
				wxRect value_to_return0;
				value_to_return0 = wxGetClientDisplayRect();
				void* ptr = safe_emalloc(1, sizeof(wxRect), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxRect));
				object_init_ex(return_value, php_wxRect_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxRect));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetDisplayPPI)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetDisplayPPI\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetDisplayPPI() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				value_to_return0 = wxGetDisplayPPI();
				void* ptr = safe_emalloc(1, sizeof(wxSize), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDisplaySize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisplaySize\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long* width0;
	zval* width0_ref;
	long* height0;
	zval* height0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (width0, height0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ll", width0, height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &width0_ref, &height0_ref );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxDisplaySize((int*) width0, (int*) height0)\n\n");
				#endif
				wxDisplaySize((int*) width0, (int*) height0);

				size_t elements_returned0_0 = sizeof(width0)/sizeof(*width0);
				array_init(width0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(width0_ref, width0[i]);
				}
				size_t elements_returned0_1 = sizeof(height0)/sizeof(*height0);
				array_init(height0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(height0_ref, height0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetDisplaySize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetDisplaySize\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetDisplaySize() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				value_to_return0 = wxGetDisplaySize();
				void* ptr = safe_emalloc(1, sizeof(wxSize), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDisplaySizeMM)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxDisplaySizeMM\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long* width0;
	zval* width0_ref;
	long* height0;
	zval* height0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (width0, height0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ll", width0, height0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &width0_ref, &height0_ref );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxDisplaySizeMM((int*) width0, (int*) height0)\n\n");
				#endif
				wxDisplaySizeMM((int*) width0, (int*) height0);

				size_t elements_returned0_0 = sizeof(width0)/sizeof(*width0);
				array_init(width0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(width0_ref, width0[i]);
				}
				size_t elements_returned0_1 = sizeof(height0)/sizeof(*height0);
				array_init(height0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(height0_ref, height0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetDisplaySizeMM)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetDisplaySizeMM\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetDisplaySizeMM() to return new object\n\n");
				#endif
				wxSize value_to_return0;
				value_to_return0 = wxGetDisplaySizeMM();
				void* ptr = safe_emalloc(1, sizeof(wxSize), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxSize));
				object_init_ex(return_value, php_wxSize_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxSize));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxEntryCleanup)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxEntryCleanup\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEntryCleanup()\n\n");
				#endif
				wxEntryCleanup();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFinite)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFinite\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "d", &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxFinite(x0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxFinite(x0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsNaN)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsNaN\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "d", &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsNaN(x0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsNaN(x0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRound)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRound\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "d", &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxRound(x0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxRound(x0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsSameDouble)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsSameDouble\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	double x0;
	double y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'dd' (&x0, &y0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "dd", &x0, &y0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsSameDouble(x0, y0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsSameDouble(x0, y0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsNullDouble)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsNullDouble\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	double x0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'd' (&x0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "d", &x0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsNullDouble(x0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsNullDouble(x0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMessageBox)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMessageBox\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	long style0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 6)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|slzll' (&message0, &message_len0, &caption0, &caption_len0, &style0, &parent0, &x0, &y0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|slzll", &message0, &message_len0, &caption0, &caption_len0, &style0, &parent0, &x0, &y0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_3 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0));


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3));


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0));


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0, (int) y0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxMessageBox(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), (int) style0, (wxWindow*) object_pointer0_3, (int) x0, (int) y0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxCreateDynamicObject)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxCreateDynamicObject\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* className0;
	long className_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&className0, &className_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &className0, &className_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxCreateDynamicObject(wxString(className0, wxConvUTF8)) to return object pointer\n\n");
				#endif
				wxObject* value_to_return1;
				value_to_return1 = wxCreateDynamicObject(wxString(className0, wxConvUTF8));
				object_init_ex(return_value,php_wxObject_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxObject));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindWindowAtPointer)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowAtPointer\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* pt0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pt0, php_wxPoint_entry)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "O", &pt0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(pt0);
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowAtPointer(*(wxPoint*) object_pointer0_0) to return object pointer\n\n");
				#endif
				wxWindow* value_to_return1;
				value_to_return1 = wxFindWindowAtPointer(*(wxPoint*) object_pointer0_0);
				object_init_ex(return_value,php_wxWindow_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetActiveWindow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetActiveWindow\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetActiveWindow() to return object pointer\n\n");
				#endif
				wxWindow* value_to_return0;
				value_to_return0 = wxGetActiveWindow();
				object_init_ex(return_value,php_wxWindow_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return0, le_wxWindow));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetTopLevelParent)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTopLevelParent\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* window0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&window0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "z", &window0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(window0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(window0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(window0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(window0);
				}
				else if(Z_TYPE_P(window0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetTopLevelParent((wxWindow*) object_pointer0_0) to return object pointer\n\n");
				#endif
				wxWindow* value_to_return1;
				value_to_return1 = wxGetTopLevelParent((wxWindow*) object_pointer0_0);
				object_init_ex(return_value,php_wxWindow_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRichTextHasStyle)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRichTextHasStyle\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long flags0;
	long style0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'll' (&flags0, &style0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ll", &flags0, &style0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxRichTextHasStyle((int) flags0, (int) style0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxRichTextHasStyle((int) flags0, (int) style0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetStockLabel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetStockLabel\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long id0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l|l' (&id0, &flags0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "l|l", &id0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetStockLabel((wxWindowID) id0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxGetStockLabel((wxWindowID) id0);
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetStockLabel((wxWindowID) id0, (long) flags0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxGetStockLabel((wxWindowID) id0, (long) flags0);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetTextFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTextFromUser\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	char* default_value0;
	long default_value_len0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sszllb' (&message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|sszllb", &message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_3 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxGetTextFromUser(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return7;
				value_to_return7 = wxGetTextFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetPasswordFromUser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetPasswordFromUser\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* message0;
	long message_len0;
	char* caption0;
	long caption_len0;
	char* default_value0;
	long default_value_len0;
	zval* parent0 = 0;
	void* object_pointer0_3 = 0;
	long x0;
	long y0;
	bool centre0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 7)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sszllb' (&message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|sszllb", &message0, &message_len0, &caption0, &caption_len0, &default_value0, &default_value_len0, &parent0, &x0, &y0, &centre0 ) == SUCCESS)
		{
			if(arguments_received >= 4){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_3 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_3 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_3 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8));
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3);
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
			case 5:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return5;
				value_to_return5 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0);
				char* temp_string5;
				temp_string5 = (char*)malloc(sizeof(wxChar)*(value_to_return5.size()+1));
				strcpy (temp_string5, (const char *) value_to_return5.char_str() );
				ZVAL_STRING(return_value, temp_string5, 1);
				free(temp_string5);


				return;
				break;
			}
			case 6:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return6;
				value_to_return6 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0);
				char* temp_string6;
				temp_string6 = (char*)malloc(sizeof(wxChar)*(value_to_return6.size()+1));
				strcpy (temp_string6, (const char *) value_to_return6.char_str() );
				ZVAL_STRING(return_value, temp_string6, 1);
				free(temp_string6);


				return;
				break;
			}
			case 7:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return7;
				value_to_return7 = wxGetPasswordFromUser(wxString(message0, wxConvUTF8), wxString(caption0, wxConvUTF8), wxString(default_value0, wxConvUTF8), (wxWindow*) object_pointer0_3, (int) x0, (int) y0, centre0);
				char* temp_string7;
				temp_string7 = (char*)malloc(sizeof(wxChar)*(value_to_return7.size()+1));
				strcpy (temp_string7, (const char *) value_to_return7.char_str() );
				ZVAL_STRING(return_value, temp_string7, 1);
				free(temp_string7);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetTimeZone)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTimeZone\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetTimeZone())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetTimeZone());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetLocalTime)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetLocalTime\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetLocalTime())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetLocalTime());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetUTCTime)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetUTCTime\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetUTCTime())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetUTCTime());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStringTokenize)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStringTokenize\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	char* delims0;
	long delims_len0;
	long mode0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|sl' (&str0, &str_len0, &delims0, &delims_len0, &mode0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|sl", &str0, &str_len0, &delims0, &delims_len0, &mode0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8)) to return strings array\n\n");
				#endif
				wxArrayString value_to_return1;
				value_to_return1 = wxStringTokenize(wxString(str0, wxConvUTF8));
				char* temp_string1;
				array_init(return_value);
				for(size_t i=0; i<value_to_return1.GetCount(); i++)
				{
					temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1[i].size()+1));
					strcpy (temp_string1, (const char *) value_to_return1[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string1, 1);
					free(temp_string1);
				}


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8)) to return strings array\n\n");
				#endif
				wxArrayString value_to_return2;
				value_to_return2 = wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8));
				char* temp_string2;
				array_init(return_value);
				for(size_t i=0; i<value_to_return2.GetCount(); i++)
				{
					temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2[i].size()+1));
					strcpy (temp_string2, (const char *) value_to_return2[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string2, 1);
					free(temp_string2);
				}


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8), (wxStringTokenizerMode) mode0) to return strings array\n\n");
				#endif
				wxArrayString value_to_return3;
				value_to_return3 = wxStringTokenize(wxString(str0, wxConvUTF8), wxString(delims0, wxConvUTF8), (wxStringTokenizerMode) mode0);
				char* temp_string3;
				array_init(return_value);
				for(size_t i=0; i<value_to_return3.GetCount(); i++)
				{
					temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3[i].size()+1));
					strcpy (temp_string3, (const char *) value_to_return3[i].char_str() );
					add_next_index_string(return_value, (char*) temp_string3, 1);
					free(temp_string3);
				}


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetTranslation)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetTranslation\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* string0;
	long string_len0;
	char* domain0;
	long domain_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* string1;
	long string_len1;
	char* plural1;
	long plural_len1;
	long n1;
	char* domain1;
	long domain_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|s' (&string0, &string_len0, &domain0, &domain_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|s", &string0, &string_len0, &domain0, &domain_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received >= 3  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl|s' (&string1, &string_len1, &plural1, &plural_len1, &n1, &domain1, &domain_len1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssl|s", &string1, &string_len1, &plural1, &plural_len1, &n1, &domain1, &domain_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxGetTranslation(wxString(string0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string0, wxConvUTF8), wxString(domain0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxGetTranslation(wxString(string0, wxConvUTF8), wxString(domain0, wxConvUTF8));
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return3;
				value_to_return3 = wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1);
				char* temp_string3;
				temp_string3 = (char*)malloc(sizeof(wxChar)*(value_to_return3.size()+1));
				strcpy (temp_string3, (const char *) value_to_return3.char_str() );
				ZVAL_STRING(return_value, temp_string3, 1);
				free(temp_string3);


				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1, wxString(domain1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return4;
				value_to_return4 = wxGetTranslation(wxString(string1, wxConvUTF8), wxString(plural1, wxConvUTF8), (unsigned) n1, wxString(domain1, wxConvUTF8));
				char* temp_string4;
				temp_string4 = (char*)malloc(sizeof(wxChar)*(value_to_return4.size()+1));
				strcpy (temp_string4, (const char *) value_to_return4.char_str() );
				ZVAL_STRING(return_value, temp_string4, 1);
				free(temp_string4);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBeginBusyCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBeginBusyCursor\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* cursor0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|z' (&cursor0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "|z", &cursor0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(cursor0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(cursor0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(cursor0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(cursor0);
				}
				else if(Z_TYPE_P(cursor0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxBeginBusyCursor()\n\n");
				#endif
				wxBeginBusyCursor();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxBeginBusyCursor((const wxCursor*) object_pointer0_0)\n\n");
				#endif
				wxBeginBusyCursor((const wxCursor*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxEndBusyCursor)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxEndBusyCursor\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEndBusyCursor()\n\n");
				#endif
				wxEndBusyCursor();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsBusy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsBusy\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsBusy())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsBusy());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxBell)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxBell\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxBell()\n\n");
				#endif
				wxBell();


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxInfoMessageBox)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxInfoMessageBox\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* parent0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'z' (&parent0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "z", &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxInfoMessageBox((wxWindow*) object_pointer0_0)\n\n");
				#endif
				wxInfoMessageBox((wxWindow*) object_pointer0_0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetLibraryVersionInfo)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetLibraryVersionInfo\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetLibraryVersionInfo() to return new object\n\n");
				#endif
				wxVersionInfo value_to_return0;
				value_to_return0 = wxGetLibraryVersionInfo();
				void* ptr = safe_emalloc(1, sizeof(wxVersionInfo), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxVersionInfo));
				object_init_ex(return_value, php_wxVersionInfo_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxVersionInfo));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetenv)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetenv\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* name0;
	long name_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* name1;
	long name_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&name0, &name_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &name0, &name_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&name1, &name_len1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &name1, &name_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetenv(name0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return1;
				value_to_return1 = wxGetenv(name0);
				ZVAL_STRING(return_value, value_to_return1, 1);


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetenv(wxString(name1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return1;
				value_to_return1 = wxGetenv(wxString(name1, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return1, 1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSetEnv)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetEnv\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* var0;
	long var_len0;
	char* value0;
	long value_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&var0, &var_len0, &value0, &value_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &var0, &var_len0, &value0, &value_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxSetEnv(wxString(var0, wxConvUTF8), wxString(value0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxSetEnv(wxString(var0, wxConvUTF8), wxString(value0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxUnsetEnv)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxUnsetEnv\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* var0;
	long var_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&var0, &var_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &var0, &var_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxUnsetEnv(wxString(var0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxUnsetEnv(wxString(var0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetBatteryState)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetBatteryState\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetBatteryState())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetBatteryState());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetPowerType)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetPowerType\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetPowerType())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetPowerType());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetKeyState)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetKeyState\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long key0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&key0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "l", &key0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxGetKeyState((wxKeyCode) key0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxGetKeyState((wxKeyCode) key0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetMousePosition)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetMousePosition\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetMousePosition() to return new object\n\n");
				#endif
				wxPoint value_to_return0;
				value_to_return0 = wxGetMousePosition();
				void* ptr = safe_emalloc(1, sizeof(wxPoint), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxPoint));
				object_init_ex(return_value, php_wxPoint_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxPoint));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetMouseState)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetMouseState\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxGetMouseState() to return new object\n\n");
				#endif
				wxMouseState value_to_return0;
				value_to_return0 = wxGetMouseState();
				void* ptr = safe_emalloc(1, sizeof(wxMouseState), 0);
				memcpy(ptr, &value_to_return0, sizeof(wxMouseState));
				object_init_ex(return_value, php_wxMouseState_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(ptr, le_wxMouseState));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxEnableTopLevelWindows)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxEnableTopLevelWindows\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool enable0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|b' (&enable0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "|b", &enable0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEnableTopLevelWindows()\n\n");
				#endif
				wxEnableTopLevelWindows();


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxEnableTopLevelWindows(enable0)\n\n");
				#endif
				wxEnableTopLevelWindows(enable0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindWindowAtPoint)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowAtPoint\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* pt0 = 0;
	void* object_pointer0_0 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'O' (&pt0, php_wxPoint_entry)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "O", &pt0, php_wxPoint_entry ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(pt0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(pt0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 )
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(pt0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(pt0);
				}
				else if(Z_TYPE_P(pt0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowAtPoint(*(wxPoint*) object_pointer0_0) to return object pointer\n\n");
				#endif
				wxWindow* value_to_return1;
				value_to_return1 = wxFindWindowAtPoint(*(wxPoint*) object_pointer0_0);
				object_init_ex(return_value,php_wxWindow_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindWindowByLabel)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowByLabel\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* label0;
	long label_len0;
	zval* parent0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|z' (&label0, &label_len0, &parent0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|z", &label0, &label_len0, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_1 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByLabel(wxString(label0, wxConvUTF8)) to return object pointer\n\n");
				#endif
				wxWindow* value_to_return1;
				value_to_return1 = wxFindWindowByLabel(wxString(label0, wxConvUTF8));
				object_init_ex(return_value,php_wxWindow_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByLabel(wxString(label0, wxConvUTF8), (wxWindow*) object_pointer0_1) to return object pointer\n\n");
				#endif
				wxWindow* value_to_return2;
				value_to_return2 = wxFindWindowByLabel(wxString(label0, wxConvUTF8), (wxWindow*) object_pointer0_1);
				object_init_ex(return_value,php_wxWindow_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return2, le_wxWindow));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindWindowByName)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindWindowByName\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* name0;
	long name_len0;
	zval* parent0 = 0;
	void* object_pointer0_1 = 0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|z' (&name0, &name_len0, &parent0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|z", &name0, &name_len0, &parent0 ) == SUCCESS)
		{
			if(arguments_received >= 2){
				if(Z_TYPE_P(parent0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(parent0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_1 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_1 || (rsrc_type != le_wxNonOwnedWindow && rsrc_type != le_wxTopLevelWindow && rsrc_type != le_wxFrame && rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame && rsrc_type != le_wxDialog && rsrc_type != le_wxTextEntryDialog && rsrc_type != le_wxPasswordEntryDialog && rsrc_type != le_wxMessageDialog && rsrc_type != le_wxFindReplaceDialog && rsrc_type != le_wxDirDialog && rsrc_type != le_wxSymbolPickerDialog && rsrc_type != le_wxPropertySheetDialog && rsrc_type != le_wxWizard && rsrc_type != le_wxProgressDialog && rsrc_type != le_wxColourDialog && rsrc_type != le_wxFileDialog && rsrc_type != le_wxFontDialog && rsrc_type != le_wxPageSetupDialog && rsrc_type != le_wxPrintDialog && rsrc_type != le_wxSingleChoiceDialog && rsrc_type != le_wxPopupWindow && rsrc_type != le_wxPopupTransientWindow && rsrc_type != le_wxControl && rsrc_type != le_wxStatusBar && rsrc_type != le_wxAnyButton && rsrc_type != le_wxButton && rsrc_type != le_wxBitmapButton && rsrc_type != le_wxToggleButton && rsrc_type != le_wxBitmapToggleButton && rsrc_type != le_wxTreeCtrl && rsrc_type != le_wxControlWithItems && rsrc_type != le_wxListBox && rsrc_type != le_wxCheckListBox && rsrc_type != le_wxRearrangeList && rsrc_type != le_wxChoice && rsrc_type != le_wxBookCtrlBase && rsrc_type != le_wxAuiNotebook && rsrc_type != le_wxListbook && rsrc_type != le_wxChoicebook && rsrc_type != le_wxNotebook && rsrc_type != le_wxTreebook && rsrc_type != le_wxToolbook && rsrc_type != le_wxAnimationCtrl && rsrc_type != le_wxStyledTextCtrl && rsrc_type != le_wxScrollBar && rsrc_type != le_wxStaticText && rsrc_type != le_wxStaticLine && rsrc_type != le_wxStaticBox && rsrc_type != le_wxStaticBitmap && rsrc_type != le_wxCheckBox && rsrc_type != le_wxTextCtrl && rsrc_type != le_wxSearchCtrl && rsrc_type != le_wxComboBox && rsrc_type != le_wxBitmapComboBox && rsrc_type != le_wxAuiToolBar && rsrc_type != le_wxListCtrl && rsrc_type != le_wxListView && rsrc_type != le_wxRadioBox && rsrc_type != le_wxRadioButton && rsrc_type != le_wxSlider && rsrc_type != le_wxSpinCtrl && rsrc_type != le_wxSpinButton && rsrc_type != le_wxGauge && rsrc_type != le_wxHyperlinkCtrl && rsrc_type != le_wxSpinCtrlDouble && rsrc_type != le_wxGenericDirCtrl && rsrc_type != le_wxCalendarCtrl && rsrc_type != le_wxPickerBase && rsrc_type != le_wxColourPickerCtrl && rsrc_type != le_wxFontPickerCtrl && rsrc_type != le_wxFilePickerCtrl && rsrc_type != le_wxDirPickerCtrl && rsrc_type != le_wxTimePickerCtrl && rsrc_type != le_wxToolBar && rsrc_type != le_wxDatePickerCtrl && rsrc_type != le_wxCollapsiblePane && rsrc_type != le_wxComboCtrl && rsrc_type != le_wxDataViewCtrl && rsrc_type != le_wxDataViewListCtrl && rsrc_type != le_wxDataViewTreeCtrl && rsrc_type != le_wxHeaderCtrl && rsrc_type != le_wxHeaderCtrlSimple && rsrc_type != le_wxFileCtrl && rsrc_type != le_wxInfoBar && rsrc_type != le_wxRibbonControl && rsrc_type != le_wxRibbonBar && rsrc_type != le_wxRibbonButtonBar && rsrc_type != le_wxRibbonGallery && rsrc_type != le_wxRibbonPage && rsrc_type != le_wxRibbonPanel && rsrc_type != le_wxRibbonToolBar && rsrc_type != le_wxSplitterWindow && rsrc_type != le_wxPanel && rsrc_type != le_wxVScrolledWindow && rsrc_type != le_wxVListBox && rsrc_type != le_wxHtmlListBox && rsrc_type != le_wxSimpleHtmlListBox && rsrc_type != le_wxWizardPage && rsrc_type != le_wxWizardPageSimple && rsrc_type != le_wxScrolledWindow && rsrc_type != le_wxHtmlWindow && rsrc_type != le_wxGrid && rsrc_type != le_wxPreviewCanvas && rsrc_type != le_wxEditableListBox && rsrc_type != le_wxHScrolledWindow && rsrc_type != le_wxPreviewControlBar && rsrc_type != le_wxMenuBar && rsrc_type != le_wxBannerWindow && rsrc_type != le_wxMDIClientWindow && rsrc_type != le_wxTreeListCtrl && rsrc_type != le_wxSashWindow && rsrc_type != le_wxSashLayoutWindow && rsrc_type != le_wxHtmlHelpWindow))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(parent0) == IS_LONG)
				{
					object_pointer0_1 = Z_LVAL_P(parent0);
				}
				else if(Z_TYPE_P(parent0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByName(wxString(name0, wxConvUTF8)) to return object pointer\n\n");
				#endif
				wxWindow* value_to_return1;
				value_to_return1 = wxFindWindowByName(wxString(name0, wxConvUTF8));
				object_init_ex(return_value,php_wxWindow_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return1, le_wxWindow));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxFindWindowByName(wxString(name0, wxConvUTF8), (wxWindow*) object_pointer0_1) to return object pointer\n\n");
				#endif
				wxWindow* value_to_return2;
				value_to_return2 = wxFindWindowByName(wxString(name0, wxConvUTF8), (wxWindow*) object_pointer0_1);
				object_init_ex(return_value,php_wxWindow_entry);
				add_property_resource(return_value, "wxResource", zend_list_insert(value_to_return2, le_wxWindow));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxFindMenuItemId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxFindMenuItemId\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	zval* frame0 = 0;
	void* object_pointer0_0 = 0;
	char* menuString0;
	long menuString_len0;
	char* itemString0;
	long itemString_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'zss' (&frame0, &menuString0, &menuString_len0, &itemString0, &itemString_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zss", &frame0, &menuString0, &menuString_len0, &itemString0, &itemString_len0 ) == SUCCESS)
		{
			if(arguments_received >= 1){
				if(Z_TYPE_P(frame0) == IS_OBJECT && zend_hash_find(Z_OBJPROP_P(frame0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
				{
					id_to_find = Z_RESVAL_P(*tmp);
					object_pointer0_0 = zend_list_find(id_to_find, &rsrc_type);
					if (!object_pointer0_0 || (rsrc_type != le_wxSplashScreen && rsrc_type != le_wxMDIChildFrame && rsrc_type != le_wxMDIParentFrame && rsrc_type != le_wxMiniFrame && rsrc_type != le_wxPreviewFrame && rsrc_type != le_wxHtmlHelpDialog && rsrc_type != le_wxHtmlHelpFrame))
					{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
					}
				}
				else if(Z_TYPE_P(frame0) == IS_LONG)
				{
					object_pointer0_0 = Z_LVAL_P(frame0);
				}
				else if(Z_TYPE_P(frame0) != IS_NULL)
				{
						zend_error(E_ERROR, "Parameter  could not be retreived correctly.");
				}
			}

			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxFindMenuItemId((wxFrame*) object_pointer0_0, wxString(menuString0, wxConvUTF8), wxString(itemString0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxFindMenuItemId((wxFrame*) object_pointer0_0, wxString(menuString0, wxConvUTF8), wxString(itemString0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxNewId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxNewId\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxNewId())\n\n");
				#endif
				ZVAL_LONG(return_value, wxNewId());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRegisterId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRegisterId\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long id0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&id0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "l", &id0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxRegisterId((long) id0)\n\n");
				#endif
				wxRegisterId((long) id0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxLaunchDefaultApplication)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxLaunchDefaultApplication\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* document0;
	long document_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&document0, &document_len0, &flags0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|l", &document0, &document_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultApplication(wxString(document0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxLaunchDefaultApplication(wxString(document0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultApplication(wxString(document0, wxConvUTF8), (int) flags0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxLaunchDefaultApplication(wxString(document0, wxConvUTF8), (int) flags0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxLaunchDefaultBrowser)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxLaunchDefaultBrowser\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* url0;
	long url_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&url0, &url_len0, &flags0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|l", &url0, &url_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8)));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8), (int) flags0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxLaunchDefaultBrowser(wxString(url0, wxConvUTF8), (int) flags0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStripMenuCodes)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStripMenuCodes\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's|l' (&str0, &str_len0, &flags0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s|l", &str0, &str_len0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStripMenuCodes(wxString(str0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxStripMenuCodes(wxString(str0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStripMenuCodes(wxString(str0, wxConvUTF8), (int) flags0).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return2;
				value_to_return2 = wxStripMenuCodes(wxString(str0, wxConvUTF8), (int) flags0);
				char* temp_string2;
				temp_string2 = (char*)malloc(sizeof(wxChar)*(value_to_return2.size()+1));
				strcpy (temp_string2, (const char *) value_to_return2.char_str() );
				ZVAL_STRING(return_value, temp_string2, 1);
				free(temp_string2);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetHomeDir)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetHomeDir\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetHomeDir().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetHomeDir();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetFullHostName)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetFullHostName\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetFullHostName().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetFullHostName();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetUserHome)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetUserHome\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* user0;
	long user_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|s' (&user0, &user_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "|s", &user0, &user_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetUserHome().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetUserHome();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetUserHome(wxString(user0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				wxString value_to_return1;
				value_to_return1 = wxGetUserHome(wxString(user0, wxConvUTF8));
				char* temp_string1;
				temp_string1 = (char*)malloc(sizeof(wxChar)*(value_to_return1.size()+1));
				strcpy (temp_string1, (const char *) value_to_return1.char_str() );
				ZVAL_STRING(return_value, temp_string1, 1);
				free(temp_string1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetOsDescription)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetOsDescription\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxGetOsDescription().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxGetOsDescription();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetOsVersion)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetOsVersion\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long* major0;
	zval* major0_ref;
	long* minor0;
	zval* minor0_ref;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|ll' (major0, minor0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "|ll", major0, minor0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "|zz", &major0_ref, &minor0_ref );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetOsVersion())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetOsVersion());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetOsVersion((int*) major0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetOsVersion((int*) major0));

				size_t elements_returned0_0 = sizeof(major0)/sizeof(*major0);
				array_init(major0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(major0_ref, major0[i]);
				}

				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetOsVersion((int*) major0, (int*) minor0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetOsVersion((int*) major0, (int*) minor0));

				size_t elements_returned0_0 = sizeof(major0)/sizeof(*major0);
				array_init(major0_ref);
				for(size_t i=0; i<elements_returned0_0; i++)
				{
					add_next_index_long(major0_ref, major0[i]);
				}
				size_t elements_returned0_1 = sizeof(minor0)/sizeof(*minor0);
				array_init(minor0_ref);
				for(size_t i=0; i<elements_returned0_1; i++)
				{
					add_next_index_long(minor0_ref, minor0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsPlatform64Bit)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsPlatform64Bit\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsPlatform64Bit())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsPlatform64Bit());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsPlatformLittleEndian)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsPlatformLittleEndian\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsPlatformLittleEndian())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsPlatformLittleEndian());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxGetProcessId)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxGetProcessId\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxGetProcessId())\n\n");
				#endif
				ZVAL_LONG(return_value, wxGetProcessId());


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxKill)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxKill\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long pid0;
	long sig0;
	long* rc0;
	zval* rc0_ref;
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 1  && arguments_received <= 4)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l|lll' (&pid0, &sig0, rc0, &flags0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "l|lll", &pid0, &sig0, rc0, &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "z|zzz", &dummy, &dummy, &rc0_ref, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxKill((long) pid0));


				return;
				break;
			}
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxKill((long) pid0, (wxSignal) sig0));


				return;
				break;
			}
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0));

				size_t elements_returned0_2 = sizeof(rc0)/sizeof(*rc0);
				array_init(rc0_ref);
				for(size_t i=0; i<elements_returned0_2; i++)
				{
					add_next_index_long(rc0_ref, rc0[i]);
				}

				return;
				break;
			}
			case 4:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0, (int) flags0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxKill((long) pid0, (wxSignal) sig0, (wxKillError*) rc0, (int) flags0));

				size_t elements_returned0_2 = sizeof(rc0)/sizeof(*rc0);
				array_init(rc0_ref);
				for(size_t i=0; i<elements_returned0_2; i++)
				{
					add_next_index_long(rc0_ref, rc0[i]);
				}

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxShell)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxShell\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* command0;
	long command_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|s' (&command0, &command_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "|s", &command0, &command_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShell())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxShell());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShell(wxString(command0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxShell(wxString(command0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxShutdown)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxShutdown\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long flags0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received >= 0  && arguments_received <= 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '|l' (&flags0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "|l", &flags0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShutdown())\n\n");
				#endif
				ZVAL_BOOL(return_value, wxShutdown());


				return;
				break;
			}
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxShutdown((int) flags0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxShutdown((int) flags0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMicroSleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMicroSleep\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long microseconds0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&microseconds0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "l", &microseconds0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMicroSleep((unsigned long) microseconds0)\n\n");
				#endif
				wxMicroSleep((unsigned long) microseconds0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxMilliSleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxMilliSleep\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long milliseconds0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&milliseconds0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "l", &milliseconds0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxMilliSleep((unsigned long) milliseconds0)\n\n");
				#endif
				wxMilliSleep((unsigned long) milliseconds0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxNow)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxNow\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 0)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with '' ()\n");
		#endif
		overload0_called = true;
		already_called = true;
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 0:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxNow().fn_str(), 1)\n\n");
				#endif
				wxString value_to_return0;
				value_to_return0 = wxNow();
				char* temp_string0;
				temp_string0 = (char*)malloc(sizeof(wxChar)*(value_to_return0.size()+1));
				strcpy (temp_string0, (const char *) value_to_return0.char_str() );
				ZVAL_STRING(return_value, temp_string0, 1);
				free(temp_string0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSleep\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long secs0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&secs0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "l", &secs0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxSleep((int) secs0)\n\n");
				#endif
				wxSleep((int) secs0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxUsleep)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxUsleep\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long milliseconds0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'l' (&milliseconds0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "l", &milliseconds0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing ::wxUsleep((unsigned long) milliseconds0)\n\n");
				#endif
				wxUsleep((unsigned long) milliseconds0);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxIsEmpty)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxIsEmpty\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &s0, &s_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s1, &s_len1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &s1, &s_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsEmpty(s0))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsEmpty(s0));


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_BOOL(::wxIsEmpty(wxString(s1, wxConvUTF8)))\n\n");
				#endif
				ZVAL_BOOL(return_value, wxIsEmpty(wxString(s1, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTmemchr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemchr\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	long c0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sll' (&s0, &s_len0, &c0, &len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sll", &s0, &s_len0, &c0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemchr(s0, (char) c0, (size_t) len0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxTmemchr(s0, (char) c0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTmemcmp)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemcmp\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* sz10;
	long sz1_len0;
	char* sz20;
	long sz2_len0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&sz10, &sz1_len0, &sz20, &sz2_len0, &len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssl", &sz10, &sz1_len0, &sz20, &sz2_len0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxTmemcmp(sz10, sz20, (size_t) len0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxTmemcmp(sz10, sz20, (size_t) len0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTmemcpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemcpy\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* szOut0;
	long szOut_len0;
	zval* szOut0_ref;
	char* szIn0;
	long szIn_len0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssl", &szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz", &szOut0_ref, &dummy, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemcpy(szOut0, szIn0, (size_t) len0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxTmemcpy(szOut0, szIn0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(szOut0_ref, szOut0, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTmemmove)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemmove\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* szOut0;
	long szOut_len0;
	zval* szOut0_ref;
	char* szIn0;
	long szIn_len0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssl", &szOut0, &szOut_len0, &szIn0, &szIn_len0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz", &szOut0_ref, &dummy, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemmove(szOut0, szIn0, (size_t) len0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxTmemmove(szOut0, szIn0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(szOut0_ref, szOut0, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxTmemset)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxTmemset\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* szOut0;
	long szOut_len0;
	zval* szOut0_ref;
	long cIn0;
	long len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sll' (&szOut0, &szOut_len0, &cIn0, &len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sll", &szOut0, &szOut_len0, &cIn0, &len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz", &szOut0_ref, &dummy, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxTmemset(szOut0, (const char) cIn0, (size_t) len0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxTmemset(szOut0, (const char) cIn0, (size_t) len0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(szOut0_ref, szOut0, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSetlocale)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSetlocale\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	long category0;
	char* locale0;
	long locale_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ls' (&category0, &locale0, &locale_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ls", &category0, &locale0, &locale_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxSetlocale((int) category0, wxString(locale0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxSetlocale((int) category0, wxString(locale0, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrlen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrlen\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &s0, &s_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrlen(wxString(s0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxStrlen(wxString(s0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrnlen)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrnlen\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	long maxlen0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&str0, &str_len0, &maxlen0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sl", &str0, &str_len0, &maxlen0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrnlen(str0, (size_t) maxlen0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxStrnlen(str0, (size_t) maxlen0));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrdup)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrdup\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&s0, &s_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &s0, &s_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrdup(wxString(s0, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return1;
				value_to_return1 = wxStrdup(wxString(s0, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return1, 1);


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrcpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrcpy\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest0, &dest_len0, &src0, &src_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &dest0, &dest_len0, &src0, &src_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &dest0_ref, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest1, &dest_len1, &src1, &src_len1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &dest1, &dest_len1, &src1, &src_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &dest1_ref, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcpy(dest0, src0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrcpy(dest0, src0);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcpy(dest1, wxString(src1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrcpy(dest1, wxString(src1, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrncpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrncpy\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	long n1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssl", &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz", &dest0_ref, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssl", &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz", &dest1_ref, &dummy, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncpy(dest0, src0, (size_t) n0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxStrncpy(dest0, src0, (size_t) n0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncpy(dest1, wxString(src1, wxConvUTF8), (size_t) n1).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxStrncpy(dest1, wxString(src1, wxConvUTF8), (size_t) n1);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrlcpy)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrlcpy\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssl", &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz", &dest0_ref, &dummy, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrlcpy(dest0, src0, (size_t) n0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxStrlcpy(dest0, src0, (size_t) n0));

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrcat)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrcat\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest0, &dest_len0, &src0, &src_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &dest0, &dest_len0, &src0, &src_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &dest0_ref, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&dest1, &dest_len1, &src1, &src_len1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &dest1, &dest_len1, &src1, &src_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &dest1_ref, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcat(dest0, src0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrcat(dest0, src0);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrcat(dest1, wxString(src1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrcat(dest1, wxString(src1, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrncat)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrncat\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	long n1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssl", &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz", &dest0_ref, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssl", &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz", &dest1_ref, &dummy, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncat(dest0, src0, (size_t) n0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxStrncat(dest0, src0, (size_t) n0);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrncat(dest1, wxString(src1, wxConvUTF8), (size_t) n1).fn_str(), 1)\n\n");
				#endif
				char* value_to_return3;
				value_to_return3 = wxStrncat(dest1, wxString(src1, wxConvUTF8), (size_t) n1);
				ZVAL_STRING(return_value, value_to_return3, 1);

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrxfrm)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrxfrm\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* dest0;
	long dest_len0;
	zval* dest0_ref;
	char* src0;
	long src_len0;
	long n0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* dest1;
	long dest_len1;
	zval* dest1_ref;
	char* src1;
	long src_len1;
	long n1;
	bool overload1_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest0, &dest_len0, &src0, &src_len0, &n0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssl", &dest0, &dest_len0, &src0, &src_len0, &n0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz", &dest0_ref, &dummy, &dummy );
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 3)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ssl' (&dest1, &dest_len1, &src1, &src_len1, &n1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ssl", &dest1, &dest_len1, &src1, &src_len1, &n1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zzz", &dest1_ref, &dummy, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrxfrm(dest0, src0, (size_t) n0))\n\n");
				#endif
				ZVAL_LONG(return_value, wxStrxfrm(dest0, src0, (size_t) n0));

				ZVAL_STRING(dest0_ref, dest0, 1);

				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 3:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxStrxfrm(dest1, wxString(src1, wxConvUTF8), (size_t) n1))\n\n");
				#endif
				ZVAL_LONG(return_value, wxStrxfrm(dest1, wxString(src1, wxConvUTF8), (size_t) n1));

				ZVAL_STRING(dest1_ref, dest1, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrstr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrstr\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* haystack0;
	long haystack_len0;
	char* needle0;
	long needle_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* haystack1;
	long haystack_len1;
	char* needle1;
	long needle_len1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* haystack2;
	long haystack_len2;
	char* needle2;
	long needle_len2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* haystack3;
	long haystack_len3;
	char* needle3;
	long needle_len3;
	bool overload3_called = false;
	//Parameters for overload 4
	char* haystack4;
	long haystack_len4;
	zval* haystack4_ref;
	char* needle4;
	long needle_len4;
	bool overload4_called = false;
	//Parameters for overload 5
	char* haystack5;
	long haystack_len5;
	zval* haystack5_ref;
	char* needle5;
	long needle_len5;
	bool overload5_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack0, &haystack_len0, &needle0, &needle_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &haystack0, &haystack_len0, &needle0, &needle_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack1, &haystack_len1, &needle1, &needle_len1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &haystack1, &haystack_len1, &needle1, &needle_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack2, &haystack_len2, &needle2, &needle_len2)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &haystack2, &haystack_len2, &needle2, &needle_len2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack3, &haystack_len3, &needle3, &needle_len3)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &haystack3, &haystack_len3, &needle3, &needle_len3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;
		}
	}

	//Overload 4
	overload4:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack4, &haystack_len4, &needle4, &needle_len4)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &haystack4, &haystack_len4, &needle4, &needle_len4 ) == SUCCESS)
		{
			overload4_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &haystack4_ref, &dummy );
		}
	}

	//Overload 5
	overload5:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&haystack5, &haystack_len5, &needle5, &needle_len5)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &haystack5, &haystack_len5, &needle5, &needle_len5 ) == SUCCESS)
		{
			overload5_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &haystack5_ref, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack0, needle0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrstr(haystack0, needle0);
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack1, wxString(needle1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrstr(haystack1, wxString(needle1, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(wxString(haystack2, wxConvUTF8), wxString(needle2, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrstr(wxString(haystack2, wxConvUTF8), wxString(needle2, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(wxString(haystack3, wxConvUTF8), needle3).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrstr(wxString(haystack3, wxConvUTF8), needle3);
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload4_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack4, needle4).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrstr(haystack4, needle4);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(haystack4_ref, haystack4, 1);

				return;
				break;
			}
		}
	}

	
	if(overload5_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrstr(haystack5, wxString(needle5, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrstr(haystack5, wxString(needle5, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(haystack5_ref, haystack5, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrchr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrchr\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	long c0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	long c1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* s2;
	long s_len2;
	long c2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* s3;
	long s_len3;
	zval* s3_ref;
	long c3;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s0, &s_len0, &c0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sl", &s0, &s_len0, &c0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s1, &s_len1, &c1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sl", &s1, &s_len1, &c1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s2, &s_len2, &c2)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sl", &s2, &s_len2, &c2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s3, &s_len3, &c3)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sl", &s3, &s_len3, &c3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &s3_ref, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(s0, (char) c0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrchr(s0, (char) c0);
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(wxString(s1, wxConvUTF8), (char) c1).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrchr(wxString(s1, wxConvUTF8), (char) c1);
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(wxString(s2, wxConvUTF8), (int) c2).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrchr(wxString(s2, wxConvUTF8), (int) c2);
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrchr(s3, (char) c3).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrchr(s3, (char) c3);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s3_ref, s3, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrrchr)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrrchr\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	long c0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	long c1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* s2;
	long s_len2;
	long c2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* s3;
	long s_len3;
	zval* s3_ref;
	long c3;
	bool overload3_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s0, &s_len0, &c0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sl", &s0, &s_len0, &c0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s1, &s_len1, &c1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sl", &s1, &s_len1, &c1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s2, &s_len2, &c2)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sl", &s2, &s_len2, &c2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'sl' (&s3, &s_len3, &c3)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "sl", &s3, &s_len3, &c3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &s3_ref, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(s0, (char) c0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrrchr(s0, (char) c0);
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(wxString(s1, wxConvUTF8), (char) c1).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrrchr(wxString(s1, wxConvUTF8), (char) c1);
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(wxString(s2, wxConvUTF8), (int) c2).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrrchr(wxString(s2, wxConvUTF8), (int) c2);
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrrchr(s3, (char) c3).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrrchr(s3, (char) c3);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s3_ref, s3, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxStrpbrk)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxStrpbrk\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* s0;
	long s_len0;
	char* accept0;
	long accept_len0;
	bool overload0_called = false;
	//Parameters for overload 1
	char* s1;
	long s_len1;
	char* accept1;
	long accept_len1;
	bool overload1_called = false;
	//Parameters for overload 2
	char* s2;
	long s_len2;
	char* accept2;
	long accept_len2;
	bool overload2_called = false;
	//Parameters for overload 3
	char* s3;
	long s_len3;
	char* accept3;
	long accept_len3;
	bool overload3_called = false;
	//Parameters for overload 4
	char* s4;
	long s_len4;
	zval* s4_ref;
	char* accept4;
	long accept_len4;
	bool overload4_called = false;
	//Parameters for overload 5
	char* s5;
	long s_len5;
	zval* s5_ref;
	char* accept5;
	long accept_len5;
	bool overload5_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s0, &s_len0, &accept0, &accept_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &s0, &s_len0, &accept0, &accept_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

	//Overload 1
	overload1:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s1, &s_len1, &accept1, &accept_len1)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &s1, &s_len1, &accept1, &accept_len1 ) == SUCCESS)
		{
			overload1_called = true;
			already_called = true;
		}
	}

	//Overload 2
	overload2:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s2, &s_len2, &accept2, &accept_len2)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &s2, &s_len2, &accept2, &accept_len2 ) == SUCCESS)
		{
			overload2_called = true;
			already_called = true;
		}
	}

	//Overload 3
	overload3:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s3, &s_len3, &accept3, &accept_len3)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &s3, &s_len3, &accept3, &accept_len3 ) == SUCCESS)
		{
			overload3_called = true;
			already_called = true;
		}
	}

	//Overload 4
	overload4:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s4, &s_len4, &accept4, &accept_len4)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &s4, &s_len4, &accept4, &accept_len4 ) == SUCCESS)
		{
			overload4_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &s4_ref, &dummy );
		}
	}

	//Overload 5
	overload5:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&s5, &s_len5, &accept5, &accept_len5)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &s5, &s_len5, &accept5, &accept_len5 ) == SUCCESS)
		{
			overload5_called = true;
			already_called = true;

			zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "zz", &s5_ref, &dummy );
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s0, accept0).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrpbrk(s0, accept0);
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload1_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s1, wxString(accept1, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrpbrk(s1, wxString(accept1, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload2_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(wxString(s2, wxConvUTF8), wxString(accept2, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrpbrk(wxString(s2, wxConvUTF8), wxString(accept2, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload3_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(wxString(s3, wxConvUTF8), accept3).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrpbrk(wxString(s3, wxConvUTF8), accept3);
				ZVAL_STRING(return_value, value_to_return2, 1);


				return;
				break;
			}
		}
	}

	
	if(overload4_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s4, accept4).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrpbrk(s4, accept4);
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s4_ref, s4, 1);

				return;
				break;
			}
		}
	}

	
	if(overload5_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_STRING(::wxStrpbrk(s5, wxString(accept5, wxConvUTF8)).fn_str(), 1)\n\n");
				#endif
				char* value_to_return2;
				value_to_return2 = wxStrpbrk(s5, wxString(accept5, wxConvUTF8));
				ZVAL_STRING(return_value, value_to_return2, 1);

				ZVAL_STRING(s5_ref, s5, 1);

				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRemove)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRemove\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* path0;
	long path_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&path0, &path_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &path0, &path_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxRemove(wxString(path0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxRemove(wxString(path0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxRename)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxRename\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* oldpath0;
	long oldpath_len0;
	char* newpath0;
	long newpath_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 2)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 'ss' (&oldpath0, &oldpath_len0, &newpath0, &newpath_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "ss", &oldpath0, &oldpath_len0, &newpath0, &newpath_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 2:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxRename(wxString(oldpath0, wxConvUTF8), wxString(newpath0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxRename(wxString(oldpath0, wxConvUTF8), wxString(newpath0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxAtoi)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAtoi\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxAtoi(wxString(str0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxAtoi(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxAtol)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAtol\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxAtol(wxString(str0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxAtol(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxAtof)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxAtof\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxAtof(wxString(str0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_DOUBLE(return_value, wxAtof(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxSystem)
{
	#ifdef USE_WXPHP_DEBUG
	php_printf("Invoking function wxSystem\n");
	php_printf("===========================================\n");
	#endif;
	
	//In case the function uses objects
	zval **tmp;
	int rsrc_type;
	int id_to_find;
	char _wxResource[] = "wxResource";
	
	//Other variables used thru the code
	int arguments_received = ZEND_NUM_ARGS();
	zval* dummy;
	bool already_called = false;
	
	//Parameters for overload 0
	char* str0;
	long str_len0;
	bool overload0_called = false;
		
	//Overload 0
	overload0:
	if(!already_called && arguments_received == 1)
	{
		#ifdef USE_WXPHP_DEBUG
		php_printf("Parameters received %d\n", arguments_received);
		php_printf("Parsing parameters with 's' (&str0, &str_len0)\n");
		#endif
		if(zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, arguments_received TSRMLS_CC, "s", &str0, &str_len0 ) == SUCCESS)
		{
			overload0_called = true;
			already_called = true;
		}
	}

		
	
	if(overload0_called)
	{
		switch(arguments_received)
		{
			case 1:
			{
				#ifdef USE_WXPHP_DEBUG
				php_printf("Executing RETURN_LONG(::wxSystem(wxString(str0, wxConvUTF8)))\n\n");
				#endif
				ZVAL_LONG(return_value, wxSystem(wxString(str0, wxConvUTF8)));


				return;
				break;
			}
		}
	}

		
}
PHP_FUNCTION(php_wxDynamicCast)
{
	zval **tmp;
	int rsrc_type;
	char _wxResource[] = "wxResource";
	int valid = 1;

	char* _argStr0;
	int _argStr0_len;
	void *_ptrObj0 = 0;
	zval *_argObj0 = 0;
	int id_to_find0;
	
	if (zend_parse_parameters_ex(ZEND_PARSE_PARAMS_QUIET, ZEND_NUM_ARGS() TSRMLS_CC, "z!s!",  &_argObj0 , &_argStr0 , &_argStr0_len ) == SUCCESS){

		if(_argObj0)
		{
			if(Z_TYPE_P(_argObj0)==IS_OBJECT && zend_hash_find(Z_OBJPROP_P(_argObj0), _wxResource , sizeof(_wxResource),  (void **)&tmp) == SUCCESS)
			{
				id_to_find0 = Z_RESVAL_P(*tmp);
				_ptrObj0 = zend_list_find(id_to_find0, &rsrc_type);
			}
		}
		
		if(valid){
			if(!strcmp(_argStr0, "wxFrame")){
				object_init_ex(return_value, php_wxFrame_entry);
				wxFrame* ret = wxDynamicCast(_ptrObj0, wxFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTopLevelWindow")){
				object_init_ex(return_value, php_wxTopLevelWindow_entry);
				wxTopLevelWindow* ret = wxDynamicCast(_ptrObj0, wxTopLevelWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxTopLevelWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxNonOwnedWindow")){
				object_init_ex(return_value, php_wxNonOwnedWindow_entry);
				wxNonOwnedWindow* ret = wxDynamicCast(_ptrObj0, wxNonOwnedWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxNonOwnedWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWindow")){
				object_init_ex(return_value, php_wxWindow_entry);
				wxWindow* ret = wxDynamicCast(_ptrObj0, wxWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxEvtHandler")){
				object_init_ex(return_value, php_wxEvtHandler_entry);
				wxEvtHandler* ret = wxDynamicCast(_ptrObj0, wxEvtHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxEvtHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStatusBar")){
				object_init_ex(return_value, php_wxStatusBar_entry);
				wxStatusBar* ret = wxDynamicCast(_ptrObj0, wxStatusBar_php);
				long id_to_find = zend_list_insert(ret, le_wxStatusBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxButton")){
				object_init_ex(return_value, php_wxButton_entry);
				wxButton* ret = wxDynamicCast(_ptrObj0, wxButton_php);
				long id_to_find = zend_list_insert(ret, le_wxButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAnyButton")){
				object_init_ex(return_value, php_wxAnyButton_entry);
				wxAnyButton* ret = wxDynamicCast(_ptrObj0, wxAnyButton_php);
				long id_to_find = zend_list_insert(ret, le_wxAnyButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxControl")){
				object_init_ex(return_value, php_wxControl_entry);
				wxControl* ret = wxDynamicCast(_ptrObj0, wxControl_php);
				long id_to_find = zend_list_insert(ret, le_wxControl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxValidator")){
				object_init_ex(return_value, php_wxValidator_entry);
				wxValidator* ret = wxDynamicCast(_ptrObj0, wxValidator_php);
				long id_to_find = zend_list_insert(ret, le_wxValidator);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBitmapHandler")){
				object_init_ex(return_value, php_wxBitmapHandler_entry);
				wxBitmapHandler* ret = wxDynamicCast(_ptrObj0, wxBitmapHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxBitmapHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBitmap")){
				object_init_ex(return_value, php_wxBitmap_entry);
				wxBitmap* ret = wxDynamicCast(_ptrObj0, wxBitmap_php);
				long id_to_find = zend_list_insert(ret, le_wxBitmap);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPalette")){
				object_init_ex(return_value, php_wxPalette_entry);
				wxPalette* ret = wxDynamicCast(_ptrObj0, wxPalette_php);
				long id_to_find = zend_list_insert(ret, le_wxPalette);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxImage")){
				object_init_ex(return_value, php_wxImage_entry);
				wxImage* ret = wxDynamicCast(_ptrObj0, wxImage_php);
				long id_to_find = zend_list_insert(ret, le_wxImage);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxIcon")){
				object_init_ex(return_value, php_wxIcon_entry);
				wxIcon* ret = wxDynamicCast(_ptrObj0, wxIcon_php);
				long id_to_find = zend_list_insert(ret, le_wxIcon);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSplitterWindow")){
				object_init_ex(return_value, php_wxSplitterWindow_entry);
				wxSplitterWindow* ret = wxDynamicCast(_ptrObj0, wxSplitterWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxSplitterWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBoxSizer")){
				object_init_ex(return_value, php_wxBoxSizer_entry);
				wxBoxSizer* ret = wxDynamicCast(_ptrObj0, wxBoxSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxBoxSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSizer")){
				object_init_ex(return_value, php_wxSizer_entry);
				wxSizer* ret = wxDynamicCast(_ptrObj0, wxSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSizerItem")){
				object_init_ex(return_value, php_wxSizerItem_entry);
				wxSizerItem* ret = wxDynamicCast(_ptrObj0, wxSizerItem_php);
				long id_to_find = zend_list_insert(ret, le_wxSizerItem);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTreeCtrl")){
				object_init_ex(return_value, php_wxTreeCtrl_entry);
				wxTreeCtrl* ret = wxDynamicCast(_ptrObj0, wxTreeCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxTreeCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxImageList")){
				object_init_ex(return_value, php_wxImageList_entry);
				wxImageList* ret = wxDynamicCast(_ptrObj0, wxImageList_php);
				long id_to_find = zend_list_insert(ret, le_wxImageList);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDC")){
				object_init_ex(return_value, php_wxDC_entry);
				wxDC* ret = wxDynamicCast(_ptrObj0, wxDC_php);
				long id_to_find = zend_list_insert(ret, le_wxDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxColour")){
				object_init_ex(return_value, php_wxColour_entry);
				wxColour* ret = wxDynamicCast(_ptrObj0, wxColour_php);
				long id_to_find = zend_list_insert(ret, le_wxColour);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFont")){
				object_init_ex(return_value, php_wxFont_entry);
				wxFont* ret = wxDynamicCast(_ptrObj0, wxFont_php);
				long id_to_find = zend_list_insert(ret, le_wxFont);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPanel")){
				object_init_ex(return_value, php_wxPanel_entry);
				wxPanel* ret = wxDynamicCast(_ptrObj0, wxPanel_php);
				long id_to_find = zend_list_insert(ret, le_wxPanel);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCheckListBox")){
				object_init_ex(return_value, php_wxCheckListBox_entry);
				wxCheckListBox* ret = wxDynamicCast(_ptrObj0, wxCheckListBox_php);
				long id_to_find = zend_list_insert(ret, le_wxCheckListBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxListBox")){
				object_init_ex(return_value, php_wxListBox_entry);
				wxListBox* ret = wxDynamicCast(_ptrObj0, wxListBox_php);
				long id_to_find = zend_list_insert(ret, le_wxListBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxControlWithItems")){
				object_init_ex(return_value, php_wxControlWithItems_entry);
				wxControlWithItems* ret = wxDynamicCast(_ptrObj0, wxControlWithItems_php);
				long id_to_find = zend_list_insert(ret, le_wxControlWithItems);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMenuBar")){
				object_init_ex(return_value, php_wxMenuBar_entry);
				wxMenuBar* ret = wxDynamicCast(_ptrObj0, wxMenuBar_php);
				long id_to_find = zend_list_insert(ret, le_wxMenuBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMenuEvent")){
				object_init_ex(return_value, php_wxMenuEvent_entry);
				wxMenuEvent* ret = wxDynamicCast(_ptrObj0, wxMenuEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxMenuEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMenuItem")){
				object_init_ex(return_value, php_wxMenuItem_entry);
				wxMenuItem* ret = wxDynamicCast(_ptrObj0, wxMenuItem_php);
				long id_to_find = zend_list_insert(ret, le_wxMenuItem);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMenu")){
				object_init_ex(return_value, php_wxMenu_entry);
				wxMenu* ret = wxDynamicCast(_ptrObj0, wxMenu_php);
				long id_to_find = zend_list_insert(ret, le_wxMenu);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxEvent")){
				object_init_ex(return_value, php_wxEvent_entry);
				wxEvent* ret = wxDynamicCast(_ptrObj0, wxEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTreeEvent")){
				object_init_ex(return_value, php_wxTreeEvent_entry);
				wxTreeEvent* ret = wxDynamicCast(_ptrObj0, wxTreeEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxTreeEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxKeyEvent")){
				object_init_ex(return_value, php_wxKeyEvent_entry);
				wxKeyEvent* ret = wxDynamicCast(_ptrObj0, wxKeyEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxKeyEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxNotifyEvent")){
				object_init_ex(return_value, php_wxNotifyEvent_entry);
				wxNotifyEvent* ret = wxDynamicCast(_ptrObj0, wxNotifyEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxNotifyEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCommandEvent")){
				object_init_ex(return_value, php_wxCommandEvent_entry);
				wxCommandEvent* ret = wxDynamicCast(_ptrObj0, wxCommandEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxCommandEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCloseEvent")){
				object_init_ex(return_value, php_wxCloseEvent_entry);
				wxCloseEvent* ret = wxDynamicCast(_ptrObj0, wxCloseEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxCloseEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxActivateEvent")){
				object_init_ex(return_value, php_wxActivateEvent_entry);
				wxActivateEvent* ret = wxDynamicCast(_ptrObj0, wxActivateEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxActivateEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiManager")){
				object_init_ex(return_value, php_wxAuiManager_entry);
				wxAuiManager* ret = wxDynamicCast(_ptrObj0, wxAuiManager_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiManager);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiManagerEvent")){
				object_init_ex(return_value, php_wxAuiManagerEvent_entry);
				wxAuiManagerEvent* ret = wxDynamicCast(_ptrObj0, wxAuiManagerEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiManagerEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiNotebook")){
				object_init_ex(return_value, php_wxAuiNotebook_entry);
				wxAuiNotebook* ret = wxDynamicCast(_ptrObj0, wxAuiNotebook_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiNotebook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiNotebookEvent")){
				object_init_ex(return_value, php_wxAuiNotebookEvent_entry);
				wxAuiNotebookEvent* ret = wxDynamicCast(_ptrObj0, wxAuiNotebookEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiNotebookEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBookCtrlEvent")){
				object_init_ex(return_value, php_wxBookCtrlEvent_entry);
				wxBookCtrlEvent* ret = wxDynamicCast(_ptrObj0, wxBookCtrlEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxBookCtrlEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBookCtrlBase")){
				object_init_ex(return_value, php_wxBookCtrlBase_entry);
				wxBookCtrlBase* ret = wxDynamicCast(_ptrObj0, wxBookCtrlBase_php);
				long id_to_find = zend_list_insert(ret, le_wxBookCtrlBase);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAcceleratorTable")){
				object_init_ex(return_value, php_wxAcceleratorTable_entry);
				wxAcceleratorTable* ret = wxDynamicCast(_ptrObj0, wxAcceleratorTable_php);
				long id_to_find = zend_list_insert(ret, le_wxAcceleratorTable);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGDIObject")){
				object_init_ex(return_value, php_wxGDIObject_entry);
				wxGDIObject* ret = wxDynamicCast(_ptrObj0, wxGDIObject_php);
				long id_to_find = zend_list_insert(ret, le_wxGDIObject);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAnimation")){
				object_init_ex(return_value, php_wxAnimation_entry);
				wxAnimation* ret = wxDynamicCast(_ptrObj0, wxAnimation_php);
				long id_to_find = zend_list_insert(ret, le_wxAnimation);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAnimationCtrl")){
				object_init_ex(return_value, php_wxAnimationCtrl_entry);
				wxAnimationCtrl* ret = wxDynamicCast(_ptrObj0, wxAnimationCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxAnimationCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxArtProvider")){
				object_init_ex(return_value, php_wxArtProvider_entry);
				wxArtProvider* ret = wxDynamicCast(_ptrObj0, wxArtProvider_php);
				long id_to_find = zend_list_insert(ret, le_wxArtProvider);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxIconBundle")){
				object_init_ex(return_value, php_wxIconBundle_entry);
				wxIconBundle* ret = wxDynamicCast(_ptrObj0, wxIconBundle_php);
				long id_to_find = zend_list_insert(ret, le_wxIconBundle);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStyledTextCtrl")){
				object_init_ex(return_value, php_wxStyledTextCtrl_entry);
				wxStyledTextCtrl* ret = wxDynamicCast(_ptrObj0, wxStyledTextCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxStyledTextCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStyledTextEvent")){
				object_init_ex(return_value, php_wxStyledTextEvent_entry);
				wxStyledTextEvent* ret = wxDynamicCast(_ptrObj0, wxStyledTextEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxStyledTextEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxScrollBar")){
				object_init_ex(return_value, php_wxScrollBar_entry);
				wxScrollBar* ret = wxDynamicCast(_ptrObj0, wxScrollBar_php);
				long id_to_find = zend_list_insert(ret, le_wxScrollBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStaticText")){
				object_init_ex(return_value, php_wxStaticText_entry);
				wxStaticText* ret = wxDynamicCast(_ptrObj0, wxStaticText_php);
				long id_to_find = zend_list_insert(ret, le_wxStaticText);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStaticLine")){
				object_init_ex(return_value, php_wxStaticLine_entry);
				wxStaticLine* ret = wxDynamicCast(_ptrObj0, wxStaticLine_php);
				long id_to_find = zend_list_insert(ret, le_wxStaticLine);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStaticBoxSizer")){
				object_init_ex(return_value, php_wxStaticBoxSizer_entry);
				wxStaticBoxSizer* ret = wxDynamicCast(_ptrObj0, wxStaticBoxSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxStaticBoxSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStaticBox")){
				object_init_ex(return_value, php_wxStaticBox_entry);
				wxStaticBox* ret = wxDynamicCast(_ptrObj0, wxStaticBox_php);
				long id_to_find = zend_list_insert(ret, le_wxStaticBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStaticBitmap")){
				object_init_ex(return_value, php_wxStaticBitmap_entry);
				wxStaticBitmap* ret = wxDynamicCast(_ptrObj0, wxStaticBitmap_php);
				long id_to_find = zend_list_insert(ret, le_wxStaticBitmap);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCheckBox")){
				object_init_ex(return_value, php_wxCheckBox_entry);
				wxCheckBox* ret = wxDynamicCast(_ptrObj0, wxCheckBox_php);
				long id_to_find = zend_list_insert(ret, le_wxCheckBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWrapSizer")){
				object_init_ex(return_value, php_wxWrapSizer_entry);
				wxWrapSizer* ret = wxDynamicCast(_ptrObj0, wxWrapSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxWrapSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBitmapButton")){
				object_init_ex(return_value, php_wxBitmapButton_entry);
				wxBitmapButton* ret = wxDynamicCast(_ptrObj0, wxBitmapButton_php);
				long id_to_find = zend_list_insert(ret, le_wxBitmapButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTextCtrl")){
				object_init_ex(return_value, php_wxTextCtrl_entry);
				wxTextCtrl* ret = wxDynamicCast(_ptrObj0, wxTextCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxTextCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTextEntryDialog")){
				object_init_ex(return_value, php_wxTextEntryDialog_entry);
				wxTextEntryDialog* ret = wxDynamicCast(_ptrObj0, wxTextEntryDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxTextEntryDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxComboBox")){
				object_init_ex(return_value, php_wxComboBox_entry);
				wxComboBox* ret = wxDynamicCast(_ptrObj0, wxComboBox_php);
				long id_to_find = zend_list_insert(ret, le_wxComboBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBitmapComboBox")){
				object_init_ex(return_value, php_wxBitmapComboBox_entry);
				wxBitmapComboBox* ret = wxDynamicCast(_ptrObj0, wxBitmapComboBox_php);
				long id_to_find = zend_list_insert(ret, le_wxBitmapComboBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiToolBarEvent")){
				object_init_ex(return_value, php_wxAuiToolBarEvent_entry);
				wxAuiToolBarEvent* ret = wxDynamicCast(_ptrObj0, wxAuiToolBarEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiToolBarEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAuiToolBar")){
				object_init_ex(return_value, php_wxAuiToolBar_entry);
				wxAuiToolBar* ret = wxDynamicCast(_ptrObj0, wxAuiToolBar_php);
				long id_to_find = zend_list_insert(ret, le_wxAuiToolBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBannerWindow")){
				object_init_ex(return_value, php_wxBannerWindow_entry);
				wxBannerWindow* ret = wxDynamicCast(_ptrObj0, wxBannerWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxBannerWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxChoice")){
				object_init_ex(return_value, php_wxChoice_entry);
				wxChoice* ret = wxDynamicCast(_ptrObj0, wxChoice_php);
				long id_to_find = zend_list_insert(ret, le_wxChoice);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxListEvent")){
				object_init_ex(return_value, php_wxListEvent_entry);
				wxListEvent* ret = wxDynamicCast(_ptrObj0, wxListEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxListEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxListCtrl")){
				object_init_ex(return_value, php_wxListCtrl_entry);
				wxListCtrl* ret = wxDynamicCast(_ptrObj0, wxListCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxListCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxListbook")){
				object_init_ex(return_value, php_wxListbook_entry);
				wxListbook* ret = wxDynamicCast(_ptrObj0, wxListbook_php);
				long id_to_find = zend_list_insert(ret, le_wxListbook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxChildFocusEvent")){
				object_init_ex(return_value, php_wxChildFocusEvent_entry);
				wxChildFocusEvent* ret = wxDynamicCast(_ptrObj0, wxChildFocusEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxChildFocusEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxChoicebook")){
				object_init_ex(return_value, php_wxChoicebook_entry);
				wxChoicebook* ret = wxDynamicCast(_ptrObj0, wxChoicebook_php);
				long id_to_find = zend_list_insert(ret, le_wxChoicebook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRadioBox")){
				object_init_ex(return_value, php_wxRadioBox_entry);
				wxRadioBox* ret = wxDynamicCast(_ptrObj0, wxRadioBox_php);
				long id_to_find = zend_list_insert(ret, le_wxRadioBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRadioButton")){
				object_init_ex(return_value, php_wxRadioButton_entry);
				wxRadioButton* ret = wxDynamicCast(_ptrObj0, wxRadioButton_php);
				long id_to_find = zend_list_insert(ret, le_wxRadioButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRearrangeList")){
				object_init_ex(return_value, php_wxRearrangeList_entry);
				wxRearrangeList* ret = wxDynamicCast(_ptrObj0, wxRearrangeList_php);
				long id_to_find = zend_list_insert(ret, le_wxRearrangeList);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSlider")){
				object_init_ex(return_value, php_wxSlider_entry);
				wxSlider* ret = wxDynamicCast(_ptrObj0, wxSlider_php);
				long id_to_find = zend_list_insert(ret, le_wxSlider);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSpinCtrl")){
				object_init_ex(return_value, php_wxSpinCtrl_entry);
				wxSpinCtrl* ret = wxDynamicCast(_ptrObj0, wxSpinCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxSpinCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSpinButton")){
				object_init_ex(return_value, php_wxSpinButton_entry);
				wxSpinButton* ret = wxDynamicCast(_ptrObj0, wxSpinButton_php);
				long id_to_find = zend_list_insert(ret, le_wxSpinButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSpinEvent")){
				object_init_ex(return_value, php_wxSpinEvent_entry);
				wxSpinEvent* ret = wxDynamicCast(_ptrObj0, wxSpinEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSpinEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSplitterEvent")){
				object_init_ex(return_value, php_wxSplitterEvent_entry);
				wxSplitterEvent* ret = wxDynamicCast(_ptrObj0, wxSplitterEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSplitterEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSplashScreen")){
				object_init_ex(return_value, php_wxSplashScreen_entry);
				wxSplashScreen* ret = wxDynamicCast(_ptrObj0, wxSplashScreen_php);
				long id_to_find = zend_list_insert(ret, le_wxSplashScreen);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSizeEvent")){
				object_init_ex(return_value, php_wxSizeEvent_entry);
				wxSizeEvent* ret = wxDynamicCast(_ptrObj0, wxSizeEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSizeEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGauge")){
				object_init_ex(return_value, php_wxGauge_entry);
				wxGauge* ret = wxDynamicCast(_ptrObj0, wxGauge_php);
				long id_to_find = zend_list_insert(ret, le_wxGauge);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlWindow")){
				object_init_ex(return_value, php_wxHtmlWindow_entry);
				wxHtmlWindow* ret = wxDynamicCast(_ptrObj0, wxHtmlWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlContainerCell")){
				object_init_ex(return_value, php_wxHtmlContainerCell_entry);
				wxHtmlContainerCell* ret = wxDynamicCast(_ptrObj0, wxHtmlContainerCell_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlContainerCell);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlCell")){
				object_init_ex(return_value, php_wxHtmlCell_entry);
				wxHtmlCell* ret = wxDynamicCast(_ptrObj0, wxHtmlCell_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlCell);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlCellEvent")){
				object_init_ex(return_value, php_wxHtmlCellEvent_entry);
				wxHtmlCellEvent* ret = wxDynamicCast(_ptrObj0, wxHtmlCellEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlCellEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlColourCell")){
				object_init_ex(return_value, php_wxHtmlColourCell_entry);
				wxHtmlColourCell* ret = wxDynamicCast(_ptrObj0, wxHtmlColourCell_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlColourCell);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlEasyPrinting")){
				object_init_ex(return_value, php_wxHtmlEasyPrinting_entry);
				wxHtmlEasyPrinting* ret = wxDynamicCast(_ptrObj0, wxHtmlEasyPrinting_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlEasyPrinting);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlLinkEvent")){
				object_init_ex(return_value, php_wxHtmlLinkEvent_entry);
				wxHtmlLinkEvent* ret = wxDynamicCast(_ptrObj0, wxHtmlLinkEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlLinkEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlLinkInfo")){
				object_init_ex(return_value, php_wxHtmlLinkInfo_entry);
				wxHtmlLinkInfo* ret = wxDynamicCast(_ptrObj0, wxHtmlLinkInfo_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlLinkInfo);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMouseEvent")){
				object_init_ex(return_value, php_wxMouseEvent_entry);
				wxMouseEvent* ret = wxDynamicCast(_ptrObj0, wxMouseEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxMouseEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMoveEvent")){
				object_init_ex(return_value, php_wxMoveEvent_entry);
				wxMoveEvent* ret = wxDynamicCast(_ptrObj0, wxMoveEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxMoveEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMouseCaptureLostEvent")){
				object_init_ex(return_value, php_wxMouseCaptureLostEvent_entry);
				wxMouseCaptureLostEvent* ret = wxDynamicCast(_ptrObj0, wxMouseCaptureLostEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxMouseCaptureLostEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMouseCaptureChangedEvent")){
				object_init_ex(return_value, php_wxMouseCaptureChangedEvent_entry);
				wxMouseCaptureChangedEvent* ret = wxDynamicCast(_ptrObj0, wxMouseCaptureChangedEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxMouseCaptureChangedEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMouseEventsManager")){
				object_init_ex(return_value, php_wxMouseEventsManager_entry);
				wxMouseEventsManager* ret = wxDynamicCast(_ptrObj0, wxMouseEventsManager_php);
				long id_to_find = zend_list_insert(ret, le_wxMouseEventsManager);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMessageDialog")){
				object_init_ex(return_value, php_wxMessageDialog_entry);
				wxMessageDialog* ret = wxDynamicCast(_ptrObj0, wxMessageDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxMessageDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlListBox")){
				object_init_ex(return_value, php_wxHtmlListBox_entry);
				wxHtmlListBox* ret = wxDynamicCast(_ptrObj0, wxHtmlListBox_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlListBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxVListBox")){
				object_init_ex(return_value, php_wxVListBox_entry);
				wxVListBox* ret = wxDynamicCast(_ptrObj0, wxVListBox_php);
				long id_to_find = zend_list_insert(ret, le_wxVListBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxVScrolledWindow")){
				object_init_ex(return_value, php_wxVScrolledWindow_entry);
				wxVScrolledWindow* ret = wxDynamicCast(_ptrObj0, wxVScrolledWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxVScrolledWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHyperlinkCtrl")){
				object_init_ex(return_value, php_wxHyperlinkCtrl_entry);
				wxHyperlinkCtrl* ret = wxDynamicCast(_ptrObj0, wxHyperlinkCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxHyperlinkCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHyperlinkEvent")){
				object_init_ex(return_value, php_wxHyperlinkEvent_entry);
				wxHyperlinkEvent* ret = wxDynamicCast(_ptrObj0, wxHyperlinkEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxHyperlinkEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCursor")){
				object_init_ex(return_value, php_wxCursor_entry);
				wxCursor* ret = wxDynamicCast(_ptrObj0, wxCursor_php);
				long id_to_find = zend_list_insert(ret, le_wxCursor);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxToggleButton")){
				object_init_ex(return_value, php_wxToggleButton_entry);
				wxToggleButton* ret = wxDynamicCast(_ptrObj0, wxToggleButton_php);
				long id_to_find = zend_list_insert(ret, le_wxToggleButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTimer")){
				object_init_ex(return_value, php_wxTimer_entry);
				wxTimer* ret = wxDynamicCast(_ptrObj0, wxTimer_php);
				long id_to_find = zend_list_insert(ret, le_wxTimer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTimerEvent")){
				object_init_ex(return_value, php_wxTimerEvent_entry);
				wxTimerEvent* ret = wxDynamicCast(_ptrObj0, wxTimerEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxTimerEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxThreadEvent")){
				object_init_ex(return_value, php_wxThreadEvent_entry);
				wxThreadEvent* ret = wxDynamicCast(_ptrObj0, wxThreadEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxThreadEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSearchCtrl")){
				object_init_ex(return_value, php_wxSearchCtrl_entry);
				wxSearchCtrl* ret = wxDynamicCast(_ptrObj0, wxSearchCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxSearchCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxColourPickerEvent")){
				object_init_ex(return_value, php_wxColourPickerEvent_entry);
				wxColourPickerEvent* ret = wxDynamicCast(_ptrObj0, wxColourPickerEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxColourPickerEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxColourPickerCtrl")){
				object_init_ex(return_value, php_wxColourPickerCtrl_entry);
				wxColourPickerCtrl* ret = wxDynamicCast(_ptrObj0, wxColourPickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxColourPickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFontPickerCtrl")){
				object_init_ex(return_value, php_wxFontPickerCtrl_entry);
				wxFontPickerCtrl* ret = wxDynamicCast(_ptrObj0, wxFontPickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxFontPickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFontPickerEvent")){
				object_init_ex(return_value, php_wxFontPickerEvent_entry);
				wxFontPickerEvent* ret = wxDynamicCast(_ptrObj0, wxFontPickerEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxFontPickerEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFilePickerCtrl")){
				object_init_ex(return_value, php_wxFilePickerCtrl_entry);
				wxFilePickerCtrl* ret = wxDynamicCast(_ptrObj0, wxFilePickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxFilePickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFindReplaceDialog")){
				object_init_ex(return_value, php_wxFindReplaceDialog_entry);
				wxFindReplaceDialog* ret = wxDynamicCast(_ptrObj0, wxFindReplaceDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxFindReplaceDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFindReplaceData")){
				object_init_ex(return_value, php_wxFindReplaceData_entry);
				wxFindReplaceData* ret = wxDynamicCast(_ptrObj0, wxFindReplaceData_php);
				long id_to_find = zend_list_insert(ret, le_wxFindReplaceData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDirPickerCtrl")){
				object_init_ex(return_value, php_wxDirPickerCtrl_entry);
				wxDirPickerCtrl* ret = wxDynamicCast(_ptrObj0, wxDirPickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxDirPickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDirDialog")){
				object_init_ex(return_value, php_wxDirDialog_entry);
				wxDirDialog* ret = wxDynamicCast(_ptrObj0, wxDirDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxDirDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSpinDoubleEvent")){
				object_init_ex(return_value, php_wxSpinDoubleEvent_entry);
				wxSpinDoubleEvent* ret = wxDynamicCast(_ptrObj0, wxSpinDoubleEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSpinDoubleEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSpinCtrlDouble")){
				object_init_ex(return_value, php_wxSpinCtrlDouble_entry);
				wxSpinCtrlDouble* ret = wxDynamicCast(_ptrObj0, wxSpinCtrlDouble_php);
				long id_to_find = zend_list_insert(ret, le_wxSpinCtrlDouble);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGenericDirCtrl")){
				object_init_ex(return_value, php_wxGenericDirCtrl_entry);
				wxGenericDirCtrl* ret = wxDynamicCast(_ptrObj0, wxGenericDirCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxGenericDirCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridSizeEvent")){
				object_init_ex(return_value, php_wxGridSizeEvent_entry);
				wxGridSizeEvent* ret = wxDynamicCast(_ptrObj0, wxGridSizeEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxGridSizeEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridSizer")){
				object_init_ex(return_value, php_wxGridSizer_entry);
				wxGridSizer* ret = wxDynamicCast(_ptrObj0, wxGridSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxGridSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFlexGridSizer")){
				object_init_ex(return_value, php_wxFlexGridSizer_entry);
				wxFlexGridSizer* ret = wxDynamicCast(_ptrObj0, wxFlexGridSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxFlexGridSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridBagSizer")){
				object_init_ex(return_value, php_wxGridBagSizer_entry);
				wxGridBagSizer* ret = wxDynamicCast(_ptrObj0, wxGridBagSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxGridBagSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxStdDialogButtonSizer")){
				object_init_ex(return_value, php_wxStdDialogButtonSizer_entry);
				wxStdDialogButtonSizer* ret = wxDynamicCast(_ptrObj0, wxStdDialogButtonSizer_php);
				long id_to_find = zend_list_insert(ret, le_wxStdDialogButtonSizer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxScrollEvent")){
				object_init_ex(return_value, php_wxScrollEvent_entry);
				wxScrollEvent* ret = wxDynamicCast(_ptrObj0, wxScrollEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxScrollEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxScrollWinEvent")){
				object_init_ex(return_value, php_wxScrollWinEvent_entry);
				wxScrollWinEvent* ret = wxDynamicCast(_ptrObj0, wxScrollWinEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxScrollWinEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxNotebook")){
				object_init_ex(return_value, php_wxNotebook_entry);
				wxNotebook* ret = wxDynamicCast(_ptrObj0, wxNotebook_php);
				long id_to_find = zend_list_insert(ret, le_wxNotebook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDialog")){
				object_init_ex(return_value, php_wxDialog_entry);
				wxDialog* ret = wxDynamicCast(_ptrObj0, wxDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSysColourChangedEvent")){
				object_init_ex(return_value, php_wxSysColourChangedEvent_entry);
				wxSysColourChangedEvent* ret = wxDynamicCast(_ptrObj0, wxSysColourChangedEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSysColourChangedEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSymbolPickerDialog")){
				object_init_ex(return_value, php_wxSymbolPickerDialog_entry);
				wxSymbolPickerDialog* ret = wxDynamicCast(_ptrObj0, wxSymbolPickerDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxSymbolPickerDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGBSizerItem")){
				object_init_ex(return_value, php_wxGBSizerItem_entry);
				wxGBSizerItem* ret = wxDynamicCast(_ptrObj0, wxGBSizerItem_php);
				long id_to_find = zend_list_insert(ret, le_wxGBSizerItem);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPopupWindow")){
				object_init_ex(return_value, php_wxPopupWindow_entry);
				wxPopupWindow* ret = wxDynamicCast(_ptrObj0, wxPopupWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxPopupWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMDIChildFrame")){
				object_init_ex(return_value, php_wxMDIChildFrame_entry);
				wxMDIChildFrame* ret = wxDynamicCast(_ptrObj0, wxMDIChildFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxMDIChildFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMDIClientWindow")){
				object_init_ex(return_value, php_wxMDIClientWindow_entry);
				wxMDIClientWindow* ret = wxDynamicCast(_ptrObj0, wxMDIClientWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxMDIClientWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMDIParentFrame")){
				object_init_ex(return_value, php_wxMDIParentFrame_entry);
				wxMDIParentFrame* ret = wxDynamicCast(_ptrObj0, wxMDIParentFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxMDIParentFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMiniFrame")){
				object_init_ex(return_value, php_wxMiniFrame_entry);
				wxMiniFrame* ret = wxDynamicCast(_ptrObj0, wxMiniFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxMiniFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPropertySheetDialog")){
				object_init_ex(return_value, php_wxPropertySheetDialog_entry);
				wxPropertySheetDialog* ret = wxDynamicCast(_ptrObj0, wxPropertySheetDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxPropertySheetDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWizard")){
				object_init_ex(return_value, php_wxWizard_entry);
				wxWizard* ret = wxDynamicCast(_ptrObj0, wxWizard_php);
				long id_to_find = zend_list_insert(ret, le_wxWizard);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWizardEvent")){
				object_init_ex(return_value, php_wxWizardEvent_entry);
				wxWizardEvent* ret = wxDynamicCast(_ptrObj0, wxWizardEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxWizardEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWizardPage")){
				object_init_ex(return_value, php_wxWizardPage_entry);
				wxWizardPage* ret = wxDynamicCast(_ptrObj0, wxWizardPage_php);
				long id_to_find = zend_list_insert(ret, le_wxWizardPage);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWizardPageSimple")){
				object_init_ex(return_value, php_wxWizardPageSimple_entry);
				wxWizardPageSimple* ret = wxDynamicCast(_ptrObj0, wxWizardPageSimple_php);
				long id_to_find = zend_list_insert(ret, le_wxWizardPageSimple);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWindowModalDialogEvent")){
				object_init_ex(return_value, php_wxWindowModalDialogEvent_entry);
				wxWindowModalDialogEvent* ret = wxDynamicCast(_ptrObj0, wxWindowModalDialogEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxWindowModalDialogEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTreebook")){
				object_init_ex(return_value, php_wxTreebook_entry);
				wxTreebook* ret = wxDynamicCast(_ptrObj0, wxTreebook_php);
				long id_to_find = zend_list_insert(ret, le_wxTreebook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTreeListCtrl")){
				object_init_ex(return_value, php_wxTreeListCtrl_entry);
				wxTreeListCtrl* ret = wxDynamicCast(_ptrObj0, wxTreeListCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxTreeListCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSound")){
				object_init_ex(return_value, php_wxSound_entry);
				wxSound* ret = wxDynamicCast(_ptrObj0, wxSound_php);
				long id_to_find = zend_list_insert(ret, le_wxSound);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSimpleHtmlListBox")){
				object_init_ex(return_value, php_wxSimpleHtmlListBox_entry);
				wxSimpleHtmlListBox* ret = wxDynamicCast(_ptrObj0, wxSimpleHtmlListBox_php);
				long id_to_find = zend_list_insert(ret, le_wxSimpleHtmlListBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileSystem")){
				object_init_ex(return_value, php_wxFileSystem_entry);
				wxFileSystem* ret = wxDynamicCast(_ptrObj0, wxFileSystem_php);
				long id_to_find = zend_list_insert(ret, le_wxFileSystem);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileSystemHandler")){
				object_init_ex(return_value, php_wxFileSystemHandler_entry);
				wxFileSystemHandler* ret = wxDynamicCast(_ptrObj0, wxFileSystemHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxFileSystemHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDateEvent")){
				object_init_ex(return_value, php_wxDateEvent_entry);
				wxDateEvent* ret = wxDynamicCast(_ptrObj0, wxDateEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxDateEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBitmapToggleButton")){
				object_init_ex(return_value, php_wxBitmapToggleButton_entry);
				wxBitmapToggleButton* ret = wxDynamicCast(_ptrObj0, wxBitmapToggleButton_php);
				long id_to_find = zend_list_insert(ret, le_wxBitmapToggleButton);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCalendarCtrl")){
				object_init_ex(return_value, php_wxCalendarCtrl_entry);
				wxCalendarCtrl* ret = wxDynamicCast(_ptrObj0, wxCalendarCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxCalendarCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMask")){
				object_init_ex(return_value, php_wxMask_entry);
				wxMask* ret = wxDynamicCast(_ptrObj0, wxMask_php);
				long id_to_find = zend_list_insert(ret, le_wxMask);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxToolTip")){
				object_init_ex(return_value, php_wxToolTip_entry);
				wxToolTip* ret = wxDynamicCast(_ptrObj0, wxToolTip_php);
				long id_to_find = zend_list_insert(ret, le_wxToolTip);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRegion")){
				object_init_ex(return_value, php_wxRegion_entry);
				wxRegion* ret = wxDynamicCast(_ptrObj0, wxRegion_php);
				long id_to_find = zend_list_insert(ret, le_wxRegion);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPopupTransientWindow")){
				object_init_ex(return_value, php_wxPopupTransientWindow_entry);
				wxPopupTransientWindow* ret = wxDynamicCast(_ptrObj0, wxPopupTransientWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxPopupTransientWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxProcessEvent")){
				object_init_ex(return_value, php_wxProcessEvent_entry);
				wxProcessEvent* ret = wxDynamicCast(_ptrObj0, wxProcessEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxProcessEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxProgressDialog")){
				object_init_ex(return_value, php_wxProgressDialog_entry);
				wxProgressDialog* ret = wxDynamicCast(_ptrObj0, wxProgressDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxProgressDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGraphicsRenderer")){
				object_init_ex(return_value, php_wxGraphicsRenderer_entry);
				wxGraphicsRenderer* ret = wxDynamicCast(_ptrObj0, wxGraphicsRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxGraphicsRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWindowDC")){
				object_init_ex(return_value, php_wxWindowDC_entry);
				wxWindowDC* ret = wxDynamicCast(_ptrObj0, wxWindowDC_php);
				long id_to_find = zend_list_insert(ret, le_wxWindowDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWindowCreateEvent")){
				object_init_ex(return_value, php_wxWindowCreateEvent_entry);
				wxWindowCreateEvent* ret = wxDynamicCast(_ptrObj0, wxWindowCreateEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxWindowCreateEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxWindowDestroyEvent")){
				object_init_ex(return_value, php_wxWindowDestroyEvent_entry);
				wxWindowDestroyEvent* ret = wxDynamicCast(_ptrObj0, wxWindowDestroyEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxWindowDestroyEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxEventBlocker")){
				object_init_ex(return_value, php_wxEventBlocker_entry);
				wxEventBlocker* ret = wxDynamicCast(_ptrObj0, wxEventBlocker_php);
				long id_to_find = zend_list_insert(ret, le_wxEventBlocker);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxEraseEvent")){
				object_init_ex(return_value, php_wxEraseEvent_entry);
				wxEraseEvent* ret = wxDynamicCast(_ptrObj0, wxEraseEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxEraseEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPickerBase")){
				object_init_ex(return_value, php_wxPickerBase_entry);
				wxPickerBase* ret = wxDynamicCast(_ptrObj0, wxPickerBase_php);
				long id_to_find = zend_list_insert(ret, le_wxPickerBase);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridEvent")){
				object_init_ex(return_value, php_wxGridEvent_entry);
				wxGridEvent* ret = wxDynamicCast(_ptrObj0, wxGridEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxGridEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxUpdateUIEvent")){
				object_init_ex(return_value, php_wxUpdateUIEvent_entry);
				wxUpdateUIEvent* ret = wxDynamicCast(_ptrObj0, wxUpdateUIEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxUpdateUIEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHelpEvent")){
				object_init_ex(return_value, php_wxHelpEvent_entry);
				wxHelpEvent* ret = wxDynamicCast(_ptrObj0, wxHelpEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxHelpEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxLayoutConstraints")){
				object_init_ex(return_value, php_wxLayoutConstraints_entry);
				wxLayoutConstraints* ret = wxDynamicCast(_ptrObj0, wxLayoutConstraints_php);
				long id_to_find = zend_list_insert(ret, le_wxLayoutConstraints);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFSFile")){
				object_init_ex(return_value, php_wxFSFile_entry);
				wxFSFile* ret = wxDynamicCast(_ptrObj0, wxFSFile_php);
				long id_to_find = zend_list_insert(ret, le_wxFSFile);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTimePickerCtrl")){
				object_init_ex(return_value, php_wxTimePickerCtrl_entry);
				wxTimePickerCtrl* ret = wxDynamicCast(_ptrObj0, wxTimePickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxTimePickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxColourDialog")){
				object_init_ex(return_value, php_wxColourDialog_entry);
				wxColourDialog* ret = wxDynamicCast(_ptrObj0, wxColourDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxColourDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxColourData")){
				object_init_ex(return_value, php_wxColourData_entry);
				wxColourData* ret = wxDynamicCast(_ptrObj0, wxColourData_php);
				long id_to_find = zend_list_insert(ret, le_wxColourData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileDialog")){
				object_init_ex(return_value, php_wxFileDialog_entry);
				wxFileDialog* ret = wxDynamicCast(_ptrObj0, wxFileDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxFileDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFontData")){
				object_init_ex(return_value, php_wxFontData_entry);
				wxFontData* ret = wxDynamicCast(_ptrObj0, wxFontData_php);
				long id_to_find = zend_list_insert(ret, le_wxFontData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFontDialog")){
				object_init_ex(return_value, php_wxFontDialog_entry);
				wxFontDialog* ret = wxDynamicCast(_ptrObj0, wxFontDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxFontDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxToolBar")){
				object_init_ex(return_value, php_wxToolBar_entry);
				wxToolBar* ret = wxDynamicCast(_ptrObj0, wxToolBar_php);
				long id_to_find = zend_list_insert(ret, le_wxToolBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxToolBarToolBase")){
				object_init_ex(return_value, php_wxToolBarToolBase_entry);
				wxToolBarToolBase* ret = wxDynamicCast(_ptrObj0, wxToolBarToolBase_php);
				long id_to_find = zend_list_insert(ret, le_wxToolBarToolBase);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCalendarEvent")){
				object_init_ex(return_value, php_wxCalendarEvent_entry);
				wxCalendarEvent* ret = wxDynamicCast(_ptrObj0, wxCalendarEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxCalendarEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGrid")){
				object_init_ex(return_value, php_wxGrid_entry);
				wxGrid* ret = wxDynamicCast(_ptrObj0, wxGrid_php);
				long id_to_find = zend_list_insert(ret, le_wxGrid);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridEditorCreatedEvent")){
				object_init_ex(return_value, php_wxGridEditorCreatedEvent_entry);
				wxGridEditorCreatedEvent* ret = wxDynamicCast(_ptrObj0, wxGridEditorCreatedEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxGridEditorCreatedEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridRangeSelectEvent")){
				object_init_ex(return_value, php_wxGridRangeSelectEvent_entry);
				wxGridRangeSelectEvent* ret = wxDynamicCast(_ptrObj0, wxGridRangeSelectEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxGridRangeSelectEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGridTableBase")){
				object_init_ex(return_value, php_wxGridTableBase_entry);
				wxGridTableBase* ret = wxDynamicCast(_ptrObj0, wxGridTableBase_php);
				long id_to_find = zend_list_insert(ret, le_wxGridTableBase);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxScrolledWindow")){
				object_init_ex(return_value, php_wxScrolledWindow_entry);
				wxScrolledWindow* ret = wxDynamicCast(_ptrObj0, wxScrolledWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxScrolledWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDatePickerCtrl")){
				object_init_ex(return_value, php_wxDatePickerCtrl_entry);
				wxDatePickerCtrl* ret = wxDynamicCast(_ptrObj0, wxDatePickerCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxDatePickerCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPasswordEntryDialog")){
				object_init_ex(return_value, php_wxPasswordEntryDialog_entry);
				wxPasswordEntryDialog* ret = wxDynamicCast(_ptrObj0, wxPasswordEntryDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxPasswordEntryDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxScreenDC")){
				object_init_ex(return_value, php_wxScreenDC_entry);
				wxScreenDC* ret = wxDynamicCast(_ptrObj0, wxScreenDC_php);
				long id_to_find = zend_list_insert(ret, le_wxScreenDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCollapsiblePane")){
				object_init_ex(return_value, php_wxCollapsiblePane_entry);
				wxCollapsiblePane* ret = wxDynamicCast(_ptrObj0, wxCollapsiblePane_php);
				long id_to_find = zend_list_insert(ret, le_wxCollapsiblePane);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCollapsiblePaneEvent")){
				object_init_ex(return_value, php_wxCollapsiblePaneEvent_entry);
				wxCollapsiblePaneEvent* ret = wxDynamicCast(_ptrObj0, wxCollapsiblePaneEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxCollapsiblePaneEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxComboCtrl")){
				object_init_ex(return_value, php_wxComboCtrl_entry);
				wxComboCtrl* ret = wxDynamicCast(_ptrObj0, wxComboCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxComboCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewCtrl")){
				object_init_ex(return_value, php_wxDataViewCtrl_entry);
				wxDataViewCtrl* ret = wxDynamicCast(_ptrObj0, wxDataViewCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewRenderer")){
				object_init_ex(return_value, php_wxDataViewRenderer_entry);
				wxDataViewRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewListCtrl")){
				object_init_ex(return_value, php_wxDataViewListCtrl_entry);
				wxDataViewListCtrl* ret = wxDynamicCast(_ptrObj0, wxDataViewListCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewListCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewEvent")){
				object_init_ex(return_value, php_wxDataViewEvent_entry);
				wxDataViewEvent* ret = wxDynamicCast(_ptrObj0, wxDataViewEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewBitmapRenderer")){
				object_init_ex(return_value, php_wxDataViewBitmapRenderer_entry);
				wxDataViewBitmapRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewBitmapRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewBitmapRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewChoiceRenderer")){
				object_init_ex(return_value, php_wxDataViewChoiceRenderer_entry);
				wxDataViewChoiceRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewChoiceRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewChoiceRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewCustomRenderer")){
				object_init_ex(return_value, php_wxDataViewCustomRenderer_entry);
				wxDataViewCustomRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewCustomRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewCustomRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewDateRenderer")){
				object_init_ex(return_value, php_wxDataViewDateRenderer_entry);
				wxDataViewDateRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewDateRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewDateRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewIconText")){
				object_init_ex(return_value, php_wxDataViewIconText_entry);
				wxDataViewIconText* ret = wxDynamicCast(_ptrObj0, wxDataViewIconText_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewIconText);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewIconTextRenderer")){
				object_init_ex(return_value, php_wxDataViewIconTextRenderer_entry);
				wxDataViewIconTextRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewIconTextRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewIconTextRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewProgressRenderer")){
				object_init_ex(return_value, php_wxDataViewProgressRenderer_entry);
				wxDataViewProgressRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewProgressRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewProgressRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewSpinRenderer")){
				object_init_ex(return_value, php_wxDataViewSpinRenderer_entry);
				wxDataViewSpinRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewSpinRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewSpinRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewTextRenderer")){
				object_init_ex(return_value, php_wxDataViewTextRenderer_entry);
				wxDataViewTextRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewTextRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewTextRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewToggleRenderer")){
				object_init_ex(return_value, php_wxDataViewToggleRenderer_entry);
				wxDataViewToggleRenderer* ret = wxDynamicCast(_ptrObj0, wxDataViewToggleRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewToggleRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDataViewTreeCtrl")){
				object_init_ex(return_value, php_wxDataViewTreeCtrl_entry);
				wxDataViewTreeCtrl* ret = wxDynamicCast(_ptrObj0, wxDataViewTreeCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxDataViewTreeCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxVariant")){
				object_init_ex(return_value, php_wxVariant_entry);
				wxVariant* ret = wxDynamicCast(_ptrObj0, wxVariant_php);
				long id_to_find = zend_list_insert(ret, le_wxVariant);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxClipboard")){
				object_init_ex(return_value, php_wxClipboard_entry);
				wxClipboard* ret = wxDynamicCast(_ptrObj0, wxClipboard_php);
				long id_to_find = zend_list_insert(ret, le_wxClipboard);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxClipboardTextEvent")){
				object_init_ex(return_value, php_wxClipboardTextEvent_entry);
				wxClipboardTextEvent* ret = wxDynamicCast(_ptrObj0, wxClipboardTextEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxClipboardTextEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxListView")){
				object_init_ex(return_value, php_wxListView_entry);
				wxListView* ret = wxDynamicCast(_ptrObj0, wxListView_php);
				long id_to_find = zend_list_insert(ret, le_wxListView);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxConfigBase")){
				object_init_ex(return_value, php_wxConfigBase_entry);
				wxConfigBase* ret = wxDynamicCast(_ptrObj0, wxConfigBase_php);
				long id_to_find = zend_list_insert(ret, le_wxConfigBase);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHeaderCtrlEvent")){
				object_init_ex(return_value, php_wxHeaderCtrlEvent_entry);
				wxHeaderCtrlEvent* ret = wxDynamicCast(_ptrObj0, wxHeaderCtrlEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxHeaderCtrlEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHeaderCtrl")){
				object_init_ex(return_value, php_wxHeaderCtrl_entry);
				wxHeaderCtrl* ret = wxDynamicCast(_ptrObj0, wxHeaderCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxHeaderCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHeaderCtrlSimple")){
				object_init_ex(return_value, php_wxHeaderCtrlSimple_entry);
				wxHeaderCtrlSimple* ret = wxDynamicCast(_ptrObj0, wxHeaderCtrlSimple_php);
				long id_to_find = zend_list_insert(ret, le_wxHeaderCtrlSimple);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSetCursorEvent")){
				object_init_ex(return_value, php_wxSetCursorEvent_entry);
				wxSetCursorEvent* ret = wxDynamicCast(_ptrObj0, wxSetCursorEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSetCursorEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxIconizeEvent")){
				object_init_ex(return_value, php_wxIconizeEvent_entry);
				wxIconizeEvent* ret = wxDynamicCast(_ptrObj0, wxIconizeEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxIconizeEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxIdleEvent")){
				object_init_ex(return_value, php_wxIdleEvent_entry);
				wxIdleEvent* ret = wxDynamicCast(_ptrObj0, wxIdleEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxIdleEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPen")){
				object_init_ex(return_value, php_wxPen_entry);
				wxPen* ret = wxDynamicCast(_ptrObj0, wxPen_php);
				long id_to_find = zend_list_insert(ret, le_wxPen);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxEditableListBox")){
				object_init_ex(return_value, php_wxEditableListBox_entry);
				wxEditableListBox* ret = wxDynamicCast(_ptrObj0, wxEditableListBox_php);
				long id_to_find = zend_list_insert(ret, le_wxEditableListBox);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileCtrlEvent")){
				object_init_ex(return_value, php_wxFileCtrlEvent_entry);
				wxFileCtrlEvent* ret = wxDynamicCast(_ptrObj0, wxFileCtrlEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxFileCtrlEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileCtrl")){
				object_init_ex(return_value, php_wxFileCtrl_entry);
				wxFileCtrl* ret = wxDynamicCast(_ptrObj0, wxFileCtrl_php);
				long id_to_find = zend_list_insert(ret, le_wxFileCtrl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxProcess")){
				object_init_ex(return_value, php_wxProcess_entry);
				wxProcess* ret = wxDynamicCast(_ptrObj0, wxProcess_php);
				long id_to_find = zend_list_insert(ret, le_wxProcess);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTextValidator")){
				object_init_ex(return_value, php_wxTextValidator_entry);
				wxTextValidator* ret = wxDynamicCast(_ptrObj0, wxTextValidator_php);
				long id_to_find = zend_list_insert(ret, le_wxTextValidator);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHScrolledWindow")){
				object_init_ex(return_value, php_wxHScrolledWindow_entry);
				wxHScrolledWindow* ret = wxDynamicCast(_ptrObj0, wxHScrolledWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxHScrolledWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxInfoBar")){
				object_init_ex(return_value, php_wxInfoBar_entry);
				wxInfoBar* ret = wxDynamicCast(_ptrObj0, wxInfoBar_php);
				long id_to_find = zend_list_insert(ret, le_wxInfoBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxXmlResource")){
				object_init_ex(return_value, php_wxXmlResource_entry);
				wxXmlResource* ret = wxDynamicCast(_ptrObj0, wxXmlResource_php);
				long id_to_find = zend_list_insert(ret, le_wxXmlResource);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxGenericValidator")){
				object_init_ex(return_value, php_wxGenericValidator_entry);
				wxGenericValidator* ret = wxDynamicCast(_ptrObj0, wxGenericValidator_php);
				long id_to_find = zend_list_insert(ret, le_wxGenericValidator);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSashWindow")){
				object_init_ex(return_value, php_wxSashWindow_entry);
				wxSashWindow* ret = wxDynamicCast(_ptrObj0, wxSashWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxSashWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSashEvent")){
				object_init_ex(return_value, php_wxSashEvent_entry);
				wxSashEvent* ret = wxDynamicCast(_ptrObj0, wxSashEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxSashEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSashLayoutWindow")){
				object_init_ex(return_value, php_wxSashLayoutWindow_entry);
				wxSashLayoutWindow* ret = wxDynamicCast(_ptrObj0, wxSashLayoutWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxSashLayoutWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxShowEvent")){
				object_init_ex(return_value, php_wxShowEvent_entry);
				wxShowEvent* ret = wxDynamicCast(_ptrObj0, wxShowEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxShowEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBrush")){
				object_init_ex(return_value, php_wxBrush_entry);
				wxBrush* ret = wxDynamicCast(_ptrObj0, wxBrush_php);
				long id_to_find = zend_list_insert(ret, le_wxBrush);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPageSetupDialog")){
				object_init_ex(return_value, php_wxPageSetupDialog_entry);
				wxPageSetupDialog* ret = wxDynamicCast(_ptrObj0, wxPageSetupDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxPageSetupDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPageSetupDialogData")){
				object_init_ex(return_value, php_wxPageSetupDialogData_entry);
				wxPageSetupDialogData* ret = wxDynamicCast(_ptrObj0, wxPageSetupDialogData_php);
				long id_to_find = zend_list_insert(ret, le_wxPageSetupDialogData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrintDialog")){
				object_init_ex(return_value, php_wxPrintDialog_entry);
				wxPrintDialog* ret = wxDynamicCast(_ptrObj0, wxPrintDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxPrintDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrintDialogData")){
				object_init_ex(return_value, php_wxPrintDialogData_entry);
				wxPrintDialogData* ret = wxDynamicCast(_ptrObj0, wxPrintDialogData_php);
				long id_to_find = zend_list_insert(ret, le_wxPrintDialogData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrintData")){
				object_init_ex(return_value, php_wxPrintData_entry);
				wxPrintData* ret = wxDynamicCast(_ptrObj0, wxPrintData_php);
				long id_to_find = zend_list_insert(ret, le_wxPrintData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPostScriptDC")){
				object_init_ex(return_value, php_wxPostScriptDC_entry);
				wxPostScriptDC* ret = wxDynamicCast(_ptrObj0, wxPostScriptDC_php);
				long id_to_find = zend_list_insert(ret, le_wxPostScriptDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrintPreview")){
				object_init_ex(return_value, php_wxPrintPreview_entry);
				wxPrintPreview* ret = wxDynamicCast(_ptrObj0, wxPrintPreview_php);
				long id_to_find = zend_list_insert(ret, le_wxPrintPreview);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrinter")){
				object_init_ex(return_value, php_wxPrinter_entry);
				wxPrinter* ret = wxDynamicCast(_ptrObj0, wxPrinter_php);
				long id_to_find = zend_list_insert(ret, le_wxPrinter);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrinterDC")){
				object_init_ex(return_value, php_wxPrinterDC_entry);
				wxPrinterDC* ret = wxDynamicCast(_ptrObj0, wxPrinterDC_php);
				long id_to_find = zend_list_insert(ret, le_wxPrinterDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPrintout")){
				object_init_ex(return_value, php_wxPrintout_entry);
				wxPrintout* ret = wxDynamicCast(_ptrObj0, wxPrintout_php);
				long id_to_find = zend_list_insert(ret, le_wxPrintout);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPreviewFrame")){
				object_init_ex(return_value, php_wxPreviewFrame_entry);
				wxPreviewFrame* ret = wxDynamicCast(_ptrObj0, wxPreviewFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxPreviewFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPreviewControlBar")){
				object_init_ex(return_value, php_wxPreviewControlBar_entry);
				wxPreviewControlBar* ret = wxDynamicCast(_ptrObj0, wxPreviewControlBar_php);
				long id_to_find = zend_list_insert(ret, le_wxPreviewControlBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPreviewCanvas")){
				object_init_ex(return_value, php_wxPreviewCanvas_entry);
				wxPreviewCanvas* ret = wxDynamicCast(_ptrObj0, wxPreviewCanvas_php);
				long id_to_find = zend_list_insert(ret, le_wxPreviewCanvas);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxSingleChoiceDialog")){
				object_init_ex(return_value, php_wxSingleChoiceDialog_entry);
				wxSingleChoiceDialog* ret = wxDynamicCast(_ptrObj0, wxSingleChoiceDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxSingleChoiceDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlDCRenderer")){
				object_init_ex(return_value, php_wxHtmlDCRenderer_entry);
				wxHtmlDCRenderer* ret = wxDynamicCast(_ptrObj0, wxHtmlDCRenderer_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlDCRenderer);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlFilter")){
				object_init_ex(return_value, php_wxHtmlFilter_entry);
				wxHtmlFilter* ret = wxDynamicCast(_ptrObj0, wxHtmlFilter_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlFilter);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlHelpData")){
				object_init_ex(return_value, php_wxHtmlHelpData_entry);
				wxHtmlHelpData* ret = wxDynamicCast(_ptrObj0, wxHtmlHelpData_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlHelpData);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlHelpDialog")){
				object_init_ex(return_value, php_wxHtmlHelpDialog_entry);
				wxHtmlHelpDialog* ret = wxDynamicCast(_ptrObj0, wxHtmlHelpDialog_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlHelpDialog);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlHelpFrame")){
				object_init_ex(return_value, php_wxHtmlHelpFrame_entry);
				wxHtmlHelpFrame* ret = wxDynamicCast(_ptrObj0, wxHtmlHelpFrame_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlHelpFrame);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlHelpWindow")){
				object_init_ex(return_value, php_wxHtmlHelpWindow_entry);
				wxHtmlHelpWindow* ret = wxDynamicCast(_ptrObj0, wxHtmlHelpWindow_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlHelpWindow);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlPrintout")){
				object_init_ex(return_value, php_wxHtmlPrintout_entry);
				wxHtmlPrintout* ret = wxDynamicCast(_ptrObj0, wxHtmlPrintout_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlPrintout);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlTagHandler")){
				object_init_ex(return_value, php_wxHtmlTagHandler_entry);
				wxHtmlTagHandler* ret = wxDynamicCast(_ptrObj0, wxHtmlTagHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlTagHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlTagsModule")){
				object_init_ex(return_value, php_wxHtmlTagsModule_entry);
				wxHtmlTagsModule* ret = wxDynamicCast(_ptrObj0, wxHtmlTagsModule_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlTagsModule);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxModule")){
				object_init_ex(return_value, php_wxModule_entry);
				wxModule* ret = wxDynamicCast(_ptrObj0, wxModule_php);
				long id_to_find = zend_list_insert(ret, le_wxModule);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlWidgetCell")){
				object_init_ex(return_value, php_wxHtmlWidgetCell_entry);
				wxHtmlWidgetCell* ret = wxDynamicCast(_ptrObj0, wxHtmlWidgetCell_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlWidgetCell);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxHtmlWinTagHandler")){
				object_init_ex(return_value, php_wxHtmlWinTagHandler_entry);
				wxHtmlWinTagHandler* ret = wxDynamicCast(_ptrObj0, wxHtmlWinTagHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxHtmlWinTagHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxAutoBufferedPaintDC")){
				object_init_ex(return_value, php_wxAutoBufferedPaintDC_entry);
				wxAutoBufferedPaintDC* ret = wxDynamicCast(_ptrObj0, wxAutoBufferedPaintDC_php);
				long id_to_find = zend_list_insert(ret, le_wxAutoBufferedPaintDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBufferedDC")){
				object_init_ex(return_value, php_wxBufferedDC_entry);
				wxBufferedDC* ret = wxDynamicCast(_ptrObj0, wxBufferedDC_php);
				long id_to_find = zend_list_insert(ret, le_wxBufferedDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxBufferedPaintDC")){
				object_init_ex(return_value, php_wxBufferedPaintDC_entry);
				wxBufferedPaintDC* ret = wxDynamicCast(_ptrObj0, wxBufferedPaintDC_php);
				long id_to_find = zend_list_insert(ret, le_wxBufferedPaintDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxClientDC")){
				object_init_ex(return_value, php_wxClientDC_entry);
				wxClientDC* ret = wxDynamicCast(_ptrObj0, wxClientDC_php);
				long id_to_find = zend_list_insert(ret, le_wxClientDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPaintEvent")){
				object_init_ex(return_value, php_wxPaintEvent_entry);
				wxPaintEvent* ret = wxDynamicCast(_ptrObj0, wxPaintEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxPaintEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPaintDC")){
				object_init_ex(return_value, php_wxPaintDC_entry);
				wxPaintDC* ret = wxDynamicCast(_ptrObj0, wxPaintDC_php);
				long id_to_find = zend_list_insert(ret, le_wxPaintDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMemoryDC")){
				object_init_ex(return_value, php_wxMemoryDC_entry);
				wxMemoryDC* ret = wxDynamicCast(_ptrObj0, wxMemoryDC_php);
				long id_to_find = zend_list_insert(ret, le_wxMemoryDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMirrorDC")){
				object_init_ex(return_value, php_wxMirrorDC_entry);
				wxMirrorDC* ret = wxDynamicCast(_ptrObj0, wxMirrorDC_php);
				long id_to_find = zend_list_insert(ret, le_wxMirrorDC);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxPaletteChangedEvent")){
				object_init_ex(return_value, php_wxPaletteChangedEvent_entry);
				wxPaletteChangedEvent* ret = wxDynamicCast(_ptrObj0, wxPaletteChangedEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxPaletteChangedEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxImageHandler")){
				object_init_ex(return_value, php_wxImageHandler_entry);
				wxImageHandler* ret = wxDynamicCast(_ptrObj0, wxImageHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxImageHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxInitDialogEvent")){
				object_init_ex(return_value, php_wxInitDialogEvent_entry);
				wxInitDialogEvent* ret = wxDynamicCast(_ptrObj0, wxInitDialogEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxInitDialogEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxMaximizeEvent")){
				object_init_ex(return_value, php_wxMaximizeEvent_entry);
				wxMaximizeEvent* ret = wxDynamicCast(_ptrObj0, wxMaximizeEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxMaximizeEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxNavigationKeyEvent")){
				object_init_ex(return_value, php_wxNavigationKeyEvent_entry);
				wxNavigationKeyEvent* ret = wxDynamicCast(_ptrObj0, wxNavigationKeyEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxNavigationKeyEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxXmlResourceHandler")){
				object_init_ex(return_value, php_wxXmlResourceHandler_entry);
				wxXmlResourceHandler* ret = wxDynamicCast(_ptrObj0, wxXmlResourceHandler_php);
				long id_to_find = zend_list_insert(ret, le_wxXmlResourceHandler);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxXmlDocument")){
				object_init_ex(return_value, php_wxXmlDocument_entry);
				wxXmlDocument* ret = wxDynamicCast(_ptrObj0, wxXmlDocument_php);
				long id_to_find = zend_list_insert(ret, le_wxXmlDocument);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxLayoutAlgorithm")){
				object_init_ex(return_value, php_wxLayoutAlgorithm_entry);
				wxLayoutAlgorithm* ret = wxDynamicCast(_ptrObj0, wxLayoutAlgorithm_php);
				long id_to_find = zend_list_insert(ret, le_wxLayoutAlgorithm);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxJoystick")){
				object_init_ex(return_value, php_wxJoystick_entry);
				wxJoystick* ret = wxDynamicCast(_ptrObj0, wxJoystick_php);
				long id_to_find = zend_list_insert(ret, le_wxJoystick);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFocusEvent")){
				object_init_ex(return_value, php_wxFocusEvent_entry);
				wxFocusEvent* ret = wxDynamicCast(_ptrObj0, wxFocusEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxFocusEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileConfig")){
				object_init_ex(return_value, php_wxFileConfig_entry);
				wxFileConfig* ret = wxDynamicCast(_ptrObj0, wxFileConfig_php);
				long id_to_find = zend_list_insert(ret, le_wxFileConfig);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileDirPickerEvent")){
				object_init_ex(return_value, php_wxFileDirPickerEvent_entry);
				wxFileDirPickerEvent* ret = wxDynamicCast(_ptrObj0, wxFileDirPickerEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxFileDirPickerEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileHistory")){
				object_init_ex(return_value, php_wxFileHistory_entry);
				wxFileHistory* ret = wxDynamicCast(_ptrObj0, wxFileHistory_php);
				long id_to_find = zend_list_insert(ret, le_wxFileHistory);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileSystemWatcher")){
				object_init_ex(return_value, php_wxFileSystemWatcher_entry);
				wxFileSystemWatcher* ret = wxDynamicCast(_ptrObj0, wxFileSystemWatcher_php);
				long id_to_find = zend_list_insert(ret, le_wxFileSystemWatcher);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxFileSystemWatcherEvent")){
				object_init_ex(return_value, php_wxFileSystemWatcherEvent_entry);
				wxFileSystemWatcherEvent* ret = wxDynamicCast(_ptrObj0, wxFileSystemWatcherEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxFileSystemWatcherEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDisplayChangedEvent")){
				object_init_ex(return_value, php_wxDisplayChangedEvent_entry);
				wxDisplayChangedEvent* ret = wxDynamicCast(_ptrObj0, wxDisplayChangedEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxDisplayChangedEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxCalculateLayoutEvent")){
				object_init_ex(return_value, php_wxCalculateLayoutEvent_entry);
				wxCalculateLayoutEvent* ret = wxDynamicCast(_ptrObj0, wxCalculateLayoutEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxCalculateLayoutEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxContextMenuEvent")){
				object_init_ex(return_value, php_wxContextMenuEvent_entry);
				wxContextMenuEvent* ret = wxDynamicCast(_ptrObj0, wxContextMenuEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxContextMenuEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxDropFilesEvent")){
				object_init_ex(return_value, php_wxDropFilesEvent_entry);
				wxDropFilesEvent* ret = wxDynamicCast(_ptrObj0, wxDropFilesEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxDropFilesEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxQueryLayoutInfoEvent")){
				object_init_ex(return_value, php_wxQueryLayoutInfoEvent_entry);
				wxQueryLayoutInfoEvent* ret = wxDynamicCast(_ptrObj0, wxQueryLayoutInfoEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxQueryLayoutInfoEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxToolbook")){
				object_init_ex(return_value, php_wxToolbook_entry);
				wxToolbook* ret = wxDynamicCast(_ptrObj0, wxToolbook_php);
				long id_to_find = zend_list_insert(ret, le_wxToolbook);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonControl")){
				object_init_ex(return_value, php_wxRibbonControl_entry);
				wxRibbonControl* ret = wxDynamicCast(_ptrObj0, wxRibbonControl_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonControl);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonBar")){
				object_init_ex(return_value, php_wxRibbonBar_entry);
				wxRibbonBar* ret = wxDynamicCast(_ptrObj0, wxRibbonBar_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonBarEvent")){
				object_init_ex(return_value, php_wxRibbonBarEvent_entry);
				wxRibbonBarEvent* ret = wxDynamicCast(_ptrObj0, wxRibbonBarEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonBarEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonButtonBar")){
				object_init_ex(return_value, php_wxRibbonButtonBar_entry);
				wxRibbonButtonBar* ret = wxDynamicCast(_ptrObj0, wxRibbonButtonBar_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonButtonBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonButtonBarEvent")){
				object_init_ex(return_value, php_wxRibbonButtonBarEvent_entry);
				wxRibbonButtonBarEvent* ret = wxDynamicCast(_ptrObj0, wxRibbonButtonBarEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonButtonBarEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonGallery")){
				object_init_ex(return_value, php_wxRibbonGallery_entry);
				wxRibbonGallery* ret = wxDynamicCast(_ptrObj0, wxRibbonGallery_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonGallery);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonGalleryEvent")){
				object_init_ex(return_value, php_wxRibbonGalleryEvent_entry);
				wxRibbonGalleryEvent* ret = wxDynamicCast(_ptrObj0, wxRibbonGalleryEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonGalleryEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonPage")){
				object_init_ex(return_value, php_wxRibbonPage_entry);
				wxRibbonPage* ret = wxDynamicCast(_ptrObj0, wxRibbonPage_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonPage);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonPanel")){
				object_init_ex(return_value, php_wxRibbonPanel_entry);
				wxRibbonPanel* ret = wxDynamicCast(_ptrObj0, wxRibbonPanel_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonPanel);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxRibbonToolBar")){
				object_init_ex(return_value, php_wxRibbonToolBar_entry);
				wxRibbonToolBar* ret = wxDynamicCast(_ptrObj0, wxRibbonToolBar_php);
				long id_to_find = zend_list_insert(ret, le_wxRibbonToolBar);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTaskBarIcon")){
				object_init_ex(return_value, php_wxTaskBarIcon_entry);
				wxTaskBarIcon* ret = wxDynamicCast(_ptrObj0, wxTaskBarIcon_php);
				long id_to_find = zend_list_insert(ret, le_wxTaskBarIcon);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxTaskBarIconEvent")){
				object_init_ex(return_value, php_wxTaskBarIconEvent_entry);
				wxTaskBarIconEvent* ret = wxDynamicCast(_ptrObj0, wxTaskBarIconEvent_php);
				long id_to_find = zend_list_insert(ret, le_wxTaskBarIconEvent);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
			if(!strcmp(_argStr0, "wxNotificationMessage")){
				object_init_ex(return_value, php_wxNotificationMessage_entry);
				wxNotificationMessage* ret = wxDynamicCast(_ptrObj0, wxNotificationMessage_php);
				long id_to_find = zend_list_insert(ret, le_wxNotificationMessage);
				add_property_resource(return_value, _wxResource, id_to_find);
				return;
			}
		}
	}
}


static function_entry php_wxWidgets_functions[] = {
	PHP_FALIAS(wxInitAllImageHandlers, php_wxInitAllImageHandlers, NULL)
	PHP_FALIAS(wxExecute, php_wxExecute, NULL)
	PHP_FALIAS(wxInitialize, php_wxInitialize, NULL)
	PHP_FALIAS(wxEntry, php_wxEntry, NULL)
	PHP_FALIAS(wxAboutBox, php_wxAboutBox, NULL)
	
	/**
	 * Space reserved for the addition to functions table of
	 * autogenerated functions
	 */
	PHP_FALIAS(wxHandleFatalExceptions, php_wxHandleFatalExceptions, NULL)
	PHP_FALIAS(wxUninitialize, php_wxUninitialize, NULL)
	PHP_FALIAS(wxWakeUpIdle, php_wxWakeUpIdle, NULL)
	PHP_FALIAS(wxYield, php_wxYield, NULL)
	PHP_FALIAS(wxSafeYield, php_wxSafeYield, NULL)
	PHP_FALIAS(wxExit, php_wxExit, NULL)
	PHP_FALIAS(wxFromString, php_wxFromString, NULL)
	PHP_FALIAS(wxToString, php_wxToString, NULL)
	PHP_FALIAS(wxSafeShowMessage, php_wxSafeShowMessage, NULL)
	PHP_FALIAS(wxSysErrorCode, php_wxSysErrorCode, NULL)
	PHP_FALIAS(wxIsMainThread, php_wxIsMainThread, NULL)
	PHP_FALIAS(wxMutexGuiEnter, php_wxMutexGuiEnter, NULL)
	PHP_FALIAS(wxMutexGuiLeave, php_wxMutexGuiLeave, NULL)
	PHP_FALIAS(wxBase64Encode, php_wxBase64Encode, NULL)
	PHP_FALIAS(wxBase64DecodedSize, php_wxBase64DecodedSize, NULL)
	PHP_FALIAS(wxBase64EncodedSize, php_wxBase64EncodedSize, NULL)
	PHP_FALIAS(wxBase64Decode, php_wxBase64Decode, NULL)
	PHP_FALIAS(wxGetSingleChoiceIndex, php_wxGetSingleChoiceIndex, NULL)
	PHP_FALIAS(wxGetSingleChoice, php_wxGetSingleChoice, NULL)
	PHP_FALIAS(wxGetColourFromUser, php_wxGetColourFromUser, NULL)
	PHP_FALIAS(wxDisableAsserts, php_wxDisableAsserts, NULL)
	PHP_FALIAS(wxIsDebuggerRunning, php_wxIsDebuggerRunning, NULL)
	PHP_FALIAS(wxSetDefaultAssertHandler, php_wxSetDefaultAssertHandler, NULL)
	PHP_FALIAS(wxTrap, php_wxTrap, NULL)
	PHP_FALIAS(wxDirSelector, php_wxDirSelector, NULL)
	PHP_FALIAS(wxNewEventType, php_wxNewEventType, NULL)
	PHP_FALIAS(wxPostEvent, php_wxPostEvent, NULL)
	PHP_FALIAS(wxQueueEvent, php_wxQueueEvent, NULL)
	PHP_FALIAS(wxFileSelector, php_wxFileSelector, NULL)
	PHP_FALIAS(wxGetOSDirectory, php_wxGetOSDirectory, NULL)
	PHP_FALIAS(wxParseCommonDialogsFilter, php_wxParseCommonDialogsFilter, NULL)
	PHP_FALIAS(wxDirExists, php_wxDirExists, NULL)
	PHP_FALIAS(wxSplitPath, php_wxSplitPath, NULL)
	PHP_FALIAS(wxRenameFile, php_wxRenameFile, NULL)
	PHP_FALIAS(wxCopyFile, php_wxCopyFile, NULL)
	PHP_FALIAS(wxFileExists, php_wxFileExists, NULL)
	PHP_FALIAS(wxMatchWild, php_wxMatchWild, NULL)
	PHP_FALIAS(wxPathOnly, php_wxPathOnly, NULL)
	PHP_FALIAS(wxIsWild, php_wxIsWild, NULL)
	PHP_FALIAS(wxIsAbsolutePath, php_wxIsAbsolutePath, NULL)
	PHP_FALIAS(wxGetCwd, php_wxGetCwd, NULL)
	PHP_FALIAS(wxSetWorkingDirectory, php_wxSetWorkingDirectory, NULL)
	PHP_FALIAS(wxConcatFiles, php_wxConcatFiles, NULL)
	PHP_FALIAS(wxRemoveFile, php_wxRemoveFile, NULL)
	PHP_FALIAS(wxMkdir, php_wxMkdir, NULL)
	PHP_FALIAS(wxRmdir, php_wxRmdir, NULL)
	PHP_FALIAS(wxFindNextFile, php_wxFindNextFile, NULL)
	PHP_FALIAS(wxFindFirstFile, php_wxFindFirstFile, NULL)
	PHP_FALIAS(wxGetFileKind, php_wxGetFileKind, NULL)
	PHP_FALIAS(wxGetFontFromUser, php_wxGetFontFromUser, NULL)
	PHP_FALIAS(wxColourDisplay, php_wxColourDisplay, NULL)
	PHP_FALIAS(wxDisplayDepth, php_wxDisplayDepth, NULL)
	PHP_FALIAS(wxSetCursor, php_wxSetCursor, NULL)
	PHP_FALIAS(wxClientDisplayRect, php_wxClientDisplayRect, NULL)
	PHP_FALIAS(wxGetClientDisplayRect, php_wxGetClientDisplayRect, NULL)
	PHP_FALIAS(wxGetDisplayPPI, php_wxGetDisplayPPI, NULL)
	PHP_FALIAS(wxDisplaySize, php_wxDisplaySize, NULL)
	PHP_FALIAS(wxGetDisplaySize, php_wxGetDisplaySize, NULL)
	PHP_FALIAS(wxDisplaySizeMM, php_wxDisplaySizeMM, NULL)
	PHP_FALIAS(wxGetDisplaySizeMM, php_wxGetDisplaySizeMM, NULL)
	PHP_FALIAS(wxEntryCleanup, php_wxEntryCleanup, NULL)
	PHP_FALIAS(wxFinite, php_wxFinite, NULL)
	PHP_FALIAS(wxIsNaN, php_wxIsNaN, NULL)
	PHP_FALIAS(wxRound, php_wxRound, NULL)
	PHP_FALIAS(wxIsSameDouble, php_wxIsSameDouble, NULL)
	PHP_FALIAS(wxIsNullDouble, php_wxIsNullDouble, NULL)
	PHP_FALIAS(wxMessageBox, php_wxMessageBox, NULL)
	PHP_FALIAS(wxCreateDynamicObject, php_wxCreateDynamicObject, NULL)
	PHP_FALIAS(wxFindWindowAtPointer, php_wxFindWindowAtPointer, NULL)
	PHP_FALIAS(wxGetActiveWindow, php_wxGetActiveWindow, NULL)
	PHP_FALIAS(wxGetTopLevelParent, php_wxGetTopLevelParent, NULL)
	PHP_FALIAS(wxRichTextHasStyle, php_wxRichTextHasStyle, NULL)
	PHP_FALIAS(wxGetStockLabel, php_wxGetStockLabel, NULL)
	PHP_FALIAS(wxGetTextFromUser, php_wxGetTextFromUser, NULL)
	PHP_FALIAS(wxGetPasswordFromUser, php_wxGetPasswordFromUser, NULL)
	PHP_FALIAS(wxGetTimeZone, php_wxGetTimeZone, NULL)
	PHP_FALIAS(wxGetLocalTime, php_wxGetLocalTime, NULL)
	PHP_FALIAS(wxGetUTCTime, php_wxGetUTCTime, NULL)
	PHP_FALIAS(wxStringTokenize, php_wxStringTokenize, NULL)
	PHP_FALIAS(wxGetTranslation, php_wxGetTranslation, NULL)
	PHP_FALIAS(wxBeginBusyCursor, php_wxBeginBusyCursor, NULL)
	PHP_FALIAS(wxEndBusyCursor, php_wxEndBusyCursor, NULL)
	PHP_FALIAS(wxIsBusy, php_wxIsBusy, NULL)
	PHP_FALIAS(wxBell, php_wxBell, NULL)
	PHP_FALIAS(wxInfoMessageBox, php_wxInfoMessageBox, NULL)
	PHP_FALIAS(wxGetLibraryVersionInfo, php_wxGetLibraryVersionInfo, NULL)
	PHP_FALIAS(wxGetenv, php_wxGetenv, NULL)
	PHP_FALIAS(wxSetEnv, php_wxSetEnv, NULL)
	PHP_FALIAS(wxUnsetEnv, php_wxUnsetEnv, NULL)
	PHP_FALIAS(wxGetBatteryState, php_wxGetBatteryState, NULL)
	PHP_FALIAS(wxGetPowerType, php_wxGetPowerType, NULL)
	PHP_FALIAS(wxGetKeyState, php_wxGetKeyState, NULL)
	PHP_FALIAS(wxGetMousePosition, php_wxGetMousePosition, NULL)
	PHP_FALIAS(wxGetMouseState, php_wxGetMouseState, NULL)
	PHP_FALIAS(wxEnableTopLevelWindows, php_wxEnableTopLevelWindows, NULL)
	PHP_FALIAS(wxFindWindowAtPoint, php_wxFindWindowAtPoint, NULL)
	PHP_FALIAS(wxFindWindowByLabel, php_wxFindWindowByLabel, NULL)
	PHP_FALIAS(wxFindWindowByName, php_wxFindWindowByName, NULL)
	PHP_FALIAS(wxFindMenuItemId, php_wxFindMenuItemId, NULL)
	PHP_FALIAS(wxNewId, php_wxNewId, NULL)
	PHP_FALIAS(wxRegisterId, php_wxRegisterId, NULL)
	PHP_FALIAS(wxLaunchDefaultApplication, php_wxLaunchDefaultApplication, NULL)
	PHP_FALIAS(wxLaunchDefaultBrowser, php_wxLaunchDefaultBrowser, NULL)
	PHP_FALIAS(wxStripMenuCodes, php_wxStripMenuCodes, NULL)
	PHP_FALIAS(wxGetHomeDir, php_wxGetHomeDir, NULL)
	PHP_FALIAS(wxGetFullHostName, php_wxGetFullHostName, NULL)
	PHP_FALIAS(wxGetUserHome, php_wxGetUserHome, NULL)
	PHP_FALIAS(wxGetOsDescription, php_wxGetOsDescription, NULL)
	PHP_FALIAS(wxGetOsVersion, php_wxGetOsVersion, NULL)
	PHP_FALIAS(wxIsPlatform64Bit, php_wxIsPlatform64Bit, NULL)
	PHP_FALIAS(wxIsPlatformLittleEndian, php_wxIsPlatformLittleEndian, NULL)
	PHP_FALIAS(wxGetProcessId, php_wxGetProcessId, NULL)
	PHP_FALIAS(wxKill, php_wxKill, NULL)
	PHP_FALIAS(wxShell, php_wxShell, NULL)
	PHP_FALIAS(wxShutdown, php_wxShutdown, NULL)
	PHP_FALIAS(wxMicroSleep, php_wxMicroSleep, NULL)
	PHP_FALIAS(wxMilliSleep, php_wxMilliSleep, NULL)
	PHP_FALIAS(wxNow, php_wxNow, NULL)
	PHP_FALIAS(wxSleep, php_wxSleep, NULL)
	PHP_FALIAS(wxUsleep, php_wxUsleep, NULL)
	PHP_FALIAS(wxIsEmpty, php_wxIsEmpty, NULL)
	PHP_FALIAS(wxTmemchr, php_wxTmemchr, NULL)
	PHP_FALIAS(wxTmemcmp, php_wxTmemcmp, NULL)
	PHP_FALIAS(wxTmemcpy, php_wxTmemcpy, NULL)
	PHP_FALIAS(wxTmemmove, php_wxTmemmove, NULL)
	PHP_FALIAS(wxTmemset, php_wxTmemset, NULL)
	PHP_FALIAS(wxSetlocale, php_wxSetlocale, NULL)
	PHP_FALIAS(wxStrlen, php_wxStrlen, NULL)
	PHP_FALIAS(wxStrnlen, php_wxStrnlen, NULL)
	PHP_FALIAS(wxStrdup, php_wxStrdup, NULL)
	PHP_FALIAS(wxStrcpy, php_wxStrcpy, NULL)
	PHP_FALIAS(wxStrncpy, php_wxStrncpy, NULL)
	PHP_FALIAS(wxStrlcpy, php_wxStrlcpy, NULL)
	PHP_FALIAS(wxStrcat, php_wxStrcat, NULL)
	PHP_FALIAS(wxStrncat, php_wxStrncat, NULL)
	PHP_FALIAS(wxStrxfrm, php_wxStrxfrm, NULL)
	PHP_FALIAS(wxStrstr, php_wxStrstr, NULL)
	PHP_FALIAS(wxStrchr, php_wxStrchr, NULL)
	PHP_FALIAS(wxStrrchr, php_wxStrrchr, NULL)
	PHP_FALIAS(wxStrpbrk, php_wxStrpbrk, NULL)
	PHP_FALIAS(wxRemove, php_wxRemove, NULL)
	PHP_FALIAS(wxRename, php_wxRename, NULL)
	PHP_FALIAS(wxAtoi, php_wxAtoi, NULL)
	PHP_FALIAS(wxAtol, php_wxAtol, NULL)
	PHP_FALIAS(wxAtof, php_wxAtof, NULL)
	PHP_FALIAS(wxSystem, php_wxSystem, NULL)
	PHP_FALIAS(wxDynamicCast, php_wxDynamicCast, NULL)

	{ NULL, NULL, NULL }
};


PHP_MINIT_FUNCTION(php_wxWidgets)
{
    zend_class_entry ce; /* Temporary Variable */
    zend_class_entry cf; /* Temporary Variable */

	/**
	 * Predefined Initialization of wxApp class
	 */
	INIT_CLASS_ENTRY(ce, PHP_wxApp_NAME , php_wxApp_functions);
	php_wxApp_entry = zend_register_internal_class(&ce TSRMLS_CC);
	le_wxApp = zend_register_list_destructors_ex(NULL,NULL, le_wxApp_name ,module_number);	
	
	
	/**
	 * Space reserved for the initialization of autogenerated classes,
	 * class enumerations and global constants
	 * 
	 * Note:
	 * 
	 * Predefined fonts, pens brushes, colors and cursos are  initilized 
	 * by 'wxStockGDI::instance().Get*(item)' functions and it needs 
	 * wxInitilize call in order to work (learned this the hard way)
	 */
	 wxInitialize();
	 
	INIT_CLASS_ENTRY(cf, PHP_wxAboutDialogInfo_NAME , php_wxAboutDialogInfo_functions);
	php_wxAboutDialogInfo_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAboutDialogInfo = zend_register_list_destructors_ex(php_wxAboutDialogInfo_destruction_handler, NULL, le_wxAboutDialogInfo_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFrame_NAME , php_wxFrame_functions);
	php_wxFrame_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFrame = zend_register_list_destructors_ex(php_wxFrame_destruction_handler, NULL, le_wxFrame_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTopLevelWindow_NAME , php_wxTopLevelWindow_functions);
	php_wxTopLevelWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTopLevelWindow = zend_register_list_destructors_ex(php_wxTopLevelWindow_destruction_handler, NULL, le_wxTopLevelWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxNonOwnedWindow_NAME , php_wxNonOwnedWindow_functions);
	php_wxNonOwnedWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxNonOwnedWindow = zend_register_list_destructors_ex(php_wxNonOwnedWindow_destruction_handler, NULL, le_wxNonOwnedWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxWindow_NAME , php_wxWindow_functions);
	php_wxWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxWindow = zend_register_list_destructors_ex(php_wxWindow_destruction_handler, NULL, le_wxWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSize_NAME , php_wxSize_functions);
	php_wxSize_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSize = zend_register_list_destructors_ex(php_wxSize_destruction_handler, NULL, le_wxSize_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPoint_NAME , php_wxPoint_functions);
	php_wxPoint_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPoint = zend_register_list_destructors_ex(php_wxPoint_destruction_handler, NULL, le_wxPoint_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRealPoint_NAME , php_wxRealPoint_functions);
	php_wxRealPoint_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRealPoint = zend_register_list_destructors_ex(php_wxRealPoint_destruction_handler, NULL, le_wxRealPoint_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxEvtHandler_NAME , php_wxEvtHandler_functions);
	php_wxEvtHandler_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxEvtHandler = zend_register_list_destructors_ex(php_wxEvtHandler_destruction_handler, NULL, le_wxEvtHandler_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStatusBar_NAME , php_wxStatusBar_functions);
	php_wxStatusBar_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStatusBar = zend_register_list_destructors_ex(php_wxStatusBar_destruction_handler, NULL, le_wxStatusBar_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxButton_NAME , php_wxButton_functions);
	php_wxButton_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxButton = zend_register_list_destructors_ex(php_wxButton_destruction_handler, NULL, le_wxButton_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAnyButton_NAME , php_wxAnyButton_functions);
	php_wxAnyButton_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAnyButton = zend_register_list_destructors_ex(php_wxAnyButton_destruction_handler, NULL, le_wxAnyButton_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxControl_NAME , php_wxControl_functions);
	php_wxControl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxControl = zend_register_list_destructors_ex(php_wxControl_destruction_handler, NULL, le_wxControl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxValidator_NAME , php_wxValidator_functions);
	php_wxValidator_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxValidator = zend_register_list_destructors_ex(php_wxValidator_destruction_handler, NULL, le_wxValidator_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBitmapHandler_NAME , php_wxBitmapHandler_functions);
	php_wxBitmapHandler_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBitmapHandler = zend_register_list_destructors_ex(php_wxBitmapHandler_destruction_handler, NULL, le_wxBitmapHandler_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBitmap_NAME , php_wxBitmap_functions);
	php_wxBitmap_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBitmap = zend_register_list_destructors_ex(php_wxBitmap_destruction_handler, NULL, le_wxBitmap_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPalette_NAME , php_wxPalette_functions);
	php_wxPalette_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPalette = zend_register_list_destructors_ex(php_wxPalette_destruction_handler, NULL, le_wxPalette_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxImage_NAME , php_wxImage_functions);
	php_wxImage_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxImage = zend_register_list_destructors_ex(php_wxImage_destruction_handler, NULL, le_wxImage_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxIcon_NAME , php_wxIcon_functions);
	php_wxIcon_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxIcon = zend_register_list_destructors_ex(php_wxIcon_destruction_handler, NULL, le_wxIcon_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSplitterWindow_NAME , php_wxSplitterWindow_functions);
	php_wxSplitterWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSplitterWindow = zend_register_list_destructors_ex(php_wxSplitterWindow_destruction_handler, NULL, le_wxSplitterWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBoxSizer_NAME , php_wxBoxSizer_functions);
	php_wxBoxSizer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBoxSizer = zend_register_list_destructors_ex(php_wxBoxSizer_destruction_handler, NULL, le_wxBoxSizer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSizer_NAME , php_wxSizer_functions);
	php_wxSizer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSizer = zend_register_list_destructors_ex(php_wxSizer_destruction_handler, NULL, le_wxSizer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSizerItem_NAME , php_wxSizerItem_functions);
	php_wxSizerItem_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSizerItem = zend_register_list_destructors_ex(php_wxSizerItem_destruction_handler, NULL, le_wxSizerItem_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSizerFlags_NAME , php_wxSizerFlags_functions);
	php_wxSizerFlags_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSizerFlags = zend_register_list_destructors_ex(php_wxSizerFlags_destruction_handler, NULL, le_wxSizerFlags_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRect_NAME , php_wxRect_functions);
	php_wxRect_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRect = zend_register_list_destructors_ex(php_wxRect_destruction_handler, NULL, le_wxRect_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTreeCtrl_NAME , php_wxTreeCtrl_functions);
	php_wxTreeCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTreeCtrl = zend_register_list_destructors_ex(php_wxTreeCtrl_destruction_handler, NULL, le_wxTreeCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTreeItemId_NAME , php_wxTreeItemId_functions);
	php_wxTreeItemId_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTreeItemId = zend_register_list_destructors_ex(php_wxTreeItemId_destruction_handler, NULL, le_wxTreeItemId_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTreeItemData_NAME , php_wxTreeItemData_functions);
	php_wxTreeItemData_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTreeItemData = zend_register_list_destructors_ex(php_wxTreeItemData_destruction_handler, NULL, le_wxTreeItemData_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxClientData_NAME , php_wxClientData_functions);
	php_wxClientData_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxClientData = zend_register_list_destructors_ex(php_wxClientData_destruction_handler, NULL, le_wxClientData_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxImageList_NAME , php_wxImageList_functions);
	php_wxImageList_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxImageList = zend_register_list_destructors_ex(php_wxImageList_destruction_handler, NULL, le_wxImageList_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDC_NAME , php_wxDC_functions);
	php_wxDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDC = zend_register_list_destructors_ex(php_wxDC_destruction_handler, NULL, le_wxDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxColour_NAME , php_wxColour_functions);
	php_wxColour_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxColour = zend_register_list_destructors_ex(php_wxColour_destruction_handler, NULL, le_wxColour_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFont_NAME , php_wxFont_functions);
	php_wxFont_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFont = zend_register_list_destructors_ex(php_wxFont_destruction_handler, NULL, le_wxFont_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPanel_NAME , php_wxPanel_functions);
	php_wxPanel_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPanel = zend_register_list_destructors_ex(php_wxPanel_destruction_handler, NULL, le_wxPanel_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCheckListBox_NAME , php_wxCheckListBox_functions);
	php_wxCheckListBox_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCheckListBox = zend_register_list_destructors_ex(php_wxCheckListBox_destruction_handler, NULL, le_wxCheckListBox_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxListBox_NAME , php_wxListBox_functions);
	php_wxListBox_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxListBox = zend_register_list_destructors_ex(php_wxListBox_destruction_handler, NULL, le_wxListBox_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxControlWithItems_NAME , php_wxControlWithItems_functions);
	php_wxControlWithItems_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxControlWithItems = zend_register_list_destructors_ex(php_wxControlWithItems_destruction_handler, NULL, le_wxControlWithItems_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMenuBar_NAME , php_wxMenuBar_functions);
	php_wxMenuBar_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMenuBar = zend_register_list_destructors_ex(php_wxMenuBar_destruction_handler, NULL, le_wxMenuBar_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMenuEvent_NAME , php_wxMenuEvent_functions);
	php_wxMenuEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMenuEvent = zend_register_list_destructors_ex(php_wxMenuEvent_destruction_handler, NULL, le_wxMenuEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMenuItem_NAME , php_wxMenuItem_functions);
	php_wxMenuItem_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMenuItem = zend_register_list_destructors_ex(php_wxMenuItem_destruction_handler, NULL, le_wxMenuItem_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMenu_NAME , php_wxMenu_functions);
	php_wxMenu_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMenu = zend_register_list_destructors_ex(php_wxMenu_destruction_handler, NULL, le_wxMenu_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxEvent_NAME , php_wxEvent_functions);
	php_wxEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxEvent = zend_register_list_destructors_ex(php_wxEvent_destruction_handler, NULL, le_wxEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTreeEvent_NAME , php_wxTreeEvent_functions);
	php_wxTreeEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTreeEvent = zend_register_list_destructors_ex(php_wxTreeEvent_destruction_handler, NULL, le_wxTreeEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxKeyEvent_NAME , php_wxKeyEvent_functions);
	php_wxKeyEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxKeyEvent = zend_register_list_destructors_ex(php_wxKeyEvent_destruction_handler, NULL, le_wxKeyEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxKeyboardState_NAME , php_wxKeyboardState_functions);
	php_wxKeyboardState_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxKeyboardState = zend_register_list_destructors_ex(php_wxKeyboardState_destruction_handler, NULL, le_wxKeyboardState_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxNotifyEvent_NAME , php_wxNotifyEvent_functions);
	php_wxNotifyEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxNotifyEvent = zend_register_list_destructors_ex(php_wxNotifyEvent_destruction_handler, NULL, le_wxNotifyEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCommandEvent_NAME , php_wxCommandEvent_functions);
	php_wxCommandEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCommandEvent = zend_register_list_destructors_ex(php_wxCommandEvent_destruction_handler, NULL, le_wxCommandEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCloseEvent_NAME , php_wxCloseEvent_functions);
	php_wxCloseEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCloseEvent = zend_register_list_destructors_ex(php_wxCloseEvent_destruction_handler, NULL, le_wxCloseEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxActivateEvent_NAME , php_wxActivateEvent_functions);
	php_wxActivateEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxActivateEvent = zend_register_list_destructors_ex(php_wxActivateEvent_destruction_handler, NULL, le_wxActivateEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiManager_NAME , php_wxAuiManager_functions);
	php_wxAuiManager_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiManager = zend_register_list_destructors_ex(php_wxAuiManager_destruction_handler, NULL, le_wxAuiManager_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiDockArt_NAME , php_wxAuiDockArt_functions);
	php_wxAuiDockArt_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiDockArt = zend_register_list_destructors_ex(php_wxAuiDockArt_destruction_handler, NULL, le_wxAuiDockArt_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiPaneInfo_NAME , php_wxAuiPaneInfo_functions);
	php_wxAuiPaneInfo_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiPaneInfo = zend_register_list_destructors_ex(php_wxAuiPaneInfo_destruction_handler, NULL, le_wxAuiPaneInfo_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiManagerEvent_NAME , php_wxAuiManagerEvent_functions);
	php_wxAuiManagerEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiManagerEvent = zend_register_list_destructors_ex(php_wxAuiManagerEvent_destruction_handler, NULL, le_wxAuiManagerEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiNotebook_NAME , php_wxAuiNotebook_functions);
	php_wxAuiNotebook_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiNotebook = zend_register_list_destructors_ex(php_wxAuiNotebook_destruction_handler, NULL, le_wxAuiNotebook_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiNotebookEvent_NAME , php_wxAuiNotebookEvent_functions);
	php_wxAuiNotebookEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiNotebookEvent = zend_register_list_destructors_ex(php_wxAuiNotebookEvent_destruction_handler, NULL, le_wxAuiNotebookEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBookCtrlEvent_NAME , php_wxBookCtrlEvent_functions);
	php_wxBookCtrlEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBookCtrlEvent = zend_register_list_destructors_ex(php_wxBookCtrlEvent_destruction_handler, NULL, le_wxBookCtrlEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiDefaultToolBarArt_NAME , php_wxAuiDefaultToolBarArt_functions);
	php_wxAuiDefaultToolBarArt_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiDefaultToolBarArt = zend_register_list_destructors_ex(php_wxAuiDefaultToolBarArt_destruction_handler, NULL, le_wxAuiDefaultToolBarArt_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBookCtrlBase_NAME , php_wxBookCtrlBase_functions);
	php_wxBookCtrlBase_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBookCtrlBase = zend_register_list_destructors_ex(php_wxBookCtrlBase_destruction_handler, NULL, le_wxBookCtrlBase_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxWithImages_NAME , php_wxWithImages_functions);
	php_wxWithImages_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxWithImages = zend_register_list_destructors_ex(php_wxWithImages_destruction_handler, NULL, le_wxWithImages_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAcceleratorEntry_NAME , php_wxAcceleratorEntry_functions);
	php_wxAcceleratorEntry_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAcceleratorEntry = zend_register_list_destructors_ex(php_wxAcceleratorEntry_destruction_handler, NULL, le_wxAcceleratorEntry_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAcceleratorTable_NAME , php_wxAcceleratorTable_functions);
	php_wxAcceleratorTable_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAcceleratorTable = zend_register_list_destructors_ex(php_wxAcceleratorTable_destruction_handler, NULL, le_wxAcceleratorTable_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGDIObject_NAME , php_wxGDIObject_functions);
	php_wxGDIObject_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGDIObject = zend_register_list_destructors_ex(php_wxGDIObject_destruction_handler, NULL, le_wxGDIObject_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAnimation_NAME , php_wxAnimation_functions);
	php_wxAnimation_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAnimation = zend_register_list_destructors_ex(php_wxAnimation_destruction_handler, NULL, le_wxAnimation_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAnimationCtrl_NAME , php_wxAnimationCtrl_functions);
	php_wxAnimationCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAnimationCtrl = zend_register_list_destructors_ex(php_wxAnimationCtrl_destruction_handler, NULL, le_wxAnimationCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxArtProvider_NAME , php_wxArtProvider_functions);
	php_wxArtProvider_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxArtProvider = zend_register_list_destructors_ex(php_wxArtProvider_destruction_handler, NULL, le_wxArtProvider_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxIconBundle_NAME , php_wxIconBundle_functions);
	php_wxIconBundle_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxIconBundle = zend_register_list_destructors_ex(php_wxIconBundle_destruction_handler, NULL, le_wxIconBundle_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStyledTextCtrl_NAME , php_wxStyledTextCtrl_functions);
	php_wxStyledTextCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStyledTextCtrl = zend_register_list_destructors_ex(php_wxStyledTextCtrl_destruction_handler, NULL, le_wxStyledTextCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStyledTextEvent_NAME , php_wxStyledTextEvent_functions);
	php_wxStyledTextEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStyledTextEvent = zend_register_list_destructors_ex(php_wxStyledTextEvent_destruction_handler, NULL, le_wxStyledTextEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxVersionInfo_NAME , php_wxVersionInfo_functions);
	php_wxVersionInfo_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxVersionInfo = zend_register_list_destructors_ex(php_wxVersionInfo_destruction_handler, NULL, le_wxVersionInfo_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxScrollBar_NAME , php_wxScrollBar_functions);
	php_wxScrollBar_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxScrollBar = zend_register_list_destructors_ex(php_wxScrollBar_destruction_handler, NULL, le_wxScrollBar_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStaticText_NAME , php_wxStaticText_functions);
	php_wxStaticText_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStaticText = zend_register_list_destructors_ex(php_wxStaticText_destruction_handler, NULL, le_wxStaticText_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStatusBarPane_NAME , php_wxStatusBarPane_functions);
	php_wxStatusBarPane_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStatusBarPane = zend_register_list_destructors_ex(php_wxStatusBarPane_destruction_handler, NULL, le_wxStatusBarPane_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStaticLine_NAME , php_wxStaticLine_functions);
	php_wxStaticLine_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStaticLine = zend_register_list_destructors_ex(php_wxStaticLine_destruction_handler, NULL, le_wxStaticLine_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStaticBoxSizer_NAME , php_wxStaticBoxSizer_functions);
	php_wxStaticBoxSizer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStaticBoxSizer = zend_register_list_destructors_ex(php_wxStaticBoxSizer_destruction_handler, NULL, le_wxStaticBoxSizer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStaticBox_NAME , php_wxStaticBox_functions);
	php_wxStaticBox_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStaticBox = zend_register_list_destructors_ex(php_wxStaticBox_destruction_handler, NULL, le_wxStaticBox_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStaticBitmap_NAME , php_wxStaticBitmap_functions);
	php_wxStaticBitmap_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStaticBitmap = zend_register_list_destructors_ex(php_wxStaticBitmap_destruction_handler, NULL, le_wxStaticBitmap_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiToolBarItem_NAME , php_wxAuiToolBarItem_functions);
	php_wxAuiToolBarItem_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiToolBarItem = zend_register_list_destructors_ex(php_wxAuiToolBarItem_destruction_handler, NULL, le_wxAuiToolBarItem_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCheckBox_NAME , php_wxCheckBox_functions);
	php_wxCheckBox_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCheckBox = zend_register_list_destructors_ex(php_wxCheckBox_destruction_handler, NULL, le_wxCheckBox_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxWrapSizer_NAME , php_wxWrapSizer_functions);
	php_wxWrapSizer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxWrapSizer = zend_register_list_destructors_ex(php_wxWrapSizer_destruction_handler, NULL, le_wxWrapSizer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBitmapButton_NAME , php_wxBitmapButton_functions);
	php_wxBitmapButton_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBitmapButton = zend_register_list_destructors_ex(php_wxBitmapButton_destruction_handler, NULL, le_wxBitmapButton_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTextEntry_NAME , php_wxTextEntry_functions);
	php_wxTextEntry_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTextEntry = zend_register_list_destructors_ex(php_wxTextEntry_destruction_handler, NULL, le_wxTextEntry_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTextCompleter_NAME , php_wxTextCompleter_functions);
	php_wxTextCompleter_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTextCompleter = zend_register_list_destructors_ex(php_wxTextCompleter_destruction_handler, NULL, le_wxTextCompleter_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTextCtrl_NAME , php_wxTextCtrl_functions);
	php_wxTextCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTextCtrl = zend_register_list_destructors_ex(php_wxTextCtrl_destruction_handler, NULL, le_wxTextCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTextAttr_NAME , php_wxTextAttr_functions);
	php_wxTextAttr_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTextAttr = zend_register_list_destructors_ex(php_wxTextAttr_destruction_handler, NULL, le_wxTextAttr_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTextEntryDialog_NAME , php_wxTextEntryDialog_functions);
	php_wxTextEntryDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTextEntryDialog = zend_register_list_destructors_ex(php_wxTextEntryDialog_destruction_handler, NULL, le_wxTextEntryDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxComboBox_NAME , php_wxComboBox_functions);
	php_wxComboBox_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxComboBox = zend_register_list_destructors_ex(php_wxComboBox_destruction_handler, NULL, le_wxComboBox_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxItemContainer_NAME , php_wxItemContainer_functions);
	php_wxItemContainer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxItemContainer = zend_register_list_destructors_ex(php_wxItemContainer_destruction_handler, NULL, le_wxItemContainer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxItemContainerImmutable_NAME , php_wxItemContainerImmutable_functions);
	php_wxItemContainerImmutable_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxItemContainerImmutable = zend_register_list_destructors_ex(php_wxItemContainerImmutable_destruction_handler, NULL, le_wxItemContainerImmutable_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBitmapComboBox_NAME , php_wxBitmapComboBox_functions);
	php_wxBitmapComboBox_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBitmapComboBox = zend_register_list_destructors_ex(php_wxBitmapComboBox_destruction_handler, NULL, le_wxBitmapComboBox_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiToolBarEvent_NAME , php_wxAuiToolBarEvent_functions);
	php_wxAuiToolBarEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiToolBarEvent = zend_register_list_destructors_ex(php_wxAuiToolBarEvent_destruction_handler, NULL, le_wxAuiToolBarEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiToolBar_NAME , php_wxAuiToolBar_functions);
	php_wxAuiToolBar_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiToolBar = zend_register_list_destructors_ex(php_wxAuiToolBar_destruction_handler, NULL, le_wxAuiToolBar_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBannerWindow_NAME , php_wxBannerWindow_functions);
	php_wxBannerWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBannerWindow = zend_register_list_destructors_ex(php_wxBannerWindow_destruction_handler, NULL, le_wxBannerWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxChoice_NAME , php_wxChoice_functions);
	php_wxChoice_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxChoice = zend_register_list_destructors_ex(php_wxChoice_destruction_handler, NULL, le_wxChoice_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxListEvent_NAME , php_wxListEvent_functions);
	php_wxListEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxListEvent = zend_register_list_destructors_ex(php_wxListEvent_destruction_handler, NULL, le_wxListEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxListCtrl_NAME , php_wxListCtrl_functions);
	php_wxListCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxListCtrl = zend_register_list_destructors_ex(php_wxListCtrl_destruction_handler, NULL, le_wxListCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxListItemAttr_NAME , php_wxListItemAttr_functions);
	php_wxListItemAttr_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxListItemAttr = zend_register_list_destructors_ex(php_wxListItemAttr_destruction_handler, NULL, le_wxListItemAttr_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxListItem_NAME , php_wxListItem_functions);
	php_wxListItem_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxListItem = zend_register_list_destructors_ex(php_wxListItem_destruction_handler, NULL, le_wxListItem_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxListbook_NAME , php_wxListbook_functions);
	php_wxListbook_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxListbook = zend_register_list_destructors_ex(php_wxListbook_destruction_handler, NULL, le_wxListbook_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxChildFocusEvent_NAME , php_wxChildFocusEvent_functions);
	php_wxChildFocusEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxChildFocusEvent = zend_register_list_destructors_ex(php_wxChildFocusEvent_destruction_handler, NULL, le_wxChildFocusEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxChoicebook_NAME , php_wxChoicebook_functions);
	php_wxChoicebook_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxChoicebook = zend_register_list_destructors_ex(php_wxChoicebook_destruction_handler, NULL, le_wxChoicebook_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRadioBox_NAME , php_wxRadioBox_functions);
	php_wxRadioBox_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRadioBox = zend_register_list_destructors_ex(php_wxRadioBox_destruction_handler, NULL, le_wxRadioBox_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRadioButton_NAME , php_wxRadioButton_functions);
	php_wxRadioButton_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRadioButton = zend_register_list_destructors_ex(php_wxRadioButton_destruction_handler, NULL, le_wxRadioButton_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRearrangeCtrl_NAME , php_wxRearrangeCtrl_functions);
	php_wxRearrangeCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRearrangeCtrl = zend_register_list_destructors_ex(php_wxRearrangeCtrl_destruction_handler, NULL, le_wxRearrangeCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRearrangeDialog_NAME , php_wxRearrangeDialog_functions);
	php_wxRearrangeDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRearrangeDialog = zend_register_list_destructors_ex(php_wxRearrangeDialog_destruction_handler, NULL, le_wxRearrangeDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRearrangeList_NAME , php_wxRearrangeList_functions);
	php_wxRearrangeList_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRearrangeList = zend_register_list_destructors_ex(php_wxRearrangeList_destruction_handler, NULL, le_wxRearrangeList_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSlider_NAME , php_wxSlider_functions);
	php_wxSlider_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSlider = zend_register_list_destructors_ex(php_wxSlider_destruction_handler, NULL, le_wxSlider_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSpinCtrl_NAME , php_wxSpinCtrl_functions);
	php_wxSpinCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSpinCtrl = zend_register_list_destructors_ex(php_wxSpinCtrl_destruction_handler, NULL, le_wxSpinCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSpinButton_NAME , php_wxSpinButton_functions);
	php_wxSpinButton_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSpinButton = zend_register_list_destructors_ex(php_wxSpinButton_destruction_handler, NULL, le_wxSpinButton_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSpinEvent_NAME , php_wxSpinEvent_functions);
	php_wxSpinEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSpinEvent = zend_register_list_destructors_ex(php_wxSpinEvent_destruction_handler, NULL, le_wxSpinEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSplitterEvent_NAME , php_wxSplitterEvent_functions);
	php_wxSplitterEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSplitterEvent = zend_register_list_destructors_ex(php_wxSplitterEvent_destruction_handler, NULL, le_wxSplitterEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSplashScreen_NAME , php_wxSplashScreen_functions);
	php_wxSplashScreen_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSplashScreen = zend_register_list_destructors_ex(php_wxSplashScreen_destruction_handler, NULL, le_wxSplashScreen_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSizeEvent_NAME , php_wxSizeEvent_functions);
	php_wxSizeEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSizeEvent = zend_register_list_destructors_ex(php_wxSizeEvent_destruction_handler, NULL, le_wxSizeEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGauge_NAME , php_wxGauge_functions);
	php_wxGauge_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGauge = zend_register_list_destructors_ex(php_wxGauge_destruction_handler, NULL, le_wxGauge_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlWindow_NAME , php_wxHtmlWindow_functions);
	php_wxHtmlWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlWindow = zend_register_list_destructors_ex(php_wxHtmlWindow_destruction_handler, NULL, le_wxHtmlWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlContainerCell_NAME , php_wxHtmlContainerCell_functions);
	php_wxHtmlContainerCell_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlContainerCell = zend_register_list_destructors_ex(php_wxHtmlContainerCell_destruction_handler, NULL, le_wxHtmlContainerCell_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlCell_NAME , php_wxHtmlCell_functions);
	php_wxHtmlCell_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlCell = zend_register_list_destructors_ex(php_wxHtmlCell_destruction_handler, NULL, le_wxHtmlCell_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlCellEvent_NAME , php_wxHtmlCellEvent_functions);
	php_wxHtmlCellEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlCellEvent = zend_register_list_destructors_ex(php_wxHtmlCellEvent_destruction_handler, NULL, le_wxHtmlCellEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlColourCell_NAME , php_wxHtmlColourCell_functions);
	php_wxHtmlColourCell_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlColourCell = zend_register_list_destructors_ex(php_wxHtmlColourCell_destruction_handler, NULL, le_wxHtmlColourCell_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlEasyPrinting_NAME , php_wxHtmlEasyPrinting_functions);
	php_wxHtmlEasyPrinting_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlEasyPrinting = zend_register_list_destructors_ex(php_wxHtmlEasyPrinting_destruction_handler, NULL, le_wxHtmlEasyPrinting_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlLinkEvent_NAME , php_wxHtmlLinkEvent_functions);
	php_wxHtmlLinkEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlLinkEvent = zend_register_list_destructors_ex(php_wxHtmlLinkEvent_destruction_handler, NULL, le_wxHtmlLinkEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlLinkInfo_NAME , php_wxHtmlLinkInfo_functions);
	php_wxHtmlLinkInfo_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlLinkInfo = zend_register_list_destructors_ex(php_wxHtmlLinkInfo_destruction_handler, NULL, le_wxHtmlLinkInfo_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMouseEvent_NAME , php_wxMouseEvent_functions);
	php_wxMouseEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMouseEvent = zend_register_list_destructors_ex(php_wxMouseEvent_destruction_handler, NULL, le_wxMouseEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMouseState_NAME , php_wxMouseState_functions);
	php_wxMouseState_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMouseState = zend_register_list_destructors_ex(php_wxMouseState_destruction_handler, NULL, le_wxMouseState_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMoveEvent_NAME , php_wxMoveEvent_functions);
	php_wxMoveEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMoveEvent = zend_register_list_destructors_ex(php_wxMoveEvent_destruction_handler, NULL, le_wxMoveEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMouseCaptureLostEvent_NAME , php_wxMouseCaptureLostEvent_functions);
	php_wxMouseCaptureLostEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMouseCaptureLostEvent = zend_register_list_destructors_ex(php_wxMouseCaptureLostEvent_destruction_handler, NULL, le_wxMouseCaptureLostEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMouseCaptureChangedEvent_NAME , php_wxMouseCaptureChangedEvent_functions);
	php_wxMouseCaptureChangedEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMouseCaptureChangedEvent = zend_register_list_destructors_ex(php_wxMouseCaptureChangedEvent_destruction_handler, NULL, le_wxMouseCaptureChangedEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMouseEventsManager_NAME , php_wxMouseEventsManager_functions);
	php_wxMouseEventsManager_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMouseEventsManager = zend_register_list_destructors_ex(php_wxMouseEventsManager_destruction_handler, NULL, le_wxMouseEventsManager_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMessageDialog_NAME , php_wxMessageDialog_functions);
	php_wxMessageDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMessageDialog = zend_register_list_destructors_ex(php_wxMessageDialog_destruction_handler, NULL, le_wxMessageDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlListBox_NAME , php_wxHtmlListBox_functions);
	php_wxHtmlListBox_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlListBox = zend_register_list_destructors_ex(php_wxHtmlListBox_destruction_handler, NULL, le_wxHtmlListBox_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxVListBox_NAME , php_wxVListBox_functions);
	php_wxVListBox_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxVListBox = zend_register_list_destructors_ex(php_wxVListBox_destruction_handler, NULL, le_wxVListBox_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxVScrolledWindow_NAME , php_wxVScrolledWindow_functions);
	php_wxVScrolledWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxVScrolledWindow = zend_register_list_destructors_ex(php_wxVScrolledWindow_destruction_handler, NULL, le_wxVScrolledWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlTag_NAME , php_wxHtmlTag_functions);
	php_wxHtmlTag_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlTag = zend_register_list_destructors_ex(php_wxHtmlTag_destruction_handler, NULL, le_wxHtmlTag_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHyperlinkCtrl_NAME , php_wxHyperlinkCtrl_functions);
	php_wxHyperlinkCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHyperlinkCtrl = zend_register_list_destructors_ex(php_wxHyperlinkCtrl_destruction_handler, NULL, le_wxHyperlinkCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHyperlinkEvent_NAME , php_wxHyperlinkEvent_functions);
	php_wxHyperlinkEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHyperlinkEvent = zend_register_list_destructors_ex(php_wxHyperlinkEvent_destruction_handler, NULL, le_wxHyperlinkEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCursor_NAME , php_wxCursor_functions);
	php_wxCursor_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCursor = zend_register_list_destructors_ex(php_wxCursor_destruction_handler, NULL, le_wxCursor_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxToggleButton_NAME , php_wxToggleButton_functions);
	php_wxToggleButton_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxToggleButton = zend_register_list_destructors_ex(php_wxToggleButton_destruction_handler, NULL, le_wxToggleButton_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTimer_NAME , php_wxTimer_functions);
	php_wxTimer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTimer = zend_register_list_destructors_ex(php_wxTimer_destruction_handler, NULL, le_wxTimer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTimerEvent_NAME , php_wxTimerEvent_functions);
	php_wxTimerEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTimerEvent = zend_register_list_destructors_ex(php_wxTimerEvent_destruction_handler, NULL, le_wxTimerEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxThreadEvent_NAME , php_wxThreadEvent_functions);
	php_wxThreadEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxThreadEvent = zend_register_list_destructors_ex(php_wxThreadEvent_destruction_handler, NULL, le_wxThreadEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSearchCtrl_NAME , php_wxSearchCtrl_functions);
	php_wxSearchCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSearchCtrl = zend_register_list_destructors_ex(php_wxSearchCtrl_destruction_handler, NULL, le_wxSearchCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxColourPickerEvent_NAME , php_wxColourPickerEvent_functions);
	php_wxColourPickerEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxColourPickerEvent = zend_register_list_destructors_ex(php_wxColourPickerEvent_destruction_handler, NULL, le_wxColourPickerEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxColourPickerCtrl_NAME , php_wxColourPickerCtrl_functions);
	php_wxColourPickerCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxColourPickerCtrl = zend_register_list_destructors_ex(php_wxColourPickerCtrl_destruction_handler, NULL, le_wxColourPickerCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFontPickerCtrl_NAME , php_wxFontPickerCtrl_functions);
	php_wxFontPickerCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFontPickerCtrl = zend_register_list_destructors_ex(php_wxFontPickerCtrl_destruction_handler, NULL, le_wxFontPickerCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFontPickerEvent_NAME , php_wxFontPickerEvent_functions);
	php_wxFontPickerEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFontPickerEvent = zend_register_list_destructors_ex(php_wxFontPickerEvent_destruction_handler, NULL, le_wxFontPickerEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFilePickerCtrl_NAME , php_wxFilePickerCtrl_functions);
	php_wxFilePickerCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFilePickerCtrl = zend_register_list_destructors_ex(php_wxFilePickerCtrl_destruction_handler, NULL, le_wxFilePickerCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFindReplaceDialog_NAME , php_wxFindReplaceDialog_functions);
	php_wxFindReplaceDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFindReplaceDialog = zend_register_list_destructors_ex(php_wxFindReplaceDialog_destruction_handler, NULL, le_wxFindReplaceDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFindReplaceData_NAME , php_wxFindReplaceData_functions);
	php_wxFindReplaceData_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFindReplaceData = zend_register_list_destructors_ex(php_wxFindReplaceData_destruction_handler, NULL, le_wxFindReplaceData_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDirPickerCtrl_NAME , php_wxDirPickerCtrl_functions);
	php_wxDirPickerCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDirPickerCtrl = zend_register_list_destructors_ex(php_wxDirPickerCtrl_destruction_handler, NULL, le_wxDirPickerCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDirDialog_NAME , php_wxDirDialog_functions);
	php_wxDirDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDirDialog = zend_register_list_destructors_ex(php_wxDirDialog_destruction_handler, NULL, le_wxDirDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSpinDoubleEvent_NAME , php_wxSpinDoubleEvent_functions);
	php_wxSpinDoubleEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSpinDoubleEvent = zend_register_list_destructors_ex(php_wxSpinDoubleEvent_destruction_handler, NULL, le_wxSpinDoubleEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSpinCtrlDouble_NAME , php_wxSpinCtrlDouble_functions);
	php_wxSpinCtrlDouble_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSpinCtrlDouble = zend_register_list_destructors_ex(php_wxSpinCtrlDouble_destruction_handler, NULL, le_wxSpinCtrlDouble_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGenericDirCtrl_NAME , php_wxGenericDirCtrl_functions);
	php_wxGenericDirCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGenericDirCtrl = zend_register_list_destructors_ex(php_wxGenericDirCtrl_destruction_handler, NULL, le_wxGenericDirCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileName_NAME , php_wxFileName_functions);
	php_wxFileName_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileName = zend_register_list_destructors_ex(php_wxFileName_destruction_handler, NULL, le_wxFileName_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridSizeEvent_NAME , php_wxGridSizeEvent_functions);
	php_wxGridSizeEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridSizeEvent = zend_register_list_destructors_ex(php_wxGridSizeEvent_destruction_handler, NULL, le_wxGridSizeEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridSizer_NAME , php_wxGridSizer_functions);
	php_wxGridSizer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridSizer = zend_register_list_destructors_ex(php_wxGridSizer_destruction_handler, NULL, le_wxGridSizer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFlexGridSizer_NAME , php_wxFlexGridSizer_functions);
	php_wxFlexGridSizer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFlexGridSizer = zend_register_list_destructors_ex(php_wxFlexGridSizer_destruction_handler, NULL, le_wxFlexGridSizer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridBagSizer_NAME , php_wxGridBagSizer_functions);
	php_wxGridBagSizer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridBagSizer = zend_register_list_destructors_ex(php_wxGridBagSizer_destruction_handler, NULL, le_wxGridBagSizer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStdDialogButtonSizer_NAME , php_wxStdDialogButtonSizer_functions);
	php_wxStdDialogButtonSizer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStdDialogButtonSizer = zend_register_list_destructors_ex(php_wxStdDialogButtonSizer_destruction_handler, NULL, le_wxStdDialogButtonSizer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxScrollEvent_NAME , php_wxScrollEvent_functions);
	php_wxScrollEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxScrollEvent = zend_register_list_destructors_ex(php_wxScrollEvent_destruction_handler, NULL, le_wxScrollEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxScrollWinEvent_NAME , php_wxScrollWinEvent_functions);
	php_wxScrollWinEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxScrollWinEvent = zend_register_list_destructors_ex(php_wxScrollWinEvent_destruction_handler, NULL, le_wxScrollWinEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxNotebook_NAME , php_wxNotebook_functions);
	php_wxNotebook_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxNotebook = zend_register_list_destructors_ex(php_wxNotebook_destruction_handler, NULL, le_wxNotebook_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDialog_NAME , php_wxDialog_functions);
	php_wxDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDialog = zend_register_list_destructors_ex(php_wxDialog_destruction_handler, NULL, le_wxDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSysColourChangedEvent_NAME , php_wxSysColourChangedEvent_functions);
	php_wxSysColourChangedEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSysColourChangedEvent = zend_register_list_destructors_ex(php_wxSysColourChangedEvent_destruction_handler, NULL, le_wxSysColourChangedEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSymbolPickerDialog_NAME , php_wxSymbolPickerDialog_functions);
	php_wxSymbolPickerDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSymbolPickerDialog = zend_register_list_destructors_ex(php_wxSymbolPickerDialog_destruction_handler, NULL, le_wxSymbolPickerDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGBPosition_NAME , php_wxGBPosition_functions);
	php_wxGBPosition_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGBPosition = zend_register_list_destructors_ex(php_wxGBPosition_destruction_handler, NULL, le_wxGBPosition_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGBSpan_NAME , php_wxGBSpan_functions);
	php_wxGBSpan_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGBSpan = zend_register_list_destructors_ex(php_wxGBSpan_destruction_handler, NULL, le_wxGBSpan_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGBSizerItem_NAME , php_wxGBSizerItem_functions);
	php_wxGBSizerItem_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGBSizerItem = zend_register_list_destructors_ex(php_wxGBSizerItem_destruction_handler, NULL, le_wxGBSizerItem_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPopupWindow_NAME , php_wxPopupWindow_functions);
	php_wxPopupWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPopupWindow = zend_register_list_destructors_ex(php_wxPopupWindow_destruction_handler, NULL, le_wxPopupWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMDIChildFrame_NAME , php_wxMDIChildFrame_functions);
	php_wxMDIChildFrame_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMDIChildFrame = zend_register_list_destructors_ex(php_wxMDIChildFrame_destruction_handler, NULL, le_wxMDIChildFrame_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMDIClientWindow_NAME , php_wxMDIClientWindow_functions);
	php_wxMDIClientWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMDIClientWindow = zend_register_list_destructors_ex(php_wxMDIClientWindow_destruction_handler, NULL, le_wxMDIClientWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMDIParentFrame_NAME , php_wxMDIParentFrame_functions);
	php_wxMDIParentFrame_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMDIParentFrame = zend_register_list_destructors_ex(php_wxMDIParentFrame_destruction_handler, NULL, le_wxMDIParentFrame_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMiniFrame_NAME , php_wxMiniFrame_functions);
	php_wxMiniFrame_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMiniFrame = zend_register_list_destructors_ex(php_wxMiniFrame_destruction_handler, NULL, le_wxMiniFrame_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPropertySheetDialog_NAME , php_wxPropertySheetDialog_functions);
	php_wxPropertySheetDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPropertySheetDialog = zend_register_list_destructors_ex(php_wxPropertySheetDialog_destruction_handler, NULL, le_wxPropertySheetDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxWizard_NAME , php_wxWizard_functions);
	php_wxWizard_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxWizard = zend_register_list_destructors_ex(php_wxWizard_destruction_handler, NULL, le_wxWizard_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxWizardEvent_NAME , php_wxWizardEvent_functions);
	php_wxWizardEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxWizardEvent = zend_register_list_destructors_ex(php_wxWizardEvent_destruction_handler, NULL, le_wxWizardEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxWizardPage_NAME , php_wxWizardPage_functions);
	php_wxWizardPage_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxWizardPage = zend_register_list_destructors_ex(php_wxWizardPage_destruction_handler, NULL, le_wxWizardPage_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxWizardPageSimple_NAME , php_wxWizardPageSimple_functions);
	php_wxWizardPageSimple_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxWizardPageSimple = zend_register_list_destructors_ex(php_wxWizardPageSimple_destruction_handler, NULL, le_wxWizardPageSimple_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxWindowModalDialogEvent_NAME , php_wxWindowModalDialogEvent_functions);
	php_wxWindowModalDialogEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxWindowModalDialogEvent = zend_register_list_destructors_ex(php_wxWindowModalDialogEvent_destruction_handler, NULL, le_wxWindowModalDialogEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTreeListItem_NAME , php_wxTreeListItem_functions);
	php_wxTreeListItem_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTreeListItem = zend_register_list_destructors_ex(php_wxTreeListItem_destruction_handler, NULL, le_wxTreeListItem_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTreebook_NAME , php_wxTreebook_functions);
	php_wxTreebook_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTreebook = zend_register_list_destructors_ex(php_wxTreebook_destruction_handler, NULL, le_wxTreebook_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTreeListCtrl_NAME , php_wxTreeListCtrl_functions);
	php_wxTreeListCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTreeListCtrl = zend_register_list_destructors_ex(php_wxTreeListCtrl_destruction_handler, NULL, le_wxTreeListCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSound_NAME , php_wxSound_functions);
	php_wxSound_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSound = zend_register_list_destructors_ex(php_wxSound_destruction_handler, NULL, le_wxSound_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSimpleHtmlListBox_NAME , php_wxSimpleHtmlListBox_functions);
	php_wxSimpleHtmlListBox_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSimpleHtmlListBox = zend_register_list_destructors_ex(php_wxSimpleHtmlListBox_destruction_handler, NULL, le_wxSimpleHtmlListBox_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileSystem_NAME , php_wxFileSystem_functions);
	php_wxFileSystem_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileSystem = zend_register_list_destructors_ex(php_wxFileSystem_destruction_handler, NULL, le_wxFileSystem_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileSystemHandler_NAME , php_wxFileSystemHandler_functions);
	php_wxFileSystemHandler_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileSystemHandler = zend_register_list_destructors_ex(php_wxFileSystemHandler_destruction_handler, NULL, le_wxFileSystemHandler_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxNativeFontInfo_NAME , php_wxNativeFontInfo_functions);
	php_wxNativeFontInfo_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxNativeFontInfo = zend_register_list_destructors_ex(php_wxNativeFontInfo_destruction_handler, NULL, le_wxNativeFontInfo_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDateEvent_NAME , php_wxDateEvent_functions);
	php_wxDateEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDateEvent = zend_register_list_destructors_ex(php_wxDateEvent_destruction_handler, NULL, le_wxDateEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBitmapToggleButton_NAME , php_wxBitmapToggleButton_functions);
	php_wxBitmapToggleButton_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBitmapToggleButton = zend_register_list_destructors_ex(php_wxBitmapToggleButton_destruction_handler, NULL, le_wxBitmapToggleButton_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCalendarDateAttr_NAME , php_wxCalendarDateAttr_functions);
	php_wxCalendarDateAttr_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCalendarDateAttr = zend_register_list_destructors_ex(php_wxCalendarDateAttr_destruction_handler, NULL, le_wxCalendarDateAttr_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCalendarCtrl_NAME , php_wxCalendarCtrl_functions);
	php_wxCalendarCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCalendarCtrl = zend_register_list_destructors_ex(php_wxCalendarCtrl_destruction_handler, NULL, le_wxCalendarCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMask_NAME , php_wxMask_functions);
	php_wxMask_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMask = zend_register_list_destructors_ex(php_wxMask_destruction_handler, NULL, le_wxMask_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxToolTip_NAME , php_wxToolTip_functions);
	php_wxToolTip_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxToolTip = zend_register_list_destructors_ex(php_wxToolTip_destruction_handler, NULL, le_wxToolTip_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCaret_NAME , php_wxCaret_functions);
	php_wxCaret_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCaret = zend_register_list_destructors_ex(php_wxCaret_destruction_handler, NULL, le_wxCaret_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRegion_NAME , php_wxRegion_functions);
	php_wxRegion_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRegion = zend_register_list_destructors_ex(php_wxRegion_destruction_handler, NULL, le_wxRegion_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPoint2DDouble_NAME , php_wxPoint2DDouble_functions);
	php_wxPoint2DDouble_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPoint2DDouble = zend_register_list_destructors_ex(php_wxPoint2DDouble_destruction_handler, NULL, le_wxPoint2DDouble_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPoint2DInt_NAME , php_wxPoint2DInt_functions);
	php_wxPoint2DInt_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPoint2DInt = zend_register_list_destructors_ex(php_wxPoint2DInt_destruction_handler, NULL, le_wxPoint2DInt_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPopupTransientWindow_NAME , php_wxPopupTransientWindow_functions);
	php_wxPopupTransientWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPopupTransientWindow = zend_register_list_destructors_ex(php_wxPopupTransientWindow_destruction_handler, NULL, le_wxPopupTransientWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxProcessEvent_NAME , php_wxProcessEvent_functions);
	php_wxProcessEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxProcessEvent = zend_register_list_destructors_ex(php_wxProcessEvent_destruction_handler, NULL, le_wxProcessEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxProgressDialog_NAME , php_wxProgressDialog_functions);
	php_wxProgressDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxProgressDialog = zend_register_list_destructors_ex(php_wxProgressDialog_destruction_handler, NULL, le_wxProgressDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGraphicsMatrix_NAME , php_wxGraphicsMatrix_functions);
	php_wxGraphicsMatrix_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGraphicsMatrix = zend_register_list_destructors_ex(php_wxGraphicsMatrix_destruction_handler, NULL, le_wxGraphicsMatrix_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGraphicsRenderer_NAME , php_wxGraphicsRenderer_functions);
	php_wxGraphicsRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGraphicsRenderer = zend_register_list_destructors_ex(php_wxGraphicsRenderer_destruction_handler, NULL, le_wxGraphicsRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxWindowDC_NAME , php_wxWindowDC_functions);
	php_wxWindowDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxWindowDC = zend_register_list_destructors_ex(php_wxWindowDC_destruction_handler, NULL, le_wxWindowDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxWindowCreateEvent_NAME , php_wxWindowCreateEvent_functions);
	php_wxWindowCreateEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxWindowCreateEvent = zend_register_list_destructors_ex(php_wxWindowCreateEvent_destruction_handler, NULL, le_wxWindowCreateEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxWindowDestroyEvent_NAME , php_wxWindowDestroyEvent_functions);
	php_wxWindowDestroyEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxWindowDestroyEvent = zend_register_list_destructors_ex(php_wxWindowDestroyEvent_destruction_handler, NULL, le_wxWindowDestroyEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGraphicsGradientStop_NAME , php_wxGraphicsGradientStop_functions);
	php_wxGraphicsGradientStop_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGraphicsGradientStop = zend_register_list_destructors_ex(php_wxGraphicsGradientStop_destruction_handler, NULL, le_wxGraphicsGradientStop_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGraphicsGradientStops_NAME , php_wxGraphicsGradientStops_functions);
	php_wxGraphicsGradientStops_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGraphicsGradientStops = zend_register_list_destructors_ex(php_wxGraphicsGradientStops_destruction_handler, NULL, le_wxGraphicsGradientStops_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxEventFilter_NAME , php_wxEventFilter_functions);
	php_wxEventFilter_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxEventFilter = zend_register_list_destructors_ex(php_wxEventFilter_destruction_handler, NULL, le_wxEventFilter_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxEventBlocker_NAME , php_wxEventBlocker_functions);
	php_wxEventBlocker_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxEventBlocker = zend_register_list_destructors_ex(php_wxEventBlocker_destruction_handler, NULL, le_wxEventBlocker_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxEraseEvent_NAME , php_wxEraseEvent_functions);
	php_wxEraseEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxEraseEvent = zend_register_list_destructors_ex(php_wxEraseEvent_destruction_handler, NULL, le_wxEraseEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxEventLoopActivator_NAME , php_wxEventLoopActivator_functions);
	php_wxEventLoopActivator_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxEventLoopActivator = zend_register_list_destructors_ex(php_wxEventLoopActivator_destruction_handler, NULL, le_wxEventLoopActivator_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxEventLoopBase_NAME , php_wxEventLoopBase_functions);
	php_wxEventLoopBase_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxEventLoopBase = zend_register_list_destructors_ex(php_wxEventLoopBase_destruction_handler, NULL, le_wxEventLoopBase_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPickerBase_NAME , php_wxPickerBase_functions);
	php_wxPickerBase_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPickerBase = zend_register_list_destructors_ex(php_wxPickerBase_destruction_handler, NULL, le_wxPickerBase_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridEvent_NAME , php_wxGridEvent_functions);
	php_wxGridEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridEvent = zend_register_list_destructors_ex(php_wxGridEvent_destruction_handler, NULL, le_wxGridEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxUpdateUIEvent_NAME , php_wxUpdateUIEvent_functions);
	php_wxUpdateUIEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxUpdateUIEvent = zend_register_list_destructors_ex(php_wxUpdateUIEvent_destruction_handler, NULL, le_wxUpdateUIEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHelpEvent_NAME , php_wxHelpEvent_functions);
	php_wxHelpEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHelpEvent = zend_register_list_destructors_ex(php_wxHelpEvent_destruction_handler, NULL, le_wxHelpEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxLayoutConstraints_NAME , php_wxLayoutConstraints_functions);
	php_wxLayoutConstraints_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxLayoutConstraints = zend_register_list_destructors_ex(php_wxLayoutConstraints_destruction_handler, NULL, le_wxLayoutConstraints_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDropTarget_NAME , php_wxDropTarget_functions);
	php_wxDropTarget_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDropTarget = zend_register_list_destructors_ex(php_wxDropTarget_destruction_handler, NULL, le_wxDropTarget_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxObject_NAME , php_wxObject_functions);
	php_wxObject_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxObject = zend_register_list_destructors_ex(php_wxObject_destruction_handler, NULL, le_wxObject_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFFile_NAME , php_wxFFile_functions);
	php_wxFFile_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFFile = zend_register_list_destructors_ex(php_wxFFile_destruction_handler, NULL, le_wxFFile_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFSFile_NAME , php_wxFSFile_functions);
	php_wxFSFile_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFSFile = zend_register_list_destructors_ex(php_wxFSFile_destruction_handler, NULL, le_wxFSFile_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxInputStream_NAME , php_wxInputStream_functions);
	php_wxInputStream_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxInputStream = zend_register_list_destructors_ex(php_wxInputStream_destruction_handler, NULL, le_wxInputStream_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStreamBase_NAME , php_wxStreamBase_functions);
	php_wxStreamBase_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStreamBase = zend_register_list_destructors_ex(php_wxStreamBase_destruction_handler, NULL, le_wxStreamBase_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxThread_NAME , php_wxThread_functions);
	php_wxThread_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxThread = zend_register_list_destructors_ex(php_wxThread_destruction_handler, NULL, le_wxThread_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTimePickerCtrl_NAME , php_wxTimePickerCtrl_functions);
	php_wxTimePickerCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTimePickerCtrl = zend_register_list_destructors_ex(php_wxTimePickerCtrl_destruction_handler, NULL, le_wxTimePickerCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxOutputStream_NAME , php_wxOutputStream_functions);
	php_wxOutputStream_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxOutputStream = zend_register_list_destructors_ex(php_wxOutputStream_destruction_handler, NULL, le_wxOutputStream_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxColourDialog_NAME , php_wxColourDialog_functions);
	php_wxColourDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxColourDialog = zend_register_list_destructors_ex(php_wxColourDialog_destruction_handler, NULL, le_wxColourDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxColourData_NAME , php_wxColourData_functions);
	php_wxColourData_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxColourData = zend_register_list_destructors_ex(php_wxColourData_destruction_handler, NULL, le_wxColourData_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileDialog_NAME , php_wxFileDialog_functions);
	php_wxFileDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileDialog = zend_register_list_destructors_ex(php_wxFileDialog_destruction_handler, NULL, le_wxFileDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFontData_NAME , php_wxFontData_functions);
	php_wxFontData_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFontData = zend_register_list_destructors_ex(php_wxFontData_destruction_handler, NULL, le_wxFontData_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFontDialog_NAME , php_wxFontDialog_functions);
	php_wxFontDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFontDialog = zend_register_list_destructors_ex(php_wxFontDialog_destruction_handler, NULL, le_wxFontDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxThreadHelper_NAME , php_wxThreadHelper_functions);
	php_wxThreadHelper_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxThreadHelper = zend_register_list_destructors_ex(php_wxThreadHelper_destruction_handler, NULL, le_wxThreadHelper_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxToolBar_NAME , php_wxToolBar_functions);
	php_wxToolBar_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxToolBar = zend_register_list_destructors_ex(php_wxToolBar_destruction_handler, NULL, le_wxToolBar_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiTabArt_NAME , php_wxAuiTabArt_functions);
	php_wxAuiTabArt_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiTabArt = zend_register_list_destructors_ex(php_wxAuiTabArt_destruction_handler, NULL, le_wxAuiTabArt_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxToolBarToolBase_NAME , php_wxToolBarToolBase_functions);
	php_wxToolBarToolBase_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxToolBarToolBase = zend_register_list_destructors_ex(php_wxToolBarToolBase_destruction_handler, NULL, le_wxToolBarToolBase_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCalendarEvent_NAME , php_wxCalendarEvent_functions);
	php_wxCalendarEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCalendarEvent = zend_register_list_destructors_ex(php_wxCalendarEvent_destruction_handler, NULL, le_wxCalendarEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGrid_NAME , php_wxGrid_functions);
	php_wxGrid_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGrid = zend_register_list_destructors_ex(php_wxGrid_destruction_handler, NULL, le_wxGrid_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellAttr_NAME , php_wxGridCellAttr_functions);
	php_wxGridCellAttr_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellAttr = zend_register_list_destructors_ex(php_wxGridCellAttr_destruction_handler, NULL, le_wxGridCellAttr_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellAttrProvider_NAME , php_wxGridCellAttrProvider_functions);
	php_wxGridCellAttrProvider_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellAttrProvider = zend_register_list_destructors_ex(php_wxGridCellAttrProvider_destruction_handler, NULL, le_wxGridCellAttrProvider_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellBoolEditor_NAME , php_wxGridCellBoolEditor_functions);
	php_wxGridCellBoolEditor_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellBoolEditor = zend_register_list_destructors_ex(php_wxGridCellBoolEditor_destruction_handler, NULL, le_wxGridCellBoolEditor_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellChoiceEditor_NAME , php_wxGridCellChoiceEditor_functions);
	php_wxGridCellChoiceEditor_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellChoiceEditor = zend_register_list_destructors_ex(php_wxGridCellChoiceEditor_destruction_handler, NULL, le_wxGridCellChoiceEditor_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellDateTimeRenderer_NAME , php_wxGridCellDateTimeRenderer_functions);
	php_wxGridCellDateTimeRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellDateTimeRenderer = zend_register_list_destructors_ex(php_wxGridCellDateTimeRenderer_destruction_handler, NULL, le_wxGridCellDateTimeRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellBoolRenderer_NAME , php_wxGridCellBoolRenderer_functions);
	php_wxGridCellBoolRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellBoolRenderer = zend_register_list_destructors_ex(php_wxGridCellBoolRenderer_destruction_handler, NULL, le_wxGridCellBoolRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellAutoWrapStringRenderer_NAME , php_wxGridCellAutoWrapStringRenderer_functions);
	php_wxGridCellAutoWrapStringRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellAutoWrapStringRenderer = zend_register_list_destructors_ex(php_wxGridCellAutoWrapStringRenderer_destruction_handler, NULL, le_wxGridCellAutoWrapStringRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellAutoWrapStringEditor_NAME , php_wxGridCellAutoWrapStringEditor_functions);
	php_wxGridCellAutoWrapStringEditor_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellAutoWrapStringEditor = zend_register_list_destructors_ex(php_wxGridCellAutoWrapStringEditor_destruction_handler, NULL, le_wxGridCellAutoWrapStringEditor_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellEditor_NAME , php_wxGridCellEditor_functions);
	php_wxGridCellEditor_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellEditor = zend_register_list_destructors_ex(php_wxGridCellEditor_destruction_handler, NULL, le_wxGridCellEditor_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellEnumEditor_NAME , php_wxGridCellEnumEditor_functions);
	php_wxGridCellEnumEditor_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellEnumEditor = zend_register_list_destructors_ex(php_wxGridCellEnumEditor_destruction_handler, NULL, le_wxGridCellEnumEditor_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellEnumRenderer_NAME , php_wxGridCellEnumRenderer_functions);
	php_wxGridCellEnumRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellEnumRenderer = zend_register_list_destructors_ex(php_wxGridCellEnumRenderer_destruction_handler, NULL, le_wxGridCellEnumRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellFloatEditor_NAME , php_wxGridCellFloatEditor_functions);
	php_wxGridCellFloatEditor_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellFloatEditor = zend_register_list_destructors_ex(php_wxGridCellFloatEditor_destruction_handler, NULL, le_wxGridCellFloatEditor_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellFloatRenderer_NAME , php_wxGridCellFloatRenderer_functions);
	php_wxGridCellFloatRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellFloatRenderer = zend_register_list_destructors_ex(php_wxGridCellFloatRenderer_destruction_handler, NULL, le_wxGridCellFloatRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellNumberEditor_NAME , php_wxGridCellNumberEditor_functions);
	php_wxGridCellNumberEditor_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellNumberEditor = zend_register_list_destructors_ex(php_wxGridCellNumberEditor_destruction_handler, NULL, le_wxGridCellNumberEditor_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellNumberRenderer_NAME , php_wxGridCellNumberRenderer_functions);
	php_wxGridCellNumberRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellNumberRenderer = zend_register_list_destructors_ex(php_wxGridCellNumberRenderer_destruction_handler, NULL, le_wxGridCellNumberRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellRenderer_NAME , php_wxGridCellRenderer_functions);
	php_wxGridCellRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellRenderer = zend_register_list_destructors_ex(php_wxGridCellRenderer_destruction_handler, NULL, le_wxGridCellRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellStringRenderer_NAME , php_wxGridCellStringRenderer_functions);
	php_wxGridCellStringRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellStringRenderer = zend_register_list_destructors_ex(php_wxGridCellStringRenderer_destruction_handler, NULL, le_wxGridCellStringRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellTextEditor_NAME , php_wxGridCellTextEditor_functions);
	php_wxGridCellTextEditor_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellTextEditor = zend_register_list_destructors_ex(php_wxGridCellTextEditor_destruction_handler, NULL, le_wxGridCellTextEditor_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridColumnHeaderRenderer_NAME , php_wxGridColumnHeaderRenderer_functions);
	php_wxGridColumnHeaderRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridColumnHeaderRenderer = zend_register_list_destructors_ex(php_wxGridColumnHeaderRenderer_destruction_handler, NULL, le_wxGridColumnHeaderRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridColumnHeaderRendererDefault_NAME , php_wxGridColumnHeaderRendererDefault_functions);
	php_wxGridColumnHeaderRendererDefault_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridColumnHeaderRendererDefault = zend_register_list_destructors_ex(php_wxGridColumnHeaderRendererDefault_destruction_handler, NULL, le_wxGridColumnHeaderRendererDefault_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCornerHeaderRenderer_NAME , php_wxGridCornerHeaderRenderer_functions);
	php_wxGridCornerHeaderRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCornerHeaderRenderer = zend_register_list_destructors_ex(php_wxGridCornerHeaderRenderer_destruction_handler, NULL, le_wxGridCornerHeaderRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCornerHeaderRendererDefault_NAME , php_wxGridCornerHeaderRendererDefault_functions);
	php_wxGridCornerHeaderRendererDefault_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCornerHeaderRendererDefault = zend_register_list_destructors_ex(php_wxGridCornerHeaderRendererDefault_destruction_handler, NULL, le_wxGridCornerHeaderRendererDefault_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridEditorCreatedEvent_NAME , php_wxGridEditorCreatedEvent_functions);
	php_wxGridEditorCreatedEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridEditorCreatedEvent = zend_register_list_destructors_ex(php_wxGridEditorCreatedEvent_destruction_handler, NULL, le_wxGridEditorCreatedEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridHeaderLabelsRenderer_NAME , php_wxGridHeaderLabelsRenderer_functions);
	php_wxGridHeaderLabelsRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridHeaderLabelsRenderer = zend_register_list_destructors_ex(php_wxGridHeaderLabelsRenderer_destruction_handler, NULL, le_wxGridHeaderLabelsRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridRangeSelectEvent_NAME , php_wxGridRangeSelectEvent_functions);
	php_wxGridRangeSelectEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridRangeSelectEvent = zend_register_list_destructors_ex(php_wxGridRangeSelectEvent_destruction_handler, NULL, le_wxGridRangeSelectEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridRowHeaderRenderer_NAME , php_wxGridRowHeaderRenderer_functions);
	php_wxGridRowHeaderRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridRowHeaderRenderer = zend_register_list_destructors_ex(php_wxGridRowHeaderRenderer_destruction_handler, NULL, le_wxGridRowHeaderRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridRowHeaderRendererDefault_NAME , php_wxGridRowHeaderRendererDefault_functions);
	php_wxGridRowHeaderRendererDefault_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridRowHeaderRendererDefault = zend_register_list_destructors_ex(php_wxGridRowHeaderRendererDefault_destruction_handler, NULL, le_wxGridRowHeaderRendererDefault_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridSizesInfo_NAME , php_wxGridSizesInfo_functions);
	php_wxGridSizesInfo_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridSizesInfo = zend_register_list_destructors_ex(php_wxGridSizesInfo_destruction_handler, NULL, le_wxGridSizesInfo_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridTableBase_NAME , php_wxGridTableBase_functions);
	php_wxGridTableBase_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridTableBase = zend_register_list_destructors_ex(php_wxGridTableBase_destruction_handler, NULL, le_wxGridTableBase_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridUpdateLocker_NAME , php_wxGridUpdateLocker_functions);
	php_wxGridUpdateLocker_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridUpdateLocker = zend_register_list_destructors_ex(php_wxGridUpdateLocker_destruction_handler, NULL, le_wxGridUpdateLocker_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGridCellCoords_NAME , php_wxGridCellCoords_functions);
	php_wxGridCellCoords_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGridCellCoords = zend_register_list_destructors_ex(php_wxGridCellCoords_destruction_handler, NULL, le_wxGridCellCoords_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxScrolledWindow_NAME , php_wxScrolledWindow_functions);
	php_wxScrolledWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxScrolledWindow = zend_register_list_destructors_ex(php_wxScrolledWindow_destruction_handler, NULL, le_wxScrolledWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDatePickerCtrl_NAME , php_wxDatePickerCtrl_functions);
	php_wxDatePickerCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDatePickerCtrl = zend_register_list_destructors_ex(php_wxDatePickerCtrl_destruction_handler, NULL, le_wxDatePickerCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPasswordEntryDialog_NAME , php_wxPasswordEntryDialog_functions);
	php_wxPasswordEntryDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPasswordEntryDialog = zend_register_list_destructors_ex(php_wxPasswordEntryDialog_destruction_handler, NULL, le_wxPasswordEntryDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxScreenDC_NAME , php_wxScreenDC_functions);
	php_wxScreenDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxScreenDC = zend_register_list_destructors_ex(php_wxScreenDC_destruction_handler, NULL, le_wxScreenDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCollapsiblePane_NAME , php_wxCollapsiblePane_functions);
	php_wxCollapsiblePane_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCollapsiblePane = zend_register_list_destructors_ex(php_wxCollapsiblePane_destruction_handler, NULL, le_wxCollapsiblePane_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCollapsiblePaneEvent_NAME , php_wxCollapsiblePaneEvent_functions);
	php_wxCollapsiblePaneEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCollapsiblePaneEvent = zend_register_list_destructors_ex(php_wxCollapsiblePaneEvent_destruction_handler, NULL, le_wxCollapsiblePaneEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxComboCtrl_NAME , php_wxComboCtrl_functions);
	php_wxComboCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxComboCtrl = zend_register_list_destructors_ex(php_wxComboCtrl_destruction_handler, NULL, le_wxComboCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxComboPopup_NAME , php_wxComboPopup_functions);
	php_wxComboPopup_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxComboPopup = zend_register_list_destructors_ex(php_wxComboPopup_destruction_handler, NULL, le_wxComboPopup_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewCtrl_NAME , php_wxDataViewCtrl_functions);
	php_wxDataViewCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewCtrl = zend_register_list_destructors_ex(php_wxDataViewCtrl_destruction_handler, NULL, le_wxDataViewCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewItem_NAME , php_wxDataViewItem_functions);
	php_wxDataViewItem_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewItem = zend_register_list_destructors_ex(php_wxDataViewItem_destruction_handler, NULL, le_wxDataViewItem_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewColumn_NAME , php_wxDataViewColumn_functions);
	php_wxDataViewColumn_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewColumn = zend_register_list_destructors_ex(php_wxDataViewColumn_destruction_handler, NULL, le_wxDataViewColumn_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewRenderer_NAME , php_wxDataViewRenderer_functions);
	php_wxDataViewRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewRenderer = zend_register_list_destructors_ex(php_wxDataViewRenderer_destruction_handler, NULL, le_wxDataViewRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewModel_NAME , php_wxDataViewModel_functions);
	php_wxDataViewModel_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewModel = zend_register_list_destructors_ex(php_wxDataViewModel_destruction_handler, NULL, le_wxDataViewModel_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewModelNotifier_NAME , php_wxDataViewModelNotifier_functions);
	php_wxDataViewModelNotifier_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewModelNotifier = zend_register_list_destructors_ex(php_wxDataViewModelNotifier_destruction_handler, NULL, le_wxDataViewModelNotifier_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRefCounter_NAME , php_wxRefCounter_functions);
	php_wxRefCounter_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRefCounter = zend_register_list_destructors_ex(php_wxRefCounter_destruction_handler, NULL, le_wxRefCounter_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewListCtrl_NAME , php_wxDataViewListCtrl_functions);
	php_wxDataViewListCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewListCtrl = zend_register_list_destructors_ex(php_wxDataViewListCtrl_destruction_handler, NULL, le_wxDataViewListCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewListStore_NAME , php_wxDataViewListStore_functions);
	php_wxDataViewListStore_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewListStore = zend_register_list_destructors_ex(php_wxDataViewListStore_destruction_handler, NULL, le_wxDataViewListStore_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewListModel_NAME , php_wxDataViewListModel_functions);
	php_wxDataViewListModel_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewListModel = zend_register_list_destructors_ex(php_wxDataViewListModel_destruction_handler, NULL, le_wxDataViewListModel_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewEvent_NAME , php_wxDataViewEvent_functions);
	php_wxDataViewEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewEvent = zend_register_list_destructors_ex(php_wxDataViewEvent_destruction_handler, NULL, le_wxDataViewEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataFormat_NAME , php_wxDataFormat_functions);
	php_wxDataFormat_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataFormat = zend_register_list_destructors_ex(php_wxDataFormat_destruction_handler, NULL, le_wxDataFormat_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataInputStream_NAME , php_wxDataInputStream_functions);
	php_wxDataInputStream_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataInputStream = zend_register_list_destructors_ex(php_wxDataInputStream_destruction_handler, NULL, le_wxDataInputStream_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataObject_NAME , php_wxDataObject_functions);
	php_wxDataObject_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataObject = zend_register_list_destructors_ex(php_wxDataObject_destruction_handler, NULL, le_wxDataObject_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataObjectComposite_NAME , php_wxDataObjectComposite_functions);
	php_wxDataObjectComposite_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataObjectComposite = zend_register_list_destructors_ex(php_wxDataObjectComposite_destruction_handler, NULL, le_wxDataObjectComposite_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataObjectSimple_NAME , php_wxDataObjectSimple_functions);
	php_wxDataObjectSimple_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataObjectSimple = zend_register_list_destructors_ex(php_wxDataObjectSimple_destruction_handler, NULL, le_wxDataObjectSimple_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataOutputStream_NAME , php_wxDataOutputStream_functions);
	php_wxDataOutputStream_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataOutputStream = zend_register_list_destructors_ex(php_wxDataOutputStream_destruction_handler, NULL, le_wxDataOutputStream_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewBitmapRenderer_NAME , php_wxDataViewBitmapRenderer_functions);
	php_wxDataViewBitmapRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewBitmapRenderer = zend_register_list_destructors_ex(php_wxDataViewBitmapRenderer_destruction_handler, NULL, le_wxDataViewBitmapRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewChoiceRenderer_NAME , php_wxDataViewChoiceRenderer_functions);
	php_wxDataViewChoiceRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewChoiceRenderer = zend_register_list_destructors_ex(php_wxDataViewChoiceRenderer_destruction_handler, NULL, le_wxDataViewChoiceRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewCustomRenderer_NAME , php_wxDataViewCustomRenderer_functions);
	php_wxDataViewCustomRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewCustomRenderer = zend_register_list_destructors_ex(php_wxDataViewCustomRenderer_destruction_handler, NULL, le_wxDataViewCustomRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewDateRenderer_NAME , php_wxDataViewDateRenderer_functions);
	php_wxDataViewDateRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewDateRenderer = zend_register_list_destructors_ex(php_wxDataViewDateRenderer_destruction_handler, NULL, le_wxDataViewDateRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewIconText_NAME , php_wxDataViewIconText_functions);
	php_wxDataViewIconText_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewIconText = zend_register_list_destructors_ex(php_wxDataViewIconText_destruction_handler, NULL, le_wxDataViewIconText_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewIconTextRenderer_NAME , php_wxDataViewIconTextRenderer_functions);
	php_wxDataViewIconTextRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewIconTextRenderer = zend_register_list_destructors_ex(php_wxDataViewIconTextRenderer_destruction_handler, NULL, le_wxDataViewIconTextRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewIndexListModel_NAME , php_wxDataViewIndexListModel_functions);
	php_wxDataViewIndexListModel_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewIndexListModel = zend_register_list_destructors_ex(php_wxDataViewIndexListModel_destruction_handler, NULL, le_wxDataViewIndexListModel_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewItemAttr_NAME , php_wxDataViewItemAttr_functions);
	php_wxDataViewItemAttr_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewItemAttr = zend_register_list_destructors_ex(php_wxDataViewItemAttr_destruction_handler, NULL, le_wxDataViewItemAttr_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewProgressRenderer_NAME , php_wxDataViewProgressRenderer_functions);
	php_wxDataViewProgressRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewProgressRenderer = zend_register_list_destructors_ex(php_wxDataViewProgressRenderer_destruction_handler, NULL, le_wxDataViewProgressRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewSpinRenderer_NAME , php_wxDataViewSpinRenderer_functions);
	php_wxDataViewSpinRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewSpinRenderer = zend_register_list_destructors_ex(php_wxDataViewSpinRenderer_destruction_handler, NULL, le_wxDataViewSpinRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewTextRenderer_NAME , php_wxDataViewTextRenderer_functions);
	php_wxDataViewTextRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewTextRenderer = zend_register_list_destructors_ex(php_wxDataViewTextRenderer_destruction_handler, NULL, le_wxDataViewTextRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewToggleRenderer_NAME , php_wxDataViewToggleRenderer_functions);
	php_wxDataViewToggleRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewToggleRenderer = zend_register_list_destructors_ex(php_wxDataViewToggleRenderer_destruction_handler, NULL, le_wxDataViewToggleRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewTreeCtrl_NAME , php_wxDataViewTreeCtrl_functions);
	php_wxDataViewTreeCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewTreeCtrl = zend_register_list_destructors_ex(php_wxDataViewTreeCtrl_destruction_handler, NULL, le_wxDataViewTreeCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewTreeStore_NAME , php_wxDataViewTreeStore_functions);
	php_wxDataViewTreeStore_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewTreeStore = zend_register_list_destructors_ex(php_wxDataViewTreeStore_destruction_handler, NULL, le_wxDataViewTreeStore_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDataViewVirtualListModel_NAME , php_wxDataViewVirtualListModel_functions);
	php_wxDataViewVirtualListModel_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDataViewVirtualListModel = zend_register_list_destructors_ex(php_wxDataViewVirtualListModel_destruction_handler, NULL, le_wxDataViewVirtualListModel_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxVariant_NAME , php_wxVariant_functions);
	php_wxVariant_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxVariant = zend_register_list_destructors_ex(php_wxVariant_destruction_handler, NULL, le_wxVariant_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxVariantData_NAME , php_wxVariantData_functions);
	php_wxVariantData_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxVariantData = zend_register_list_destructors_ex(php_wxVariantData_destruction_handler, NULL, le_wxVariantData_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxClassInfo_NAME , php_wxClassInfo_functions);
	php_wxClassInfo_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxClassInfo = zend_register_list_destructors_ex(php_wxClassInfo_destruction_handler, NULL, le_wxClassInfo_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxColourDatabase_NAME , php_wxColourDatabase_functions);
	php_wxColourDatabase_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxColourDatabase = zend_register_list_destructors_ex(php_wxColourDatabase_destruction_handler, NULL, le_wxColourDatabase_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxClipboard_NAME , php_wxClipboard_functions);
	php_wxClipboard_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxClipboard = zend_register_list_destructors_ex(php_wxClipboard_destruction_handler, NULL, le_wxClipboard_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxClipboardTextEvent_NAME , php_wxClipboardTextEvent_functions);
	php_wxClipboardTextEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxClipboardTextEvent = zend_register_list_destructors_ex(php_wxClipboardTextEvent_destruction_handler, NULL, le_wxClipboardTextEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxListView_NAME , php_wxListView_functions);
	php_wxListView_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxListView = zend_register_list_destructors_ex(php_wxListView_destruction_handler, NULL, le_wxListView_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxConfigBase_NAME , php_wxConfigBase_functions);
	php_wxConfigBase_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxConfigBase = zend_register_list_destructors_ex(php_wxConfigBase_destruction_handler, NULL, le_wxConfigBase_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHeaderCtrlEvent_NAME , php_wxHeaderCtrlEvent_functions);
	php_wxHeaderCtrlEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHeaderCtrlEvent = zend_register_list_destructors_ex(php_wxHeaderCtrlEvent_destruction_handler, NULL, le_wxHeaderCtrlEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHeaderCtrl_NAME , php_wxHeaderCtrl_functions);
	php_wxHeaderCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHeaderCtrl = zend_register_list_destructors_ex(php_wxHeaderCtrl_destruction_handler, NULL, le_wxHeaderCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHeaderColumn_NAME , php_wxHeaderColumn_functions);
	php_wxHeaderColumn_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHeaderColumn = zend_register_list_destructors_ex(php_wxHeaderColumn_destruction_handler, NULL, le_wxHeaderColumn_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHeaderCtrlSimple_NAME , php_wxHeaderCtrlSimple_functions);
	php_wxHeaderCtrlSimple_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHeaderCtrlSimple = zend_register_list_destructors_ex(php_wxHeaderCtrlSimple_destruction_handler, NULL, le_wxHeaderCtrlSimple_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHeaderColumnSimple_NAME , php_wxHeaderColumnSimple_functions);
	php_wxHeaderColumnSimple_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHeaderColumnSimple = zend_register_list_destructors_ex(php_wxHeaderColumnSimple_destruction_handler, NULL, le_wxHeaderColumnSimple_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSettableHeaderColumn_NAME , php_wxSettableHeaderColumn_functions);
	php_wxSettableHeaderColumn_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSettableHeaderColumn = zend_register_list_destructors_ex(php_wxSettableHeaderColumn_destruction_handler, NULL, le_wxSettableHeaderColumn_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSetCursorEvent_NAME , php_wxSetCursorEvent_functions);
	php_wxSetCursorEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSetCursorEvent = zend_register_list_destructors_ex(php_wxSetCursorEvent_destruction_handler, NULL, le_wxSetCursorEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxIconizeEvent_NAME , php_wxIconizeEvent_functions);
	php_wxIconizeEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxIconizeEvent = zend_register_list_destructors_ex(php_wxIconizeEvent_destruction_handler, NULL, le_wxIconizeEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxIdleEvent_NAME , php_wxIdleEvent_functions);
	php_wxIdleEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxIdleEvent = zend_register_list_destructors_ex(php_wxIdleEvent_destruction_handler, NULL, le_wxIdleEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPen_NAME , php_wxPen_functions);
	php_wxPen_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPen = zend_register_list_destructors_ex(php_wxPen_destruction_handler, NULL, le_wxPen_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxEditableListBox_NAME , php_wxEditableListBox_functions);
	php_wxEditableListBox_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxEditableListBox = zend_register_list_destructors_ex(php_wxEditableListBox_destruction_handler, NULL, le_wxEditableListBox_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileCtrlEvent_NAME , php_wxFileCtrlEvent_functions);
	php_wxFileCtrlEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileCtrlEvent = zend_register_list_destructors_ex(php_wxFileCtrlEvent_destruction_handler, NULL, le_wxFileCtrlEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileCtrl_NAME , php_wxFileCtrl_functions);
	php_wxFileCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileCtrl = zend_register_list_destructors_ex(php_wxFileCtrl_destruction_handler, NULL, le_wxFileCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxProcess_NAME , php_wxProcess_functions);
	php_wxProcess_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxProcess = zend_register_list_destructors_ex(php_wxProcess_destruction_handler, NULL, le_wxProcess_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxVarVScrollHelper_NAME , php_wxVarVScrollHelper_functions);
	php_wxVarVScrollHelper_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxVarVScrollHelper = zend_register_list_destructors_ex(php_wxVarVScrollHelper_destruction_handler, NULL, le_wxVarVScrollHelper_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxVarScrollHelperBase_NAME , php_wxVarScrollHelperBase_functions);
	php_wxVarScrollHelperBase_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxVarScrollHelperBase = zend_register_list_destructors_ex(php_wxVarScrollHelperBase_destruction_handler, NULL, le_wxVarScrollHelperBase_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTextValidator_NAME , php_wxTextValidator_functions);
	php_wxTextValidator_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTextValidator = zend_register_list_destructors_ex(php_wxTextValidator_destruction_handler, NULL, le_wxTextValidator_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHScrolledWindow_NAME , php_wxHScrolledWindow_functions);
	php_wxHScrolledWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHScrolledWindow = zend_register_list_destructors_ex(php_wxHScrolledWindow_destruction_handler, NULL, le_wxHScrolledWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxVarHScrollHelper_NAME , php_wxVarHScrollHelper_functions);
	php_wxVarHScrollHelper_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxVarHScrollHelper = zend_register_list_destructors_ex(php_wxVarHScrollHelper_destruction_handler, NULL, le_wxVarHScrollHelper_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxVarHVScrollHelper_NAME , php_wxVarHVScrollHelper_functions);
	php_wxVarHVScrollHelper_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxVarHVScrollHelper = zend_register_list_destructors_ex(php_wxVarHVScrollHelper_destruction_handler, NULL, le_wxVarHVScrollHelper_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxInfoBar_NAME , php_wxInfoBar_functions);
	php_wxInfoBar_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxInfoBar = zend_register_list_destructors_ex(php_wxInfoBar_destruction_handler, NULL, le_wxInfoBar_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRichToolTip_NAME , php_wxRichToolTip_functions);
	php_wxRichToolTip_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRichToolTip = zend_register_list_destructors_ex(php_wxRichToolTip_destruction_handler, NULL, le_wxRichToolTip_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPosition_NAME , php_wxPosition_functions);
	php_wxPosition_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPosition = zend_register_list_destructors_ex(php_wxPosition_destruction_handler, NULL, le_wxPosition_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMutex_NAME , php_wxMutex_functions);
	php_wxMutex_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMutex = zend_register_list_destructors_ex(php_wxMutex_destruction_handler, NULL, le_wxMutex_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMutexLocker_NAME , php_wxMutexLocker_functions);
	php_wxMutexLocker_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMutexLocker = zend_register_list_destructors_ex(php_wxMutexLocker_destruction_handler, NULL, le_wxMutexLocker_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxXmlResource_NAME , php_wxXmlResource_functions);
	php_wxXmlResource_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxXmlResource = zend_register_list_destructors_ex(php_wxXmlResource_destruction_handler, NULL, le_wxXmlResource_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxGenericValidator_NAME , php_wxGenericValidator_functions);
	php_wxGenericValidator_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxGenericValidator = zend_register_list_destructors_ex(php_wxGenericValidator_destruction_handler, NULL, le_wxGenericValidator_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSashWindow_NAME , php_wxSashWindow_functions);
	php_wxSashWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSashWindow = zend_register_list_destructors_ex(php_wxSashWindow_destruction_handler, NULL, le_wxSashWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSashEvent_NAME , php_wxSashEvent_functions);
	php_wxSashEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSashEvent = zend_register_list_destructors_ex(php_wxSashEvent_destruction_handler, NULL, le_wxSashEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSashLayoutWindow_NAME , php_wxSashLayoutWindow_functions);
	php_wxSashLayoutWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSashLayoutWindow = zend_register_list_destructors_ex(php_wxSashLayoutWindow_destruction_handler, NULL, le_wxSashLayoutWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSemaphore_NAME , php_wxSemaphore_functions);
	php_wxSemaphore_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSemaphore = zend_register_list_destructors_ex(php_wxSemaphore_destruction_handler, NULL, le_wxSemaphore_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxShowEvent_NAME , php_wxShowEvent_functions);
	php_wxShowEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxShowEvent = zend_register_list_destructors_ex(php_wxShowEvent_destruction_handler, NULL, le_wxShowEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAuiToolBarArt_NAME , php_wxAuiToolBarArt_functions);
	php_wxAuiToolBarArt_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAuiToolBarArt = zend_register_list_destructors_ex(php_wxAuiToolBarArt_destruction_handler, NULL, le_wxAuiToolBarArt_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBrush_NAME , php_wxBrush_functions);
	php_wxBrush_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBrush = zend_register_list_destructors_ex(php_wxBrush_destruction_handler, NULL, le_wxBrush_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPlatformInfo_NAME , php_wxPlatformInfo_functions);
	php_wxPlatformInfo_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPlatformInfo = zend_register_list_destructors_ex(php_wxPlatformInfo_destruction_handler, NULL, le_wxPlatformInfo_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPageSetupDialog_NAME , php_wxPageSetupDialog_functions);
	php_wxPageSetupDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPageSetupDialog = zend_register_list_destructors_ex(php_wxPageSetupDialog_destruction_handler, NULL, le_wxPageSetupDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPageSetupDialogData_NAME , php_wxPageSetupDialogData_functions);
	php_wxPageSetupDialogData_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPageSetupDialogData = zend_register_list_destructors_ex(php_wxPageSetupDialogData_destruction_handler, NULL, le_wxPageSetupDialogData_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPrintDialog_NAME , php_wxPrintDialog_functions);
	php_wxPrintDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPrintDialog = zend_register_list_destructors_ex(php_wxPrintDialog_destruction_handler, NULL, le_wxPrintDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPrintDialogData_NAME , php_wxPrintDialogData_functions);
	php_wxPrintDialogData_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPrintDialogData = zend_register_list_destructors_ex(php_wxPrintDialogData_destruction_handler, NULL, le_wxPrintDialogData_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPrintData_NAME , php_wxPrintData_functions);
	php_wxPrintData_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPrintData = zend_register_list_destructors_ex(php_wxPrintData_destruction_handler, NULL, le_wxPrintData_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPostScriptDC_NAME , php_wxPostScriptDC_functions);
	php_wxPostScriptDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPostScriptDC = zend_register_list_destructors_ex(php_wxPostScriptDC_destruction_handler, NULL, le_wxPostScriptDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPrintPreview_NAME , php_wxPrintPreview_functions);
	php_wxPrintPreview_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPrintPreview = zend_register_list_destructors_ex(php_wxPrintPreview_destruction_handler, NULL, le_wxPrintPreview_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPrinter_NAME , php_wxPrinter_functions);
	php_wxPrinter_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPrinter = zend_register_list_destructors_ex(php_wxPrinter_destruction_handler, NULL, le_wxPrinter_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPrinterDC_NAME , php_wxPrinterDC_functions);
	php_wxPrinterDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPrinterDC = zend_register_list_destructors_ex(php_wxPrinterDC_destruction_handler, NULL, le_wxPrinterDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPrintout_NAME , php_wxPrintout_functions);
	php_wxPrintout_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPrintout = zend_register_list_destructors_ex(php_wxPrintout_destruction_handler, NULL, le_wxPrintout_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPreviewFrame_NAME , php_wxPreviewFrame_functions);
	php_wxPreviewFrame_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPreviewFrame = zend_register_list_destructors_ex(php_wxPreviewFrame_destruction_handler, NULL, le_wxPreviewFrame_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPreviewControlBar_NAME , php_wxPreviewControlBar_functions);
	php_wxPreviewControlBar_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPreviewControlBar = zend_register_list_destructors_ex(php_wxPreviewControlBar_destruction_handler, NULL, le_wxPreviewControlBar_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPreviewCanvas_NAME , php_wxPreviewCanvas_functions);
	php_wxPreviewCanvas_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPreviewCanvas = zend_register_list_destructors_ex(php_wxPreviewCanvas_destruction_handler, NULL, le_wxPreviewCanvas_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSingleChoiceDialog_NAME , php_wxSingleChoiceDialog_functions);
	php_wxSingleChoiceDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSingleChoiceDialog = zend_register_list_destructors_ex(php_wxSingleChoiceDialog_destruction_handler, NULL, le_wxSingleChoiceDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlDCRenderer_NAME , php_wxHtmlDCRenderer_functions);
	php_wxHtmlDCRenderer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlDCRenderer = zend_register_list_destructors_ex(php_wxHtmlDCRenderer_destruction_handler, NULL, le_wxHtmlDCRenderer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlFilter_NAME , php_wxHtmlFilter_functions);
	php_wxHtmlFilter_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlFilter = zend_register_list_destructors_ex(php_wxHtmlFilter_destruction_handler, NULL, le_wxHtmlFilter_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlHelpController_NAME , php_wxHtmlHelpController_functions);
	php_wxHtmlHelpController_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlHelpController = zend_register_list_destructors_ex(php_wxHtmlHelpController_destruction_handler, NULL, le_wxHtmlHelpController_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlHelpData_NAME , php_wxHtmlHelpData_functions);
	php_wxHtmlHelpData_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlHelpData = zend_register_list_destructors_ex(php_wxHtmlHelpData_destruction_handler, NULL, le_wxHtmlHelpData_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlHelpDialog_NAME , php_wxHtmlHelpDialog_functions);
	php_wxHtmlHelpDialog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlHelpDialog = zend_register_list_destructors_ex(php_wxHtmlHelpDialog_destruction_handler, NULL, le_wxHtmlHelpDialog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlHelpFrame_NAME , php_wxHtmlHelpFrame_functions);
	php_wxHtmlHelpFrame_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlHelpFrame = zend_register_list_destructors_ex(php_wxHtmlHelpFrame_destruction_handler, NULL, le_wxHtmlHelpFrame_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlHelpWindow_NAME , php_wxHtmlHelpWindow_functions);
	php_wxHtmlHelpWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlHelpWindow = zend_register_list_destructors_ex(php_wxHtmlHelpWindow_destruction_handler, NULL, le_wxHtmlHelpWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlModalHelp_NAME , php_wxHtmlModalHelp_functions);
	php_wxHtmlModalHelp_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlModalHelp = zend_register_list_destructors_ex(php_wxHtmlModalHelp_destruction_handler, NULL, le_wxHtmlModalHelp_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlPrintout_NAME , php_wxHtmlPrintout_functions);
	php_wxHtmlPrintout_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlPrintout = zend_register_list_destructors_ex(php_wxHtmlPrintout_destruction_handler, NULL, le_wxHtmlPrintout_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlRenderingInfo_NAME , php_wxHtmlRenderingInfo_functions);
	php_wxHtmlRenderingInfo_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlRenderingInfo = zend_register_list_destructors_ex(php_wxHtmlRenderingInfo_destruction_handler, NULL, le_wxHtmlRenderingInfo_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlRenderingStyle_NAME , php_wxHtmlRenderingStyle_functions);
	php_wxHtmlRenderingStyle_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlRenderingStyle = zend_register_list_destructors_ex(php_wxHtmlRenderingStyle_destruction_handler, NULL, le_wxHtmlRenderingStyle_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlTagHandler_NAME , php_wxHtmlTagHandler_functions);
	php_wxHtmlTagHandler_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlTagHandler = zend_register_list_destructors_ex(php_wxHtmlTagHandler_destruction_handler, NULL, le_wxHtmlTagHandler_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlTagsModule_NAME , php_wxHtmlTagsModule_functions);
	php_wxHtmlTagsModule_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlTagsModule = zend_register_list_destructors_ex(php_wxHtmlTagsModule_destruction_handler, NULL, le_wxHtmlTagsModule_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxModule_NAME , php_wxModule_functions);
	php_wxModule_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxModule = zend_register_list_destructors_ex(php_wxModule_destruction_handler, NULL, le_wxModule_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlWidgetCell_NAME , php_wxHtmlWidgetCell_functions);
	php_wxHtmlWidgetCell_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlWidgetCell = zend_register_list_destructors_ex(php_wxHtmlWidgetCell_destruction_handler, NULL, le_wxHtmlWidgetCell_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlWinParser_NAME , php_wxHtmlWinParser_functions);
	php_wxHtmlWinParser_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlWinParser = zend_register_list_destructors_ex(php_wxHtmlWinParser_destruction_handler, NULL, le_wxHtmlWinParser_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxHtmlWinTagHandler_NAME , php_wxHtmlWinTagHandler_functions);
	php_wxHtmlWinTagHandler_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxHtmlWinTagHandler = zend_register_list_destructors_ex(php_wxHtmlWinTagHandler_destruction_handler, NULL, le_wxHtmlWinTagHandler_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxAutoBufferedPaintDC_NAME , php_wxAutoBufferedPaintDC_functions);
	php_wxAutoBufferedPaintDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxAutoBufferedPaintDC = zend_register_list_destructors_ex(php_wxAutoBufferedPaintDC_destruction_handler, NULL, le_wxAutoBufferedPaintDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBufferedDC_NAME , php_wxBufferedDC_functions);
	php_wxBufferedDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBufferedDC = zend_register_list_destructors_ex(php_wxBufferedDC_destruction_handler, NULL, le_wxBufferedDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBufferedPaintDC_NAME , php_wxBufferedPaintDC_functions);
	php_wxBufferedPaintDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBufferedPaintDC = zend_register_list_destructors_ex(php_wxBufferedPaintDC_destruction_handler, NULL, le_wxBufferedPaintDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxClientDC_NAME , php_wxClientDC_functions);
	php_wxClientDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxClientDC = zend_register_list_destructors_ex(php_wxClientDC_destruction_handler, NULL, le_wxClientDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPaintEvent_NAME , php_wxPaintEvent_functions);
	php_wxPaintEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPaintEvent = zend_register_list_destructors_ex(php_wxPaintEvent_destruction_handler, NULL, le_wxPaintEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPaintDC_NAME , php_wxPaintDC_functions);
	php_wxPaintDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPaintDC = zend_register_list_destructors_ex(php_wxPaintDC_destruction_handler, NULL, le_wxPaintDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMemoryDC_NAME , php_wxMemoryDC_functions);
	php_wxMemoryDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMemoryDC = zend_register_list_destructors_ex(php_wxMemoryDC_destruction_handler, NULL, le_wxMemoryDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMirrorDC_NAME , php_wxMirrorDC_functions);
	php_wxMirrorDC_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMirrorDC = zend_register_list_destructors_ex(php_wxMirrorDC_destruction_handler, NULL, le_wxMirrorDC_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDCClipper_NAME , php_wxDCClipper_functions);
	php_wxDCClipper_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDCClipper = zend_register_list_destructors_ex(php_wxDCClipper_destruction_handler, NULL, le_wxDCClipper_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFontList_NAME , php_wxFontList_functions);
	php_wxFontList_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFontList = zend_register_list_destructors_ex(php_wxFontList_destruction_handler, NULL, le_wxFontList_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPenList_NAME , php_wxPenList_functions);
	php_wxPenList_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPenList = zend_register_list_destructors_ex(php_wxPenList_destruction_handler, NULL, le_wxPenList_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPaletteChangedEvent_NAME , php_wxPaletteChangedEvent_functions);
	php_wxPaletteChangedEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPaletteChangedEvent = zend_register_list_destructors_ex(php_wxPaletteChangedEvent_destruction_handler, NULL, le_wxPaletteChangedEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRendererNative_NAME , php_wxRendererNative_functions);
	php_wxRendererNative_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRendererNative = zend_register_list_destructors_ex(php_wxRendererNative_destruction_handler, NULL, le_wxRendererNative_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxImageHandler_NAME , php_wxImageHandler_functions);
	php_wxImageHandler_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxImageHandler = zend_register_list_destructors_ex(php_wxImageHandler_destruction_handler, NULL, le_wxImageHandler_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxInitDialogEvent_NAME , php_wxInitDialogEvent_functions);
	php_wxInitDialogEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxInitDialogEvent = zend_register_list_destructors_ex(php_wxInitDialogEvent_destruction_handler, NULL, le_wxInitDialogEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxMaximizeEvent_NAME , php_wxMaximizeEvent_functions);
	php_wxMaximizeEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxMaximizeEvent = zend_register_list_destructors_ex(php_wxMaximizeEvent_destruction_handler, NULL, le_wxMaximizeEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxNavigationKeyEvent_NAME , php_wxNavigationKeyEvent_functions);
	php_wxNavigationKeyEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxNavigationKeyEvent = zend_register_list_destructors_ex(php_wxNavigationKeyEvent_destruction_handler, NULL, le_wxNavigationKeyEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxPathList_NAME , php_wxPathList_functions);
	php_wxPathList_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxPathList = zend_register_list_destructors_ex(php_wxPathList_destruction_handler, NULL, le_wxPathList_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCriticalSection_NAME , php_wxCriticalSection_functions);
	php_wxCriticalSection_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCriticalSection = zend_register_list_destructors_ex(php_wxCriticalSection_destruction_handler, NULL, le_wxCriticalSection_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCriticalSectionLocker_NAME , php_wxCriticalSectionLocker_functions);
	php_wxCriticalSectionLocker_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCriticalSectionLocker = zend_register_list_destructors_ex(php_wxCriticalSectionLocker_destruction_handler, NULL, le_wxCriticalSectionLocker_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCondition_NAME , php_wxCondition_functions);
	php_wxCondition_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCondition = zend_register_list_destructors_ex(php_wxCondition_destruction_handler, NULL, le_wxCondition_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBusyCursor_NAME , php_wxBusyCursor_functions);
	php_wxBusyCursor_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBusyCursor = zend_register_list_destructors_ex(php_wxBusyCursor_destruction_handler, NULL, le_wxBusyCursor_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBusyInfo_NAME , php_wxBusyInfo_functions);
	php_wxBusyInfo_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBusyInfo = zend_register_list_destructors_ex(php_wxBusyInfo_destruction_handler, NULL, le_wxBusyInfo_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxXmlResourceHandler_NAME , php_wxXmlResourceHandler_functions);
	php_wxXmlResourceHandler_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxXmlResourceHandler = zend_register_list_destructors_ex(php_wxXmlResourceHandler_destruction_handler, NULL, le_wxXmlResourceHandler_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxXmlNode_NAME , php_wxXmlNode_functions);
	php_wxXmlNode_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxXmlNode = zend_register_list_destructors_ex(php_wxXmlNode_destruction_handler, NULL, le_wxXmlNode_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxXmlDocument_NAME , php_wxXmlDocument_functions);
	php_wxXmlDocument_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxXmlDocument = zend_register_list_destructors_ex(php_wxXmlDocument_destruction_handler, NULL, le_wxXmlDocument_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxXmlAttribute_NAME , php_wxXmlAttribute_functions);
	php_wxXmlAttribute_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxXmlAttribute = zend_register_list_destructors_ex(php_wxXmlAttribute_destruction_handler, NULL, le_wxXmlAttribute_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxLayoutAlgorithm_NAME , php_wxLayoutAlgorithm_functions);
	php_wxLayoutAlgorithm_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxLayoutAlgorithm = zend_register_list_destructors_ex(php_wxLayoutAlgorithm_destruction_handler, NULL, le_wxLayoutAlgorithm_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxJoystick_NAME , php_wxJoystick_functions);
	php_wxJoystick_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxJoystick = zend_register_list_destructors_ex(php_wxJoystick_destruction_handler, NULL, le_wxJoystick_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxJoystickEvent_NAME , php_wxJoystickEvent_functions);
	php_wxJoystickEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxJoystickEvent = zend_register_list_destructors_ex(php_wxJoystickEvent_destruction_handler, NULL, le_wxJoystickEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFocusEvent_NAME , php_wxFocusEvent_functions);
	php_wxFocusEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFocusEvent = zend_register_list_destructors_ex(php_wxFocusEvent_destruction_handler, NULL, le_wxFocusEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFontMapper_NAME , php_wxFontMapper_functions);
	php_wxFontMapper_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFontMapper = zend_register_list_destructors_ex(php_wxFontMapper_destruction_handler, NULL, le_wxFontMapper_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFontEnumerator_NAME , php_wxFontEnumerator_functions);
	php_wxFontEnumerator_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFontEnumerator = zend_register_list_destructors_ex(php_wxFontEnumerator_destruction_handler, NULL, le_wxFontEnumerator_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFFileInputStream_NAME , php_wxFFileInputStream_functions);
	php_wxFFileInputStream_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFFileInputStream = zend_register_list_destructors_ex(php_wxFFileInputStream_destruction_handler, NULL, le_wxFFileInputStream_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFFileOutputStream_NAME , php_wxFFileOutputStream_functions);
	php_wxFFileOutputStream_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFFileOutputStream = zend_register_list_destructors_ex(php_wxFFileOutputStream_destruction_handler, NULL, le_wxFFileOutputStream_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFFileStream_NAME , php_wxFFileStream_functions);
	php_wxFFileStream_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFFileStream = zend_register_list_destructors_ex(php_wxFFileStream_destruction_handler, NULL, le_wxFFileStream_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFile_NAME , php_wxFile_functions);
	php_wxFile_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFile = zend_register_list_destructors_ex(php_wxFile_destruction_handler, NULL, le_wxFile_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileConfig_NAME , php_wxFileConfig_functions);
	php_wxFileConfig_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileConfig = zend_register_list_destructors_ex(php_wxFileConfig_destruction_handler, NULL, le_wxFileConfig_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileDirPickerEvent_NAME , php_wxFileDirPickerEvent_functions);
	php_wxFileDirPickerEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileDirPickerEvent = zend_register_list_destructors_ex(php_wxFileDirPickerEvent_destruction_handler, NULL, le_wxFileDirPickerEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileHistory_NAME , php_wxFileHistory_functions);
	php_wxFileHistory_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileHistory = zend_register_list_destructors_ex(php_wxFileHistory_destruction_handler, NULL, le_wxFileHistory_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileInputStream_NAME , php_wxFileInputStream_functions);
	php_wxFileInputStream_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileInputStream = zend_register_list_destructors_ex(php_wxFileInputStream_destruction_handler, NULL, le_wxFileInputStream_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileDropTarget_NAME , php_wxFileDropTarget_functions);
	php_wxFileDropTarget_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileDropTarget = zend_register_list_destructors_ex(php_wxFileDropTarget_destruction_handler, NULL, le_wxFileDropTarget_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileOutputStream_NAME , php_wxFileOutputStream_functions);
	php_wxFileOutputStream_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileOutputStream = zend_register_list_destructors_ex(php_wxFileOutputStream_destruction_handler, NULL, le_wxFileOutputStream_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileStream_NAME , php_wxFileStream_functions);
	php_wxFileStream_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileStream = zend_register_list_destructors_ex(php_wxFileStream_destruction_handler, NULL, le_wxFileStream_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileSystemWatcher_NAME , php_wxFileSystemWatcher_functions);
	php_wxFileSystemWatcher_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileSystemWatcher = zend_register_list_destructors_ex(php_wxFileSystemWatcher_destruction_handler, NULL, le_wxFileSystemWatcher_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileSystemWatcherEvent_NAME , php_wxFileSystemWatcherEvent_functions);
	php_wxFileSystemWatcherEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileSystemWatcherEvent = zend_register_list_destructors_ex(php_wxFileSystemWatcherEvent_destruction_handler, NULL, le_wxFileSystemWatcherEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileType_NAME , php_wxFileType_functions);
	php_wxFileType_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileType = zend_register_list_destructors_ex(php_wxFileType_destruction_handler, NULL, le_wxFileType_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileTypeInfo_NAME , php_wxFileTypeInfo_functions);
	php_wxFileTypeInfo_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileTypeInfo = zend_register_list_destructors_ex(php_wxFileTypeInfo_destruction_handler, NULL, le_wxFileTypeInfo_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStopWatch_NAME , php_wxStopWatch_functions);
	php_wxStopWatch_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStopWatch = zend_register_list_destructors_ex(php_wxStopWatch_destruction_handler, NULL, le_wxStopWatch_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxSingleInstanceChecker_NAME , php_wxSingleInstanceChecker_functions);
	php_wxSingleInstanceChecker_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxSingleInstanceChecker = zend_register_list_destructors_ex(php_wxSingleInstanceChecker_destruction_handler, NULL, le_wxSingleInstanceChecker_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxStandardPaths_NAME , php_wxStandardPaths_functions);
	php_wxStandardPaths_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxStandardPaths = zend_register_list_destructors_ex(php_wxStandardPaths_destruction_handler, NULL, le_wxStandardPaths_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxLog_NAME , php_wxLog_functions);
	php_wxLog_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxLog = zend_register_list_destructors_ex(php_wxLog_destruction_handler, NULL, le_wxLog_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxLogBuffer_NAME , php_wxLogBuffer_functions);
	php_wxLogBuffer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxLogBuffer = zend_register_list_destructors_ex(php_wxLogBuffer_destruction_handler, NULL, le_wxLogBuffer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxLogChain_NAME , php_wxLogChain_functions);
	php_wxLogChain_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxLogChain = zend_register_list_destructors_ex(php_wxLogChain_destruction_handler, NULL, le_wxLogChain_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxLogGui_NAME , php_wxLogGui_functions);
	php_wxLogGui_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxLogGui = zend_register_list_destructors_ex(php_wxLogGui_destruction_handler, NULL, le_wxLogGui_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxLogInterposer_NAME , php_wxLogInterposer_functions);
	php_wxLogInterposer_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxLogInterposer = zend_register_list_destructors_ex(php_wxLogInterposer_destruction_handler, NULL, le_wxLogInterposer_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxLogWindow_NAME , php_wxLogWindow_functions);
	php_wxLogWindow_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxLogWindow = zend_register_list_destructors_ex(php_wxLogWindow_destruction_handler, NULL, le_wxLogWindow_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxLogTextCtrl_NAME , php_wxLogTextCtrl_functions);
	php_wxLogTextCtrl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxLogTextCtrl = zend_register_list_destructors_ex(php_wxLogTextCtrl_destruction_handler, NULL, le_wxLogTextCtrl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTextDataObject_NAME , php_wxTextDataObject_functions);
	php_wxTextDataObject_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTextDataObject = zend_register_list_destructors_ex(php_wxTextDataObject_destruction_handler, NULL, le_wxTextDataObject_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxFileDataObject_NAME , php_wxFileDataObject_functions);
	php_wxFileDataObject_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxFileDataObject = zend_register_list_destructors_ex(php_wxFileDataObject_destruction_handler, NULL, le_wxFileDataObject_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxBitmapDataObject_NAME , php_wxBitmapDataObject_functions);
	php_wxBitmapDataObject_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxBitmapDataObject = zend_register_list_destructors_ex(php_wxBitmapDataObject_destruction_handler, NULL, le_wxBitmapDataObject_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxURLDataObject_NAME , php_wxURLDataObject_functions);
	php_wxURLDataObject_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxURLDataObject = zend_register_list_destructors_ex(php_wxURLDataObject_destruction_handler, NULL, le_wxURLDataObject_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCustomDataObject_NAME , php_wxCustomDataObject_functions);
	php_wxCustomDataObject_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCustomDataObject = zend_register_list_destructors_ex(php_wxCustomDataObject_destruction_handler, NULL, le_wxCustomDataObject_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTextDropTarget_NAME , php_wxTextDropTarget_functions);
	php_wxTextDropTarget_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTextDropTarget = zend_register_list_destructors_ex(php_wxTextDropTarget_destruction_handler, NULL, le_wxTextDropTarget_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDisplay_NAME , php_wxDisplay_functions);
	php_wxDisplay_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDisplay = zend_register_list_destructors_ex(php_wxDisplay_destruction_handler, NULL, le_wxDisplay_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDisplayChangedEvent_NAME , php_wxDisplayChangedEvent_functions);
	php_wxDisplayChangedEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDisplayChangedEvent = zend_register_list_destructors_ex(php_wxDisplayChangedEvent_destruction_handler, NULL, le_wxDisplayChangedEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxCalculateLayoutEvent_NAME , php_wxCalculateLayoutEvent_functions);
	php_wxCalculateLayoutEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxCalculateLayoutEvent = zend_register_list_destructors_ex(php_wxCalculateLayoutEvent_destruction_handler, NULL, le_wxCalculateLayoutEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxContextMenuEvent_NAME , php_wxContextMenuEvent_functions);
	php_wxContextMenuEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxContextMenuEvent = zend_register_list_destructors_ex(php_wxContextMenuEvent_destruction_handler, NULL, le_wxContextMenuEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxDropFilesEvent_NAME , php_wxDropFilesEvent_functions);
	php_wxDropFilesEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxDropFilesEvent = zend_register_list_destructors_ex(php_wxDropFilesEvent_destruction_handler, NULL, le_wxDropFilesEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxQueryLayoutInfoEvent_NAME , php_wxQueryLayoutInfoEvent_functions);
	php_wxQueryLayoutInfoEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxQueryLayoutInfoEvent = zend_register_list_destructors_ex(php_wxQueryLayoutInfoEvent_destruction_handler, NULL, le_wxQueryLayoutInfoEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxToolbook_NAME , php_wxToolbook_functions);
	php_wxToolbook_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxToolbook = zend_register_list_destructors_ex(php_wxToolbook_destruction_handler, NULL, le_wxToolbook_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxVideoMode_NAME , php_wxVideoMode_functions);
	php_wxVideoMode_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxVideoMode = zend_register_list_destructors_ex(php_wxVideoMode_destruction_handler, NULL, le_wxVideoMode_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonControl_NAME , php_wxRibbonControl_functions);
	php_wxRibbonControl_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonControl = zend_register_list_destructors_ex(php_wxRibbonControl_destruction_handler, NULL, le_wxRibbonControl_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonBar_NAME , php_wxRibbonBar_functions);
	php_wxRibbonBar_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonBar = zend_register_list_destructors_ex(php_wxRibbonBar_destruction_handler, NULL, le_wxRibbonBar_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonBarEvent_NAME , php_wxRibbonBarEvent_functions);
	php_wxRibbonBarEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonBarEvent = zend_register_list_destructors_ex(php_wxRibbonBarEvent_destruction_handler, NULL, le_wxRibbonBarEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonButtonBar_NAME , php_wxRibbonButtonBar_functions);
	php_wxRibbonButtonBar_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonButtonBar = zend_register_list_destructors_ex(php_wxRibbonButtonBar_destruction_handler, NULL, le_wxRibbonButtonBar_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonButtonBarEvent_NAME , php_wxRibbonButtonBarEvent_functions);
	php_wxRibbonButtonBarEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonButtonBarEvent = zend_register_list_destructors_ex(php_wxRibbonButtonBarEvent_destruction_handler, NULL, le_wxRibbonButtonBarEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonArtProvider_NAME , php_wxRibbonArtProvider_functions);
	php_wxRibbonArtProvider_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonArtProvider = zend_register_list_destructors_ex(php_wxRibbonArtProvider_destruction_handler, NULL, le_wxRibbonArtProvider_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonGallery_NAME , php_wxRibbonGallery_functions);
	php_wxRibbonGallery_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonGallery = zend_register_list_destructors_ex(php_wxRibbonGallery_destruction_handler, NULL, le_wxRibbonGallery_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonGalleryEvent_NAME , php_wxRibbonGalleryEvent_functions);
	php_wxRibbonGalleryEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonGalleryEvent = zend_register_list_destructors_ex(php_wxRibbonGalleryEvent_destruction_handler, NULL, le_wxRibbonGalleryEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonPage_NAME , php_wxRibbonPage_functions);
	php_wxRibbonPage_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonPage = zend_register_list_destructors_ex(php_wxRibbonPage_destruction_handler, NULL, le_wxRibbonPage_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonPanel_NAME , php_wxRibbonPanel_functions);
	php_wxRibbonPanel_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonPanel = zend_register_list_destructors_ex(php_wxRibbonPanel_destruction_handler, NULL, le_wxRibbonPanel_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonToolBar_NAME , php_wxRibbonToolBar_functions);
	php_wxRibbonToolBar_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonToolBar = zend_register_list_destructors_ex(php_wxRibbonToolBar_destruction_handler, NULL, le_wxRibbonToolBar_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonButtonBarButtonBase_NAME , php_wxRibbonButtonBarButtonBase_functions);
	php_wxRibbonButtonBarButtonBase_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonButtonBarButtonBase = zend_register_list_destructors_ex(php_wxRibbonButtonBarButtonBase_destruction_handler, NULL, le_wxRibbonButtonBarButtonBase_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonGalleryItem_NAME , php_wxRibbonGalleryItem_functions);
	php_wxRibbonGalleryItem_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonGalleryItem = zend_register_list_destructors_ex(php_wxRibbonGalleryItem_destruction_handler, NULL, le_wxRibbonGalleryItem_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxRibbonToolBarToolBase_NAME , php_wxRibbonToolBarToolBase_functions);
	php_wxRibbonToolBarToolBase_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxRibbonToolBarToolBase = zend_register_list_destructors_ex(php_wxRibbonToolBarToolBase_destruction_handler, NULL, le_wxRibbonToolBarToolBase_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTaskBarIcon_NAME , php_wxTaskBarIcon_functions);
	php_wxTaskBarIcon_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTaskBarIcon = zend_register_list_destructors_ex(php_wxTaskBarIcon_destruction_handler, NULL, le_wxTaskBarIcon_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTaskBarIconEvent_NAME , php_wxTaskBarIconEvent_functions);
	php_wxTaskBarIconEvent_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTaskBarIconEvent = zend_register_list_destructors_ex(php_wxTaskBarIconEvent_destruction_handler, NULL, le_wxTaskBarIconEvent_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxTimerRunner_NAME , php_wxTimerRunner_functions);
	php_wxTimerRunner_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxTimerRunner = zend_register_list_destructors_ex(php_wxTimerRunner_destruction_handler, NULL, le_wxTimerRunner_name, module_number);

	INIT_CLASS_ENTRY(cf, PHP_wxNotificationMessage_NAME , php_wxNotificationMessage_functions);
	php_wxNotificationMessage_entry = zend_register_internal_class(&cf TSRMLS_CC);
	le_wxNotificationMessage = zend_register_list_destructors_ex(php_wxNotificationMessage_destruction_handler, NULL, le_wxNotificationMessage_name, module_number);


	//Variables found on consts.json

	REGISTER_LONG_CONSTANT("WXK_ADD", WXK_ADD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_ALT", WXK_ALT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_BACK", WXK_BACK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_CANCEL", WXK_CANCEL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_CAPITAL", WXK_CAPITAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_CATEGORY_ARROW", WXK_CATEGORY_ARROW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_CATEGORY_CUT", WXK_CATEGORY_CUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_CATEGORY_JUMP", WXK_CATEGORY_JUMP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_CATEGORY_NAVIGATION", WXK_CATEGORY_NAVIGATION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_CATEGORY_PAGING", WXK_CATEGORY_PAGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_CATEGORY_TAB", WXK_CATEGORY_TAB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_CLEAR", WXK_CLEAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_COMMAND", WXK_COMMAND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_CONTROL", WXK_CONTROL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_DECIMAL", WXK_DECIMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_DELETE", WXK_DELETE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_DIVIDE", WXK_DIVIDE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_DOWN", WXK_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_END", WXK_END, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_ESCAPE", WXK_ESCAPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_EXECUTE", WXK_EXECUTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F1", WXK_F1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F10", WXK_F10, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F11", WXK_F11, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F12", WXK_F12, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F13", WXK_F13, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F14", WXK_F14, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F15", WXK_F15, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F16", WXK_F16, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F17", WXK_F17, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F18", WXK_F18, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F19", WXK_F19, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F2", WXK_F2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F20", WXK_F20, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F21", WXK_F21, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F22", WXK_F22, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F23", WXK_F23, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F24", WXK_F24, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F3", WXK_F3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F4", WXK_F4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F5", WXK_F5, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F6", WXK_F6, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F7", WXK_F7, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F8", WXK_F8, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_F9", WXK_F9, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_HELP", WXK_HELP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_HOME", WXK_HOME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_INSERT", WXK_INSERT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_LBUTTON", WXK_LBUTTON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_LEFT", WXK_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_MBUTTON", WXK_MBUTTON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_MENU", WXK_MENU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_MULTIPLY", WXK_MULTIPLY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMLOCK", WXK_NUMLOCK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD0", WXK_NUMPAD0, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD1", WXK_NUMPAD1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD2", WXK_NUMPAD2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD3", WXK_NUMPAD3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD4", WXK_NUMPAD4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD5", WXK_NUMPAD5, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD6", WXK_NUMPAD6, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD7", WXK_NUMPAD7, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD8", WXK_NUMPAD8, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD9", WXK_NUMPAD9, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_ADD", WXK_NUMPAD_ADD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_BEGIN", WXK_NUMPAD_BEGIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_DECIMAL", WXK_NUMPAD_DECIMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_DELETE", WXK_NUMPAD_DELETE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_DIVIDE", WXK_NUMPAD_DIVIDE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_DOWN", WXK_NUMPAD_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_END", WXK_NUMPAD_END, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_ENTER", WXK_NUMPAD_ENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_EQUAL", WXK_NUMPAD_EQUAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_F1", WXK_NUMPAD_F1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_F2", WXK_NUMPAD_F2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_F3", WXK_NUMPAD_F3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_F4", WXK_NUMPAD_F4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_HOME", WXK_NUMPAD_HOME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_INSERT", WXK_NUMPAD_INSERT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_LEFT", WXK_NUMPAD_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_MULTIPLY", WXK_NUMPAD_MULTIPLY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_PAGEDOWN", WXK_NUMPAD_PAGEDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_PAGEUP", WXK_NUMPAD_PAGEUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_RIGHT", WXK_NUMPAD_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_SEPARATOR", WXK_NUMPAD_SEPARATOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_SPACE", WXK_NUMPAD_SPACE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_SUBTRACT", WXK_NUMPAD_SUBTRACT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_TAB", WXK_NUMPAD_TAB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_NUMPAD_UP", WXK_NUMPAD_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_PAGEDOWN", WXK_PAGEDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_PAGEUP", WXK_PAGEUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_PAUSE", WXK_PAUSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_PRINT", WXK_PRINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_RBUTTON", WXK_RBUTTON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_RETURN", WXK_RETURN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_RIGHT", WXK_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SCROLL", WXK_SCROLL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SELECT", WXK_SELECT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SEPARATOR", WXK_SEPARATOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SHIFT", WXK_SHIFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SNAPSHOT", WXK_SNAPSHOT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPACE", WXK_SPACE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL1", WXK_SPECIAL1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL10", WXK_SPECIAL10, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL11", WXK_SPECIAL11, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL12", WXK_SPECIAL12, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL13", WXK_SPECIAL13, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL14", WXK_SPECIAL14, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL15", WXK_SPECIAL15, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL16", WXK_SPECIAL16, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL17", WXK_SPECIAL17, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL18", WXK_SPECIAL18, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL19", WXK_SPECIAL19, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL2", WXK_SPECIAL2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL20", WXK_SPECIAL20, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL3", WXK_SPECIAL3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL4", WXK_SPECIAL4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL5", WXK_SPECIAL5, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL6", WXK_SPECIAL6, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL7", WXK_SPECIAL7, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL8", WXK_SPECIAL8, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SPECIAL9", WXK_SPECIAL9, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_START", WXK_START, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_SUBTRACT", WXK_SUBTRACT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_TAB", WXK_TAB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_UP", WXK_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_WINDOWS_LEFT", WXK_WINDOWS_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_WINDOWS_MENU", WXK_WINDOWS_MENU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("WXK_WINDOWS_RIGHT", WXK_WINDOWS_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_ACCELERATORCHANGE", 0x8012, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_CREATE", 0x8000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_DEFACTIONCHANGE", 0x8011, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_DESCRIPTIONCHANGE", 0x800D, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_DESTROY", 0x8001, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_FOCUS", 0x8005, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_HELPCHANGE", 0x8010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_HIDE", 0x8003, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_LOCATIONCHANGE", 0x800B, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_NAMECHANGE", 0x800C, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_PARENTCHANGE", 0x800F, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_REORDER", 0x8004, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_SELECTION", 0x8006, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_SELECTIONADD", 0x8007, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_SELECTIONREMOVE", 0x8008, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_SELECTIONWITHIN", 0x8009, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_SHOW", 0x8002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_STATECHANGE", 0x800A, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_OBJECT_VALUECHANGE", 0x800E, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_ALERT", 0x0002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_CAPTUREEND", 0x0009, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_CAPTURESTART", 0x0008, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_CONTEXTHELPEND", 0x000D, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_CONTEXTHELPSTART", 0x000C, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_DIALOGEND", 0x0011, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_DIALOGSTART", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_DRAGDROPEND", 0x000F, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_DRAGDROPSTART", 0x000E, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_FOREGROUND", 0x0003, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_MENUEND", 0x0005, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_MENUPOPUPEND", 0x0007, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_MENUPOPUPSTART", 0x0006, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_MENUSTART", 0x0004, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_MINIMIZEEND", 0x0017, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_MINIMIZESTART", 0x0016, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_MOVESIZEEND", 0x000B, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_MOVESIZESTART", 0x000A, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_SCROLLINGEND", 0x0013, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_SCROLLINGSTART", 0x0012, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_SWITCHEND", 0x0015, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_EVENT_SYSTEM_SWITCHSTART", 0x0014, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_ALERT_LOW", 0x00000004, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_ALERT_MEDIUM", 0x00000002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_ANIMATED", 0x00000008, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_BUSY", 0x00000010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_CHECKED", 0x00000020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_COLLAPSED", 0x00000040, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_DEFAULT", 0x00000080, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_EXPANDED", 0x00000100, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_EXTSELECTABLE", 0x00000200, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_FLOATING", 0x00000400, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_FOCUSABLE", 0x00000800, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_FOCUSED", 0x00001000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_HOTTRACKED", 0x00002000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_INVISIBLE", 0x00004000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_MARQUEED", 0x00008000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_MIXED", 0x00010000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_MULTISELECTABLE", 0x00020000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_OFFSCREEN", 0x00040000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_PRESSED", 0x00080000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_PROTECTED", 0x00100000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_READONLY", 0x00200000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_SELECTABLE", 0x00400000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_SELECTED", 0x00800000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_SELFVOICING", 0x01000000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxACC_STATE_SYSTEM_UNAVAILABLE", 0x02000000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_BOTTOM", wxALIGN_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_CENTER", wxALIGN_CENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_CENTER_HORIZONTAL", wxALIGN_CENTER_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_CENTER_VERTICAL", wxALIGN_CENTER_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_CENTRE", wxALIGN_CENTRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_CENTRE_HORIZONTAL", wxALIGN_CENTRE_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_CENTRE_VERTICAL", wxALIGN_CENTRE_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_INVALID", wxALIGN_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_LEFT", wxALIGN_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_MASK", wxALIGN_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_NOT", wxALIGN_NOT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_RIGHT", wxALIGN_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALIGN_TOP", wxALIGN_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALL", wxALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALWAYS_SHOW_SB", wxALWAYS_SHOW_SB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAND", wxAND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAND_INVERT", wxAND_INVERT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAND_REVERSE", wxAND_REVERSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxANIMATION_TYPE_ANI", wxANIMATION_TYPE_ANI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxANIMATION_TYPE_ANY", wxANIMATION_TYPE_ANY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxANIMATION_TYPE_GIF", wxANIMATION_TYPE_GIF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxANIMATION_TYPE_INVALID", wxANIMATION_TYPE_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxANTIALIAS_DEFAULT", wxANTIALIAS_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAPPLY", 0x00000020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxARCH_32", wxARCH_32, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxARCH_64", wxARCH_64, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxARCH_INVALID", wxARCH_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxARCH_MAX", wxARCH_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_CLOSE", wxAUI_BUTTON_CLOSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_CUSTOM1", wxAUI_BUTTON_CUSTOM1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_CUSTOM2", wxAUI_BUTTON_CUSTOM2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_CUSTOM3", wxAUI_BUTTON_CUSTOM3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_DOWN", wxAUI_BUTTON_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_LEFT", wxAUI_BUTTON_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_MAXIMIZE_RESTORE", wxAUI_BUTTON_MAXIMIZE_RESTORE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_MINIMIZE", wxAUI_BUTTON_MINIMIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_OPTIONS", wxAUI_BUTTON_OPTIONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_PIN", wxAUI_BUTTON_PIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_RIGHT", wxAUI_BUTTON_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_STATE_HOVER", wxAUI_BUTTON_STATE_HOVER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_STATE_NORMAL", wxAUI_BUTTON_STATE_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_STATE_PRESSED", wxAUI_BUTTON_STATE_PRESSED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_UP", wxAUI_BUTTON_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_BUTTON_WINDOWLIST", wxAUI_BUTTON_WINDOWLIST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR", wxAUI_DOCKART_ACTIVE_CAPTION_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR", wxAUI_DOCKART_ACTIVE_CAPTION_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR", wxAUI_DOCKART_ACTIVE_CAPTION_TEXT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_BACKGROUND_COLOUR", wxAUI_DOCKART_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_BORDER_COLOUR", wxAUI_DOCKART_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_CAPTION_FONT", wxAUI_DOCKART_CAPTION_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_CAPTION_SIZE", wxAUI_DOCKART_CAPTION_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_GRADIENT_TYPE", wxAUI_DOCKART_GRADIENT_TYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_GRIPPER_COLOUR", wxAUI_DOCKART_GRIPPER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_GRIPPER_SIZE", wxAUI_DOCKART_GRIPPER_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR", wxAUI_DOCKART_INACTIVE_CAPTION_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR", wxAUI_DOCKART_INACTIVE_CAPTION_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR", wxAUI_DOCKART_INACTIVE_CAPTION_TEXT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_PANE_BORDER_SIZE", wxAUI_DOCKART_PANE_BORDER_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_PANE_BUTTON_SIZE", wxAUI_DOCKART_PANE_BUTTON_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_SASH_COLOUR", wxAUI_DOCKART_SASH_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCKART_SASH_SIZE", wxAUI_DOCKART_SASH_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCK_BOTTOM", wxAUI_DOCK_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCK_CENTER", wxAUI_DOCK_CENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCK_CENTRE", wxAUI_DOCK_CENTRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCK_LEFT", wxAUI_DOCK_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCK_RIGHT", wxAUI_DOCK_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_DOCK_TOP", wxAUI_DOCK_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_GRADIENT_HORIZONTAL", wxAUI_GRADIENT_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_GRADIENT_VERTICAL", wxAUI_GRADIENT_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_MGR_ALLOW_ACTIVE_PANE", wxAUI_MGR_ALLOW_ACTIVE_PANE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_MGR_ALLOW_FLOATING", wxAUI_MGR_ALLOW_FLOATING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_MGR_DEFAULT", wxAUI_MGR_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_MGR_HINT_FADE", wxAUI_MGR_HINT_FADE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_MGR_LIVE_RESIZE", wxAUI_MGR_LIVE_RESIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_MGR_NO_VENETIAN_BLINDS_FADE", wxAUI_MGR_NO_VENETIAN_BLINDS_FADE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_MGR_RECTANGLE_HINT", wxAUI_MGR_RECTANGLE_HINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_MGR_TRANSPARENT_DRAG", wxAUI_MGR_TRANSPARENT_DRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_MGR_TRANSPARENT_HINT", wxAUI_MGR_TRANSPARENT_HINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_MGR_VENETIAN_BLINDS_HINT", wxAUI_MGR_VENETIAN_BLINDS_HINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_BOTTOM", wxAUI_NB_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_CLOSE_BUTTON", wxAUI_NB_CLOSE_BUTTON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_CLOSE_ON_ACTIVE_TAB", wxAUI_NB_CLOSE_ON_ACTIVE_TAB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_CLOSE_ON_ALL_TABS", wxAUI_NB_CLOSE_ON_ALL_TABS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_DEFAULT_STYLE", wxAUI_NB_DEFAULT_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_SCROLL_BUTTONS", wxAUI_NB_SCROLL_BUTTONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_TAB_EXTERNAL_MOVE", wxAUI_NB_TAB_EXTERNAL_MOVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_TAB_FIXED_WIDTH", wxAUI_NB_TAB_FIXED_WIDTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_TAB_MOVE", wxAUI_NB_TAB_MOVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_TAB_SPLIT", wxAUI_NB_TAB_SPLIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_TOP", wxAUI_NB_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_NB_WINDOWLIST_BUTTON", wxAUI_NB_WINDOWLIST_BUTTON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_ORIENTATION_MASK", wxAUI_ORIENTATION_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TBART_GRIPPER_SIZE", wxAUI_TBART_GRIPPER_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TBART_OVERFLOW_SIZE", wxAUI_TBART_OVERFLOW_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TBART_SEPARATOR_SIZE", wxAUI_TBART_SEPARATOR_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TBTOOL_TEXT_BOTTOM", wxAUI_TBTOOL_TEXT_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TBTOOL_TEXT_LEFT", wxAUI_TBTOOL_TEXT_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TBTOOL_TEXT_RIGHT", wxAUI_TBTOOL_TEXT_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TBTOOL_TEXT_TOP", wxAUI_TBTOOL_TEXT_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TB_DEFAULT_STYLE", wxAUI_TB_DEFAULT_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TB_GRIPPER", wxAUI_TB_GRIPPER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TB_HORIZONTAL", wxAUI_TB_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TB_HORZ_LAYOUT", wxAUI_TB_HORZ_LAYOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TB_HORZ_TEXT", wxAUI_TB_HORZ_TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TB_NO_AUTORESIZE", wxAUI_TB_NO_AUTORESIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TB_NO_TOOLTIPS", wxAUI_TB_NO_TOOLTIPS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TB_OVERFLOW", wxAUI_TB_OVERFLOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TB_TEXT", wxAUI_TB_TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAUI_TB_VERTICAL", wxAUI_TB_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAbove", wxAbove, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAbsolute", wxAbsolute, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxAsIs", wxAsIs, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBACKWARD", 0x00004000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBG_STYLE_COLOUR", wxBG_STYLE_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBG_STYLE_ERASE", wxBG_STYLE_ERASE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBG_STYLE_PAINT", wxBG_STYLE_PAINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBG_STYLE_SYSTEM", wxBG_STYLE_SYSTEM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBG_STYLE_TRANSPARENT", wxBG_STYLE_TRANSPARENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_ANI", wxBITMAP_TYPE_ANI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_ANY", wxBITMAP_TYPE_ANY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_BMP", wxBITMAP_TYPE_BMP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_BMP_RESOURCE", wxBITMAP_TYPE_BMP_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_CUR", wxBITMAP_TYPE_CUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_CUR_RESOURCE", wxBITMAP_TYPE_CUR_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_GIF", wxBITMAP_TYPE_GIF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_GIF_RESOURCE", wxBITMAP_TYPE_GIF_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_ICO", wxBITMAP_TYPE_ICO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_ICON", wxBITMAP_TYPE_ICON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_ICON_RESOURCE", wxBITMAP_TYPE_ICON_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_ICO_RESOURCE", wxBITMAP_TYPE_ICO_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_IFF", wxBITMAP_TYPE_IFF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_INVALID", wxBITMAP_TYPE_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_JPEG", wxBITMAP_TYPE_JPEG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_JPEG_RESOURCE", wxBITMAP_TYPE_JPEG_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_MACCURSOR", wxBITMAP_TYPE_MACCURSOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_MACCURSOR_RESOURCE", wxBITMAP_TYPE_MACCURSOR_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_PCX", wxBITMAP_TYPE_PCX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_PCX_RESOURCE", wxBITMAP_TYPE_PCX_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_PICT", wxBITMAP_TYPE_PICT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_PICT_RESOURCE", wxBITMAP_TYPE_PICT_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_PNG", wxBITMAP_TYPE_PNG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_PNG_RESOURCE", wxBITMAP_TYPE_PNG_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_PNM", wxBITMAP_TYPE_PNM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_PNM_RESOURCE", wxBITMAP_TYPE_PNM_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_RESOURCE", wxBITMAP_TYPE_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_TGA", wxBITMAP_TYPE_TGA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_TIF", wxBITMAP_TYPE_TIF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_TIFF", wxBITMAP_TYPE_TIFF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_TIFF_RESOURCE", wxBITMAP_TYPE_TIFF_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_TIF_RESOURCE", wxBITMAP_TYPE_TIF_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_XBM", wxBITMAP_TYPE_XBM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_XBM_DATA", wxBITMAP_TYPE_XBM_DATA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_XPM", wxBITMAP_TYPE_XPM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBITMAP_TYPE_XPM_DATA", wxBITMAP_TYPE_XPM_DATA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBOM_UTF16BE", wxBOM_UTF16BE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBOM_UTF16LE", wxBOM_UTF16LE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBOM_UTF32BE", wxBOM_UTF32BE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBOM_UTF32LE", wxBOM_UTF32LE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBOM_UTF8", wxBOM_UTF8, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBOM_Unknown", wxBOM_Unknown, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBORDER_DEFAULT", wxBORDER_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBORDER_DOUBLE", wxBORDER_DOUBLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBORDER_MASK", wxBORDER_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBORDER_NONE", wxBORDER_NONE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBORDER_RAISED", wxBORDER_RAISED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBORDER_SIMPLE", wxBORDER_SIMPLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBORDER_STATIC", wxBORDER_STATIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBORDER_SUNKEN", wxBORDER_SUNKEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBORDER_THEME", wxBORDER_THEME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBOTH", wxBOTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBOTTOM", wxBOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_BDIAGONAL_HATCH", wxBRUSHSTYLE_BDIAGONAL_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_CROSSDIAG_HATCH", wxBRUSHSTYLE_CROSSDIAG_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_CROSS_HATCH", wxBRUSHSTYLE_CROSS_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_FDIAGONAL_HATCH", wxBRUSHSTYLE_FDIAGONAL_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_FIRST_HATCH", wxBRUSHSTYLE_FIRST_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_HORIZONTAL_HATCH", wxBRUSHSTYLE_HORIZONTAL_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_INVALID", wxBRUSHSTYLE_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_LAST_HATCH", wxBRUSHSTYLE_LAST_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_SOLID", wxBRUSHSTYLE_SOLID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_STIPPLE", wxBRUSHSTYLE_STIPPLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_STIPPLE_MASK", wxBRUSHSTYLE_STIPPLE_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_STIPPLE_MASK_OPAQUE", wxBRUSHSTYLE_STIPPLE_MASK_OPAQUE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_TRANSPARENT", wxBRUSHSTYLE_TRANSPARENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBRUSHSTYLE_VERTICAL_HATCH", wxBRUSHSTYLE_VERTICAL_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBUFFER_CLIENT_AREA", 0x02, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBUFFER_USES_SHARED_BUFFER", 0x04, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBUFFER_VIRTUAL_AREA", wxBUFFER_VIRTUAL_AREA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBU_AUTODRAW", wxBU_AUTODRAW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBU_BOTTOM", wxBU_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBU_EXACTFIT", wxBU_EXACTFIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBU_LEFT", wxBU_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBU_NOTEXT", 0x0002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBU_RIGHT", wxBU_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBU_TOP", wxBU_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBase64DecodeMode_Relaxed", wxBase64DecodeMode_Relaxed, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBase64DecodeMode_SkipWS", wxBase64DecodeMode_SkipWS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBase64DecodeMode_Strict", wxBase64DecodeMode_Strict, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBelow", wxBelow, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxBottom", wxBottom, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_BORDER_ROUND", wxCAL_BORDER_ROUND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_BORDER_SQUARE", wxCAL_BORDER_SQUARE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_HITTEST_DAY", wxCAL_HITTEST_DAY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_HITTEST_DECMONTH", wxCAL_HITTEST_DECMONTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_HITTEST_HEADER", wxCAL_HITTEST_HEADER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_HITTEST_INCMONTH", wxCAL_HITTEST_INCMONTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_HITTEST_NOWHERE", wxCAL_HITTEST_NOWHERE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_HITTEST_SURROUNDING_WEEK", wxCAL_HITTEST_SURROUNDING_WEEK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_HITTEST_WEEK", wxCAL_HITTEST_WEEK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_MONDAY_FIRST", wxCAL_MONDAY_FIRST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_NO_MONTH_CHANGE", wxCAL_NO_MONTH_CHANGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_NO_YEAR_CHANGE", wxCAL_NO_YEAR_CHANGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_SEQUENTIAL_MONTH_SELECTION", wxCAL_SEQUENTIAL_MONTH_SELECTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_SHOW_HOLIDAYS", wxCAL_SHOW_HOLIDAYS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_SHOW_SURROUNDING_WEEKS", wxCAL_SHOW_SURROUNDING_WEEKS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAL_SUNDAY_FIRST", wxCAL_SUNDAY_FIRST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCANCEL", wxCANCEL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCANCEL_DEFAULT", 0x80000000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAPTION", 0x20000000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAP_BUTT", wxCAP_BUTT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAP_INVALID", wxCAP_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAP_PROJECTING", wxCAP_PROJECTING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCAP_ROUND", wxCAP_ROUND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCB_DROPDOWN", wxCB_DROPDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCB_READONLY", wxCB_READONLY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCB_SIMPLE", wxCB_SIMPLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCB_SORT", wxCB_SORT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCENTER", wxCENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCENTRE", wxCENTRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCHB_BOTTOM", wxCHB_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCHB_DEFAULT", wxCHB_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCHB_LEFT", wxCHB_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCHB_RIGHT", wxCHB_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCHB_TOP", wxCHB_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCHK_2STATE", wxCHK_2STATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCHK_3STATE", wxCHK_3STATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCHK_ALLOW_3RD_STATE_FOR_USER", wxCHK_ALLOW_3RD_STATE_FOR_USER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCHK_CHECKED", wxCHK_CHECKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCHK_UNCHECKED", wxCHK_UNCHECKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCHK_UNDETERMINED", wxCHK_UNDETERMINED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCLEAR", wxCLEAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCLIP_CHILDREN", wxCLIP_CHILDREN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCLIP_SIBLINGS", 0x20000000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCLOSE", 0x00000040, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCLOSE_BOX", 0x1000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_NEEDS_SEPARATOR", wxCMD_LINE_NEEDS_SEPARATOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_OPTION", wxCMD_LINE_OPTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_OPTION_HELP", wxCMD_LINE_OPTION_HELP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_OPTION_MANDATORY", wxCMD_LINE_OPTION_MANDATORY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_PARAM", wxCMD_LINE_PARAM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_PARAM_MULTIPLE", wxCMD_LINE_PARAM_MULTIPLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_PARAM_OPTIONAL", wxCMD_LINE_PARAM_OPTIONAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_SPLIT_DOS", wxCMD_LINE_SPLIT_DOS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_SPLIT_UNIX", wxCMD_LINE_SPLIT_UNIX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_SWITCH", wxCMD_LINE_SWITCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_SWITCH_NEGATABLE", wxCMD_LINE_SWITCH_NEGATABLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_USAGE_TEXT", wxCMD_LINE_USAGE_TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_VAL_DATE", wxCMD_LINE_VAL_DATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_VAL_DOUBLE", wxCMD_LINE_VAL_DOUBLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_VAL_NUMBER", wxCMD_LINE_VAL_NUMBER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_LINE_VAL_STRING", wxCMD_LINE_VAL_STRING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_SWITCH_OFF", wxCMD_SWITCH_OFF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCMD_SWITCH_ON", wxCMD_SWITCH_ON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOLOURED", 0x0800, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_ADD", wxCOMPOSITION_ADD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_ATOP", wxCOMPOSITION_ATOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_CLEAR", wxCOMPOSITION_CLEAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_DEST", wxCOMPOSITION_DEST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_DEST_ATOP", wxCOMPOSITION_DEST_ATOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_DEST_IN", wxCOMPOSITION_DEST_IN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_DEST_OUT", wxCOMPOSITION_DEST_OUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_DEST_OVER", wxCOMPOSITION_DEST_OVER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_IN", wxCOMPOSITION_IN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_INVALID", wxCOMPOSITION_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_OUT", wxCOMPOSITION_OUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_OVER", wxCOMPOSITION_OVER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_SOURCE", wxCOMPOSITION_SOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOMPOSITION_XOR", wxCOMPOSITION_XOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOND_INVALID", wxCOND_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOND_MISC_ERROR", wxCOND_MISC_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOND_NO_ERROR", wxCOND_NO_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOND_TIMEOUT", wxCOND_TIMEOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCOPY", wxCOPY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCRITSEC_DEFAULT", wxCRITSEC_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCRITSEC_NON_RECURSIVE", wxCRITSEC_NON_RECURSIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCenter", wxCenter, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCentre", wxCentre, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCentreX", wxCentreX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxCentreY", wxCentreY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDATAVIEW_CELL_ACTIVATABLE", wxDATAVIEW_CELL_ACTIVATABLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDATAVIEW_CELL_EDITABLE", wxDATAVIEW_CELL_EDITABLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDATAVIEW_CELL_FOCUSED", wxDATAVIEW_CELL_FOCUSED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDATAVIEW_CELL_INERT", wxDATAVIEW_CELL_INERT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDATAVIEW_CELL_INSENSITIVE", wxDATAVIEW_CELL_INSENSITIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDATAVIEW_CELL_PRELIT", wxDATAVIEW_CELL_PRELIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDATAVIEW_CELL_SELECTED", wxDATAVIEW_CELL_SELECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDATAVIEW_COL_HIDDEN", wxDATAVIEW_COL_HIDDEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDATAVIEW_COL_REORDERABLE", wxDATAVIEW_COL_REORDERABLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDATAVIEW_COL_RESIZABLE", wxDATAVIEW_COL_RESIZABLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDATAVIEW_COL_SORTABLE", wxDATAVIEW_COL_SORTABLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDEFAULT_DIALOG_STYLE", wxDEFAULT_DIALOG_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDEFAULT_FRAME_STYLE", wxDEFAULT_FRAME_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_BITMAP", wxDF_BITMAP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_DIB", wxDF_DIB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_DIF", wxDF_DIF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_ENHMETAFILE", wxDF_ENHMETAFILE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_FILENAME", wxDF_FILENAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_HTML", wxDF_HTML, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_INVALID", wxDF_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_LOCALE", wxDF_LOCALE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_MAX", wxDF_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_METAFILE", wxDF_METAFILE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_OEMTEXT", wxDF_OEMTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_PALETTE", wxDF_PALETTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_PENDATA", wxDF_PENDATA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_PRIVATE", wxDF_PRIVATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_RIFF", wxDF_RIFF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_SYLK", wxDF_SYLK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_TEXT", wxDF_TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_TIFF", wxDF_TIFF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_UNICODETEXT", wxDF_UNICODETEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDF_WAVE", wxDF_WAVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIALOG_ADAPTATION_MODE_DEFAULT", wxDIALOG_ADAPTATION_MODE_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIALOG_ADAPTATION_MODE_DISABLED", wxDIALOG_ADAPTATION_MODE_DISABLED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIALOG_ADAPTATION_MODE_ENABLED", wxDIALOG_ADAPTATION_MODE_ENABLED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIALOG_EX_METAL", 0x00000040, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIRCTRL_3D_INTERNAL", wxDIRCTRL_3D_INTERNAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIRCTRL_DIR_ONLY", wxDIRCTRL_DIR_ONLY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIRCTRL_EDIT_LABELS", wxDIRCTRL_EDIT_LABELS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIRCTRL_SELECT_FIRST", wxDIRCTRL_SELECT_FIRST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIRCTRL_SHOW_FILTERS", wxDIRCTRL_SHOW_FILTERS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIRECTION_MASK", wxDIRECTION_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIRP_CHANGE_DIR", wxDIRP_CHANGE_DIR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIRP_DEFAULT_STYLE", wxDIRP_DEFAULT_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIRP_DIR_MUST_EXIST", wxDIRP_DIR_MUST_EXIST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIRP_USE_TEXTCTRL", wxDIRP_USE_TEXTCTRL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIR_CONTINUE", wxDIR_CONTINUE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIR_DEFAULT", wxDIR_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIR_DIRS", wxDIR_DIRS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIR_DOTDOT", wxDIR_DOTDOT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIR_FILES", wxDIR_FILES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIR_HIDDEN", wxDIR_HIDDEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIR_IGNORE", wxDIR_IGNORE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDIR_STOP", wxDIR_STOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDL_LIBRARY", wxDL_LIBRARY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDL_MODULE", wxDL_MODULE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDL_PLUGIN_BASE", wxDL_PLUGIN_BASE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDL_PLUGIN_GUI", wxDL_PLUGIN_GUI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDOWN", wxDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDP_ALLOWNONE", wxDP_ALLOWNONE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDP_DEFAULT", wxDP_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDP_DROPDOWN", wxDP_DROPDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDP_SHOWCENTURY", wxDP_SHOWCENTURY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDP_SPIN", wxDP_SPIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDUPLEX_HORIZONTAL", wxDUPLEX_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDUPLEX_SIMPLEX", wxDUPLEX_SIMPLEX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDUPLEX_VERTICAL", wxDUPLEX_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDV_HORIZ_RULES", 0x0004, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDV_MULTIPLE", wxDV_MULTIPLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDV_NO_HEADER", 0x0002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDV_ROW_LINES", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDV_SINGLE", 0x0000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDV_VARIABLE_LINE_HEIGHT", 0x0020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDV_VERT_RULES", 0x0008, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDragCancel", wxDragCancel, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDragCopy", wxDragCopy, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDragError", wxDragError, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDragLink", wxDragLink, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDragMove", wxDragMove, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEAST", wxEAST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxELLIPSIZE_END", wxELLIPSIZE_END, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxELLIPSIZE_FLAGS_DEFAULT", wxELLIPSIZE_FLAGS_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxELLIPSIZE_FLAGS_EXPAND_TABS", wxELLIPSIZE_FLAGS_EXPAND_TABS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxELLIPSIZE_FLAGS_PROCESS_MNEMONICS", wxELLIPSIZE_FLAGS_PROCESS_MNEMONICS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxELLIPSIZE_MIDDLE", wxELLIPSIZE_MIDDLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxELLIPSIZE_START", wxELLIPSIZE_START, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxENDIAN_BIG", wxENDIAN_BIG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxENDIAN_INVALID", wxENDIAN_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxENDIAN_LITTLE", wxENDIAN_LITTLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxENDIAN_MAX", wxENDIAN_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxENDIAN_PDP", wxENDIAN_PDP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEOL_DOS", wxEOL_DOS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEOL_MAC", wxEOL_MAC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEOL_NATIVE", wxEOL_NATIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEOL_UNIX", wxEOL_UNIX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEQUIV", wxEQUIV, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVENT_PROPAGATE_MAX", wxEVENT_PROPAGATE_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_ACTIVATE", wxEVT_ACTIVATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_ACTIVATE_APP", wxEVT_ACTIVATE_APP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUI_FIND_MANAGER", wxEVT_AUI_FIND_MANAGER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUI_PANE_BUTTON", wxEVT_AUI_PANE_BUTTON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUI_PANE_CLOSE", wxEVT_AUI_PANE_CLOSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUI_PANE_MAXIMIZE", wxEVT_AUI_PANE_MAXIMIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUI_PANE_RESTORE", wxEVT_AUI_PANE_RESTORE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUI_RENDER", wxEVT_AUI_RENDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CALCULATE_LAYOUT", wxEVT_CALCULATE_LAYOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CALENDAR_DAY_CHANGED", wxEVT_CALENDAR_DAY_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CALENDAR_DOUBLECLICKED", wxEVT_CALENDAR_DOUBLECLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CALENDAR_MONTH_CHANGED", wxEVT_CALENDAR_MONTH_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CALENDAR_SEL_CHANGED", wxEVT_CALENDAR_SEL_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CALENDAR_WEEKDAY_CLICKED", wxEVT_CALENDAR_WEEKDAY_CLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CALENDAR_YEAR_CHANGED", wxEVT_CALENDAR_YEAR_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CATEGORY_ALL", wxEVT_CATEGORY_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CATEGORY_SOCKET", wxEVT_CATEGORY_SOCKET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CATEGORY_THREAD", wxEVT_CATEGORY_THREAD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CATEGORY_TIMER", wxEVT_CATEGORY_TIMER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CATEGORY_UI", wxEVT_CATEGORY_UI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CATEGORY_USER_INPUT", wxEVT_CATEGORY_USER_INPUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CHAR", wxEVT_CHAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CHAR_HOOK", wxEVT_CHAR_HOOK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CHILD_FOCUS", wxEVT_CHILD_FOCUS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CLOSE_WINDOW", wxEVT_CLOSE_WINDOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND", wxEVT_COMMAND_AUINOTEBOOK_ALLOW_DND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG", wxEVT_COMMAND_AUINOTEBOOK_BEGIN_DRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK", wxEVT_COMMAND_AUINOTEBOOK_BG_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_BUTTON", wxEVT_COMMAND_AUINOTEBOOK_BUTTON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE", wxEVT_COMMAND_AUINOTEBOOK_DRAG_DONE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION", wxEVT_COMMAND_AUINOTEBOOK_DRAG_MOTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_END_DRAG", wxEVT_COMMAND_AUINOTEBOOK_END_DRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED", wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING", wxEVT_COMMAND_AUINOTEBOOK_PAGE_CHANGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE", wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED", wxEVT_COMMAND_AUINOTEBOOK_PAGE_CLOSED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN", wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP", wxEVT_COMMAND_AUINOTEBOOK_TAB_MIDDLE_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN", wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP", wxEVT_COMMAND_AUINOTEBOOK_TAB_RIGHT_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG", wxEVT_COMMAND_AUITOOLBAR_BEGIN_DRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK", wxEVT_COMMAND_AUITOOLBAR_MIDDLE_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK", wxEVT_COMMAND_AUITOOLBAR_OVERFLOW_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK", wxEVT_COMMAND_AUITOOLBAR_RIGHT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN", wxEVT_COMMAND_AUITOOLBAR_TOOL_DROPDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_BOOKCTRL_PAGE_CHANGED", wxEVT_COMMAND_BOOKCTRL_PAGE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_BOOKCTRL_PAGE_CHANGING", wxEVT_COMMAND_BOOKCTRL_PAGE_CHANGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_BUTTON_CLICKED", wxEVT_COMMAND_BUTTON_CLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_CHECKBOX_CLICKED", wxEVT_COMMAND_CHECKBOX_CLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_CHECKLISTBOX_TOGGLED", wxEVT_COMMAND_CHECKLISTBOX_TOGGLED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED", wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING", wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_CHOICE_SELECTED", wxEVT_COMMAND_CHOICE_SELECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_COLLPANE_CHANGED", wxEVT_COMMAND_COLLPANE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_COLOURPICKER_CHANGED", wxEVT_COMMAND_COLOURPICKER_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_COMBOBOX_SELECTED", wxEVT_COMMAND_COMBOBOX_SELECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DIRPICKER_CHANGED", wxEVT_COMMAND_DIRPICKER_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_ENTER", wxEVT_COMMAND_ENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_FILEPICKER_CHANGED", wxEVT_COMMAND_FILEPICKER_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_FIND", wxEVT_COMMAND_FIND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_FIND_CLOSE", wxEVT_COMMAND_FIND_CLOSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_FIND_NEXT", wxEVT_COMMAND_FIND_NEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_FIND_REPLACE", wxEVT_COMMAND_FIND_REPLACE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_FIND_REPLACE_ALL", wxEVT_COMMAND_FIND_REPLACE_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_FONTPICKER_CHANGED", wxEVT_COMMAND_FONTPICKER_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_HTML_CELL_CLICKED", wxEVT_COMMAND_HTML_CELL_CLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_HTML_CELL_HOVER", wxEVT_COMMAND_HTML_CELL_HOVER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_HTML_LINK_CLICKED", wxEVT_COMMAND_HTML_LINK_CLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_HYPERLINK", wxEVT_COMMAND_HYPERLINK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_KILL_FOCUS", wxEVT_COMMAND_KILL_FOCUS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LEFT_CLICK", wxEVT_COMMAND_LEFT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LEFT_DCLICK", wxEVT_COMMAND_LEFT_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED", wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING", wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LISTBOX_DOUBLECLICKED", wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LISTBOX_SELECTED", wxEVT_COMMAND_LISTBOX_SELECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_BEGIN_DRAG", wxEVT_COMMAND_LIST_BEGIN_DRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT", wxEVT_COMMAND_LIST_BEGIN_LABEL_EDIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_BEGIN_RDRAG", wxEVT_COMMAND_LIST_BEGIN_RDRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_CACHE_HINT", wxEVT_COMMAND_LIST_CACHE_HINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_COL_BEGIN_DRAG", wxEVT_COMMAND_LIST_COL_BEGIN_DRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_COL_CLICK", wxEVT_COMMAND_LIST_COL_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_COL_DRAGGING", wxEVT_COMMAND_LIST_COL_DRAGGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_COL_END_DRAG", wxEVT_COMMAND_LIST_COL_END_DRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_COL_RIGHT_CLICK", wxEVT_COMMAND_LIST_COL_RIGHT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS", wxEVT_COMMAND_LIST_DELETE_ALL_ITEMS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_DELETE_ITEM", wxEVT_COMMAND_LIST_DELETE_ITEM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_END_LABEL_EDIT", wxEVT_COMMAND_LIST_END_LABEL_EDIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_INSERT_ITEM", wxEVT_COMMAND_LIST_INSERT_ITEM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_ITEM_ACTIVATED", wxEVT_COMMAND_LIST_ITEM_ACTIVATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_ITEM_DESELECTED", wxEVT_COMMAND_LIST_ITEM_DESELECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_ITEM_FOCUSED", wxEVT_COMMAND_LIST_ITEM_FOCUSED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK", wxEVT_COMMAND_LIST_ITEM_MIDDLE_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK", wxEVT_COMMAND_LIST_ITEM_RIGHT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_ITEM_SELECTED", wxEVT_COMMAND_LIST_ITEM_SELECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_LIST_KEY_DOWN", wxEVT_COMMAND_LIST_KEY_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_MENU_SELECTED", wxEVT_COMMAND_MENU_SELECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED", wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING", wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RADIOBOX_SELECTED", wxEVT_COMMAND_RADIOBOX_SELECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RADIOBUTTON_SELECTED", wxEVT_COMMAND_RADIOBUTTON_SELECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_BUFFER_RESET", wxEVT_COMMAND_RICHTEXT_BUFFER_RESET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_CHARACTER", wxEVT_COMMAND_RICHTEXT_CHARACTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED", wxEVT_COMMAND_RICHTEXT_CONTENT_DELETED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED", wxEVT_COMMAND_RICHTEXT_CONTENT_INSERTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_DELETE", wxEVT_COMMAND_RICHTEXT_DELETE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_LEFT_CLICK", wxEVT_COMMAND_RICHTEXT_LEFT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK", wxEVT_COMMAND_RICHTEXT_LEFT_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK", wxEVT_COMMAND_RICHTEXT_MIDDLE_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_RETURN", wxEVT_COMMAND_RICHTEXT_RETURN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK", wxEVT_COMMAND_RICHTEXT_RIGHT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED", wxEVT_COMMAND_RICHTEXT_SELECTION_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED", wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING", wxEVT_COMMAND_RICHTEXT_STYLESHEET_CHANGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED", wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING", wxEVT_COMMAND_RICHTEXT_STYLESHEET_REPLACING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED", wxEVT_COMMAND_RICHTEXT_STYLE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RIGHT_CLICK", wxEVT_COMMAND_RIGHT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_RIGHT_DCLICK", wxEVT_COMMAND_RIGHT_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN", wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN", wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_SET_FOCUS", wxEVT_COMMAND_SET_FOCUS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_SLIDER_UPDATED", wxEVT_COMMAND_SLIDER_UPDATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_SPINCTRL_UPDATED", wxEVT_COMMAND_SPINCTRL_UPDATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_SPLITTER_DOUBLECLICKED", wxEVT_COMMAND_SPLITTER_DOUBLECLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED", wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING", wxEVT_COMMAND_SPLITTER_SASH_POS_CHANGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_SPLITTER_UNSPLIT", wxEVT_COMMAND_SPLITTER_UNSPLIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TEXT_COPY", wxEVT_COMMAND_TEXT_COPY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TEXT_CUT", wxEVT_COMMAND_TEXT_CUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TEXT_ENTER", wxEVT_COMMAND_TEXT_ENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TEXT_MAXLEN", wxEVT_COMMAND_TEXT_MAXLEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TEXT_PASTE", wxEVT_COMMAND_TEXT_PASTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TEXT_UPDATED", wxEVT_COMMAND_TEXT_UPDATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TEXT_URL", wxEVT_COMMAND_TEXT_URL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TOGGLEBUTTON_CLICKED", wxEVT_COMMAND_TOGGLEBUTTON_CLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED", wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING", wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TOOL_CLICKED", wxEVT_COMMAND_TOOL_CLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TOOL_ENTER", wxEVT_COMMAND_TOOL_ENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TOOL_RCLICKED", wxEVT_COMMAND_TOOL_RCLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED", wxEVT_COMMAND_TREEBOOK_NODE_COLLAPSED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED", wxEVT_COMMAND_TREEBOOK_NODE_EXPANDED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED", wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING", wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_BEGIN_DRAG", wxEVT_COMMAND_TREE_BEGIN_DRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT", wxEVT_COMMAND_TREE_BEGIN_LABEL_EDIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_BEGIN_RDRAG", wxEVT_COMMAND_TREE_BEGIN_RDRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_DELETE_ITEM", wxEVT_COMMAND_TREE_DELETE_ITEM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_END_DRAG", wxEVT_COMMAND_TREE_END_DRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_END_LABEL_EDIT", wxEVT_COMMAND_TREE_END_LABEL_EDIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_GET_INFO", wxEVT_COMMAND_TREE_GET_INFO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_ITEM_ACTIVATED", wxEVT_COMMAND_TREE_ITEM_ACTIVATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_ITEM_COLLAPSED", wxEVT_COMMAND_TREE_ITEM_COLLAPSED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_ITEM_COLLAPSING", wxEVT_COMMAND_TREE_ITEM_COLLAPSING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_ITEM_EXPANDED", wxEVT_COMMAND_TREE_ITEM_EXPANDED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_ITEM_EXPANDING", wxEVT_COMMAND_TREE_ITEM_EXPANDING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP", wxEVT_COMMAND_TREE_ITEM_GETTOOLTIP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_ITEM_MENU", wxEVT_COMMAND_TREE_ITEM_MENU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK", wxEVT_COMMAND_TREE_ITEM_MIDDLE_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK", wxEVT_COMMAND_TREE_ITEM_RIGHT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_KEY_DOWN", wxEVT_COMMAND_TREE_KEY_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_SEL_CHANGED", wxEVT_COMMAND_TREE_SEL_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_SEL_CHANGING", wxEVT_COMMAND_TREE_SEL_CHANGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_SET_INFO", wxEVT_COMMAND_TREE_SET_INFO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK", wxEVT_COMMAND_TREE_STATE_IMAGE_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_VLBOX_SELECTED", wxEVT_COMMAND_VLBOX_SELECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CONTEXT_MENU", wxEVT_CONTEXT_MENU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_CREATE", wxEVT_CREATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_DATE_CHANGED", wxEVT_DATE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_DESTROY", wxEVT_DESTROY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_DETAILED_HELP", wxEVT_DETAILED_HELP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_DIALUP_CONNECTED", wxEVT_DIALUP_CONNECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_DIALUP_DISCONNECTED", wxEVT_DIALUP_DISCONNECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_DISPLAY_CHANGED", wxEVT_DISPLAY_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_DROP_FILES", wxEVT_DROP_FILES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_END_PROCESS", wxEVT_END_PROCESS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_END_SESSION", wxEVT_END_SESSION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_ENTER_WINDOW", wxEVT_ENTER_WINDOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_ERASE_BACKGROUND	", wxEVT_ERASE_BACKGROUND	, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_CELL_BEGIN_DRAG", wxEVT_GRID_CELL_BEGIN_DRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_CELL_CHANGE", wxEVT_GRID_CELL_CHANGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_CELL_LEFT_CLICK", wxEVT_GRID_CELL_LEFT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_CELL_LEFT_DCLICK", wxEVT_GRID_CELL_LEFT_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_CELL_RIGHT_CLICK", wxEVT_GRID_CELL_RIGHT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_CELL_RIGHT_DCLICK", wxEVT_GRID_CELL_RIGHT_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_COL_MOVE", wxEVT_GRID_COL_MOVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_COL_SIZE", wxEVT_GRID_COL_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_EDITOR_CREATED", wxEVT_GRID_EDITOR_CREATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_EDITOR_HIDDEN", wxEVT_GRID_EDITOR_HIDDEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_EDITOR_SHOWN", wxEVT_GRID_EDITOR_SHOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_LABEL_LEFT_CLICK", wxEVT_GRID_LABEL_LEFT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_LABEL_LEFT_DCLICK", wxEVT_GRID_LABEL_LEFT_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_LABEL_RIGHT_CLICK", wxEVT_GRID_LABEL_RIGHT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_LABEL_RIGHT_DCLICK", wxEVT_GRID_LABEL_RIGHT_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_RANGE_SELECT", wxEVT_GRID_RANGE_SELECT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_ROW_SIZE", wxEVT_GRID_ROW_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_GRID_SELECT_CELL", wxEVT_GRID_SELECT_CELL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_HELP", wxEVT_HELP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_HIBERNATE", wxEVT_HIBERNATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_ICONIZE", wxEVT_ICONIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_IDLE", wxEVT_IDLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_INIT_DIALOG", wxEVT_INIT_DIALOG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_JOY_BUTTON_DOWN", wxEVT_JOY_BUTTON_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_JOY_BUTTON_UP", wxEVT_JOY_BUTTON_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_JOY_MOVE", wxEVT_JOY_MOVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_JOY_ZMOVE", wxEVT_JOY_ZMOVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_KEY_DOWN", wxEVT_KEY_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_KEY_UP", wxEVT_KEY_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_KILL_FOCUS", wxEVT_KILL_FOCUS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_LEAVE_WINDOW", wxEVT_LEAVE_WINDOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_LEFT_DCLICK", wxEVT_LEFT_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_LEFT_DOWN", wxEVT_LEFT_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_LEFT_UP", wxEVT_LEFT_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MAXIMIZE", wxEVT_MAXIMIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MENU_CLOSE", wxEVT_MENU_CLOSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MENU_HIGHLIGHT", wxEVT_MENU_HIGHLIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MENU_OPEN", wxEVT_MENU_OPEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MIDDLE_DCLICK", wxEVT_MIDDLE_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MIDDLE_DOWN", wxEVT_MIDDLE_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MIDDLE_UP", wxEVT_MIDDLE_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MOTION", wxEVT_MOTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MOUSEWHEEL", wxEVT_MOUSEWHEEL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MOUSE_CAPTURE_CHANGED", wxEVT_MOUSE_CAPTURE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MOUSE_CAPTURE_LOST", wxEVT_MOUSE_CAPTURE_LOST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MOVE", wxEVT_MOVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MOVING", wxEVT_MOVING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_NAVIGATION_KEY", wxEVT_NAVIGATION_KEY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_NC_PAINT", wxEVT_NC_PAINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_PAINT", wxEVT_PAINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_PALETTE_CHANGED", wxEVT_PALETTE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_QUERY_END_SESSION", wxEVT_QUERY_END_SESSION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_QUERY_LAYOUT_INFO", wxEVT_QUERY_LAYOUT_INFO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_QUERY_NEW_PALETTE", wxEVT_QUERY_NEW_PALETTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_RIGHT_DCLICK", wxEVT_RIGHT_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_RIGHT_DOWN", wxEVT_RIGHT_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_RIGHT_UP", wxEVT_RIGHT_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SASH_DRAGGED", wxEVT_SASH_DRAGGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLLWIN_BOTTOM", wxEVT_SCROLLWIN_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLLWIN_LINEDOWN", wxEVT_SCROLLWIN_LINEDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLLWIN_LINEUP", wxEVT_SCROLLWIN_LINEUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLLWIN_PAGEDOWN", wxEVT_SCROLLWIN_PAGEDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLLWIN_PAGEUP", wxEVT_SCROLLWIN_PAGEUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLLWIN_THUMBRELEASE", wxEVT_SCROLLWIN_THUMBRELEASE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLLWIN_THUMBTRACK", wxEVT_SCROLLWIN_THUMBTRACK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLLWIN_TOP", wxEVT_SCROLLWIN_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLL_BOTTOM", wxEVT_SCROLL_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLL_CHANGED", wxEVT_SCROLL_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLL_LINEDOWN", wxEVT_SCROLL_LINEDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLL_LINEUP", wxEVT_SCROLL_LINEUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLL_PAGEDOWN", wxEVT_SCROLL_PAGEDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLL_PAGEUP", wxEVT_SCROLL_PAGEUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLL_THUMBRELEASE", wxEVT_SCROLL_THUMBRELEASE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLL_THUMBTRACK", wxEVT_SCROLL_THUMBTRACK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SCROLL_TOP", wxEVT_SCROLL_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SET_CURSOR", wxEVT_SET_CURSOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SET_FOCUS", wxEVT_SET_FOCUS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SHOW", wxEVT_SHOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SIZE", wxEVT_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SIZING", wxEVT_SIZING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SOCKET", wxEVT_SOCKET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SYS_COLOUR_CHANGED", wxEVT_SYS_COLOUR_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_TASKBAR_CLICK", wxEVT_TASKBAR_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_TASKBAR_LEFT_DCLICK", wxEVT_TASKBAR_LEFT_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_TASKBAR_LEFT_DOWN", wxEVT_TASKBAR_LEFT_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_TASKBAR_LEFT_UP", wxEVT_TASKBAR_LEFT_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_TASKBAR_MOVE", wxEVT_TASKBAR_MOVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_TASKBAR_RIGHT_DCLICK", wxEVT_TASKBAR_RIGHT_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_TASKBAR_RIGHT_DOWN", wxEVT_TASKBAR_RIGHT_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_TASKBAR_RIGHT_UP", wxEVT_TASKBAR_RIGHT_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_TIMER", wxEVT_TIMER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_UPDATE_UI", wxEVT_UPDATE_UI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_WIZARD_CANCEL", wxEVT_WIZARD_CANCEL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_WIZARD_FINISHED", wxEVT_WIZARD_FINISHED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_WIZARD_HELP", wxEVT_WIZARD_HELP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_WIZARD_PAGE_CHANGED", wxEVT_WIZARD_PAGE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_WIZARD_PAGE_CHANGING", wxEVT_WIZARD_PAGE_CHANGING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_WIZARD_PAGE_SHOWN", wxEVT_WIZARD_PAGE_SHOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEXPAND", wxEXPAND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFD_CHANGE_DIR", wxFD_CHANGE_DIR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFD_DEFAULT_STYLE", wxFD_DEFAULT_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFD_FILE_MUST_EXIST", wxFD_FILE_MUST_EXIST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFD_MULTIPLE", wxFD_MULTIPLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFD_OPEN", wxFD_OPEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFD_OVERWRITE_PROMPT", wxFD_OVERWRITE_PROMPT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFD_PREVIEW", wxFD_PREVIEW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFD_SAVE", wxFD_SAVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILE_KIND_DISK", wxFILE_KIND_DISK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILE_KIND_PIPE", wxFILE_KIND_PIPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILE_KIND_TERMINAL", wxFILE_KIND_TERMINAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILE_KIND_UNKNOWN", wxFILE_KIND_UNKNOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILTER_ALPHA", wxFILTER_ALPHA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILTER_ALPHANUMERIC", wxFILTER_ALPHANUMERIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILTER_DIGITS", wxFILTER_DIGITS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILTER_EMPTY", wxFILTER_EMPTY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILTER_EXCLUDE_CHAR_LIST", wxFILTER_EXCLUDE_CHAR_LIST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILTER_EXCLUDE_LIST", wxFILTER_EXCLUDE_LIST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILTER_INCLUDE_CHAR_LIST", wxFILTER_INCLUDE_CHAR_LIST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILTER_INCLUDE_LIST", wxFILTER_INCLUDE_LIST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFILTER_NUMERIC", wxFILTER_NUMERIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFIXED_LENGTH", 0x0400, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFIXED_MINSIZE", wxFIXED_MINSIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFLEX_GROWMODE_ALL", wxFLEX_GROWMODE_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFLEX_GROWMODE_SPECIFIED", wxFLEX_GROWMODE_SPECIFIED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFLOOD_BORDER", wxFLOOD_BORDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFLOOD_SURFACE", wxFLOOD_SURFACE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFLP_CHANGE_DIR", wxFLP_CHANGE_DIR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFLP_DEFAULT_STYLE", wxFLP_DEFAULT_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFLP_FILE_MUST_EXIST", wxFLP_FILE_MUST_EXIST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFLP_OPEN", wxFLP_OPEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFLP_OVERWRITE_PROMPT", wxFLP_OVERWRITE_PROMPT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFLP_SAVE", wxFLP_SAVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFLP_USE_TEXTCTRL", wxFLP_USE_TEXTCTRL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFNTP_DEFAULT_STYLE", wxFNTP_DEFAULT_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFNTP_FONTDESC_AS_LABEL", wxFNTP_FONTDESC_AS_LABEL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFNTP_USEFONT_FOR_LABEL", wxFNTP_USEFONT_FOR_LABEL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFNTP_USE_TEXTCTRL", wxFNTP_USE_TEXTCTRL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ALTERNATIVE", wxFONTENCODING_ALTERNATIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_BIG5", wxFONTENCODING_BIG5, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_BULGARIAN", wxFONTENCODING_BULGARIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP1250", wxFONTENCODING_CP1250, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP1251", wxFONTENCODING_CP1251, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP1252", wxFONTENCODING_CP1252, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP1253", wxFONTENCODING_CP1253, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP1254", wxFONTENCODING_CP1254, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP1255", wxFONTENCODING_CP1255, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP1256", wxFONTENCODING_CP1256, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP1257", wxFONTENCODING_CP1257, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP12_MAX", wxFONTENCODING_CP12_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP437", wxFONTENCODING_CP437, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP850", wxFONTENCODING_CP850, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP852", wxFONTENCODING_CP852, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP855", wxFONTENCODING_CP855, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP866", wxFONTENCODING_CP866, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP874", wxFONTENCODING_CP874, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP932", wxFONTENCODING_CP932, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP936", wxFONTENCODING_CP936, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP949", wxFONTENCODING_CP949, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_CP950", wxFONTENCODING_CP950, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_DEFAULT", wxFONTENCODING_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_EUC_JP", wxFONTENCODING_EUC_JP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_EUC_KR", wxFONTENCODING_EUC_KR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_GB2312", wxFONTENCODING_GB2312, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO2022_JP", wxFONTENCODING_ISO2022_JP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_1", wxFONTENCODING_ISO8859_1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_10", wxFONTENCODING_ISO8859_10, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_11", wxFONTENCODING_ISO8859_11, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_12", wxFONTENCODING_ISO8859_12, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_13", wxFONTENCODING_ISO8859_13, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_14", wxFONTENCODING_ISO8859_14, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_15", wxFONTENCODING_ISO8859_15, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_2", wxFONTENCODING_ISO8859_2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_3", wxFONTENCODING_ISO8859_3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_4", wxFONTENCODING_ISO8859_4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_5", wxFONTENCODING_ISO8859_5, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_6", wxFONTENCODING_ISO8859_6, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_7", wxFONTENCODING_ISO8859_7, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_8", wxFONTENCODING_ISO8859_8, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_9", wxFONTENCODING_ISO8859_9, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_ISO8859_MAX", wxFONTENCODING_ISO8859_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_KOI8", wxFONTENCODING_KOI8, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_KOI8_U", wxFONTENCODING_KOI8_U, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACARABIC", wxFONTENCODING_MACARABIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACARABICEXT", wxFONTENCODING_MACARABICEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACARMENIAN", wxFONTENCODING_MACARMENIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACBENGALI", wxFONTENCODING_MACBENGALI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACBURMESE", wxFONTENCODING_MACBURMESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACCELTIC", wxFONTENCODING_MACCELTIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACCENTRALEUR", wxFONTENCODING_MACCENTRALEUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACCHINESESIMP", wxFONTENCODING_MACCHINESESIMP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACCHINESETRAD", wxFONTENCODING_MACCHINESETRAD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACCROATIAN", wxFONTENCODING_MACCROATIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACCYRILLIC", wxFONTENCODING_MACCYRILLIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACDEVANAGARI", wxFONTENCODING_MACDEVANAGARI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACDINGBATS", wxFONTENCODING_MACDINGBATS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACETHIOPIC", wxFONTENCODING_MACETHIOPIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACGAELIC", wxFONTENCODING_MACGAELIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACGEORGIAN", wxFONTENCODING_MACGEORGIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACGREEK", wxFONTENCODING_MACGREEK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACGUJARATI", wxFONTENCODING_MACGUJARATI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACGURMUKHI", wxFONTENCODING_MACGURMUKHI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACHEBREW", wxFONTENCODING_MACHEBREW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACICELANDIC", wxFONTENCODING_MACICELANDIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACJAPANESE", wxFONTENCODING_MACJAPANESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACKANNADA", wxFONTENCODING_MACKANNADA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACKEYBOARD", wxFONTENCODING_MACKEYBOARD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACKHMER", wxFONTENCODING_MACKHMER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACKOREAN", wxFONTENCODING_MACKOREAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACLAOTIAN", wxFONTENCODING_MACLAOTIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACMALAJALAM", wxFONTENCODING_MACMALAJALAM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACMAX", wxFONTENCODING_MACMAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACMIN", wxFONTENCODING_MACMIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACMONGOLIAN", wxFONTENCODING_MACMONGOLIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACORIYA", wxFONTENCODING_MACORIYA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACROMAN", wxFONTENCODING_MACROMAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACROMANIAN", wxFONTENCODING_MACROMANIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACSINHALESE", wxFONTENCODING_MACSINHALESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACSYMBOL", wxFONTENCODING_MACSYMBOL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACTAMIL", wxFONTENCODING_MACTAMIL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACTELUGU", wxFONTENCODING_MACTELUGU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACTHAI", wxFONTENCODING_MACTHAI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACTIBETAN", wxFONTENCODING_MACTIBETAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACTURKISH", wxFONTENCODING_MACTURKISH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MACVIATNAMESE", wxFONTENCODING_MACVIATNAMESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_MAX", wxFONTENCODING_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_SHIFT_JIS", wxFONTENCODING_SHIFT_JIS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_SYSTEM", wxFONTENCODING_SYSTEM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_UNICODE", wxFONTENCODING_UNICODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_UTF16", wxFONTENCODING_UTF16, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_UTF16BE", wxFONTENCODING_UTF16BE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_UTF16LE", wxFONTENCODING_UTF16LE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_UTF32", wxFONTENCODING_UTF32, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_UTF32BE", wxFONTENCODING_UTF32BE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_UTF32LE", wxFONTENCODING_UTF32LE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_UTF7", wxFONTENCODING_UTF7, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTENCODING_UTF8", wxFONTENCODING_UTF8, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFAMILY_DECORATIVE", wxFONTFAMILY_DECORATIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFAMILY_DEFAULT", wxFONTFAMILY_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFAMILY_MAX", wxFONTFAMILY_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFAMILY_MODERN", wxFONTFAMILY_MODERN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFAMILY_ROMAN", wxFONTFAMILY_ROMAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFAMILY_SCRIPT", wxFONTFAMILY_SCRIPT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFAMILY_SWISS", wxFONTFAMILY_SWISS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFAMILY_TELETYPE", wxFONTFAMILY_TELETYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFAMILY_UNKNOWN", wxFONTFAMILY_UNKNOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFLAG_ANTIALIASED", wxFONTFLAG_ANTIALIASED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFLAG_BOLD", wxFONTFLAG_BOLD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFLAG_DEFAULT", wxFONTFLAG_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFLAG_ITALIC", wxFONTFLAG_ITALIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFLAG_LIGHT", wxFONTFLAG_LIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFLAG_MASK", wxFONTFLAG_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFLAG_NOT_ANTIALIASED", wxFONTFLAG_NOT_ANTIALIASED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFLAG_SLANT", wxFONTFLAG_SLANT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFLAG_STRIKETHROUGH", wxFONTFLAG_STRIKETHROUGH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTFLAG_UNDERLINED", wxFONTFLAG_UNDERLINED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTSIZE_LARGE", wxFONTSIZE_LARGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTSIZE_MEDIUM", wxFONTSIZE_MEDIUM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTSIZE_SMALL", wxFONTSIZE_SMALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTSIZE_XX_LARGE", wxFONTSIZE_XX_LARGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTSIZE_XX_SMALL", wxFONTSIZE_XX_SMALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTSIZE_X_LARGE", wxFONTSIZE_X_LARGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTSIZE_X_SMALL", wxFONTSIZE_X_SMALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTSTYLE_ITALIC", wxFONTSTYLE_ITALIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTSTYLE_MAX", wxFONTSTYLE_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTSTYLE_NORMAL", wxFONTSTYLE_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTSTYLE_SLANT", wxFONTSTYLE_SLANT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTWEIGHT_BOLD", wxFONTWEIGHT_BOLD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTWEIGHT_LIGHT", wxFONTWEIGHT_LIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTWEIGHT_MAX", wxFONTWEIGHT_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFONTWEIGHT_NORMAL", wxFONTWEIGHT_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFORWARD", 0x00002000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFRAME_DRAWER", 0x0020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFRAME_EX_METAL", 0x00000040, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFRAME_NO_WINDOW_MENU", 0x0100, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFR_DOWN", wxFR_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFR_MATCHCASE", wxFR_MATCHCASE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFR_WHOLEWORD", wxFR_WHOLEWORD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFSW_EVENT_ACCESS", wxFSW_EVENT_ACCESS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFSW_EVENT_ALL", wxFSW_EVENT_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFSW_EVENT_CREATE", wxFSW_EVENT_CREATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFSW_EVENT_DELETE", wxFSW_EVENT_DELETE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFSW_EVENT_ERROR", wxFSW_EVENT_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFSW_EVENT_MODIFY", wxFSW_EVENT_MODIFY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFSW_EVENT_RENAME", wxFSW_EVENT_RENAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFSW_EVENT_WARNING", wxFSW_EVENT_WARNING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFS_READ", wxFS_READ, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFS_SEEKABLE", wxFS_SEEKABLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFULL_REPAINT_ON_RESIZE", wxFULL_REPAINT_ON_RESIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFromCurrent", wxFromCurrent, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFromEnd", wxFromEnd, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxFromStart", wxFromStart, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxGA_HORIZONTAL", wxGA_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxGA_SMOOTH", wxGA_SMOOTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxGA_VERTICAL", wxGA_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxGRID_FLOAT_FORMAT_COMPACT", wxGRID_FLOAT_FORMAT_COMPACT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxGRID_FLOAT_FORMAT_DEFAULT", wxGRID_FLOAT_FORMAT_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxGRID_FLOAT_FORMAT_FIXED", wxGRID_FLOAT_FORMAT_FIXED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxGRID_FLOAT_FORMAT_SCIENTIFIC", wxGRID_FLOAT_FORMAT_SCIENTIFIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxGRID_FLOAT_FORMAT_UPPER", wxGRID_FLOAT_FORMAT_UPPER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxGROW", wxGROW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHDR_SORT_ICON_DOWN", wxHDR_SORT_ICON_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHDR_SORT_ICON_UP", wxHDR_SORT_ICON_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHELP", 0x00001000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHL_ALIGN_CENTRE", wxHL_ALIGN_CENTRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHL_ALIGN_LEFT", wxHL_ALIGN_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHL_ALIGN_RIGHT", wxHL_ALIGN_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHL_CONTEXTMENU", wxHL_CONTEXTMENU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHL_DEFAULT_STYLE", wxHL_DEFAULT_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHORIZONTAL", wxHORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHSCROLL", wxHSCROLL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_MAX", wxHT_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_NOWHERE", wxHT_NOWHERE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_SCROLLBAR_ARROW_LINE_1", wxHT_SCROLLBAR_ARROW_LINE_1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_SCROLLBAR_ARROW_LINE_2", wxHT_SCROLLBAR_ARROW_LINE_2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_SCROLLBAR_ARROW_PAGE_1", wxHT_SCROLLBAR_ARROW_PAGE_1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_SCROLLBAR_ARROW_PAGE_2", wxHT_SCROLLBAR_ARROW_PAGE_2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_SCROLLBAR_BAR_1", wxHT_SCROLLBAR_BAR_1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_SCROLLBAR_BAR_2", wxHT_SCROLLBAR_BAR_2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_SCROLLBAR_FIRST", wxHT_SCROLLBAR_FIRST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_SCROLLBAR_LAST", wxHT_SCROLLBAR_LAST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_SCROLLBAR_THUMB", wxHT_SCROLLBAR_THUMB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_WINDOW_CORNER", wxHT_WINDOW_CORNER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_WINDOW_HORZ_SCROLLBAR", wxHT_WINDOW_HORZ_SCROLLBAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_WINDOW_INSIDE", wxHT_WINDOW_INSIDE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_WINDOW_OUTSIDE", wxHT_WINDOW_OUTSIDE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHT_WINDOW_VERT_SCROLLBAR", wxHT_WINDOW_VERT_SCROLLBAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHW_DEFAULT_STYLE", wxHW_DEFAULT_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHW_NO_SELECTION", wxHW_NO_SELECTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHW_SCROLLBAR_AUTO", wxHW_SCROLLBAR_AUTO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHW_SCROLLBAR_NEVER", wxHW_SCROLLBAR_NEVER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxHeight", wxHeight, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxICONIZE", 0x4000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxICON_ERROR", wxICON_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxICON_EXCLAMATION", wxICON_EXCLAMATION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxICON_HAND", wxICON_HAND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxICON_INFORMATION", wxICON_INFORMATION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxICON_NONE", 0x00040000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxICON_QUESTION", wxICON_QUESTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIDLE_PROCESS_ALL", wxIDLE_PROCESS_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIDLE_PROCESS_SPECIFIED", wxIDLE_PROCESS_SPECIFIED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_ABORT", wxID_ABORT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_ABOUT", wxID_ABOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_ADD", wxID_ADD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_ANY", wxID_ANY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_APPLY", wxID_APPLY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_AUTO_HIGHEST", wxID_AUTO_HIGHEST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_AUTO_LOWEST", wxID_AUTO_LOWEST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_BACKWARD", wxID_BACKWARD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_BOLD", wxID_BOLD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_BOTTOM", wxID_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_CANCEL", wxID_CANCEL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_CDROM", wxID_CDROM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_CLEAR", wxID_CLEAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_CLOSE", wxID_CLOSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_CLOSE_ALL", wxID_CLOSE_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_CLOSE_FRAME", wxID_CLOSE_FRAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_CONTEXT_HELP", wxID_CONTEXT_HELP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_CONVERT", wxID_CONVERT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_COPY", wxID_COPY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_CUT", wxID_CUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_DEFAULT", wxID_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_DELETE", wxID_DELETE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_DOWN", wxID_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_DUPLICATE", wxID_DUPLICATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_EDIT", wxID_EDIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_EXECUTE", wxID_EXECUTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_EXIT", wxID_EXIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILE", wxID_FILE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILE1", wxID_FILE1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILE2", wxID_FILE2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILE3", wxID_FILE3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILE4", wxID_FILE4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILE5", wxID_FILE5, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILE6", wxID_FILE6, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILE7", wxID_FILE7, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILE8", wxID_FILE8, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILE9", wxID_FILE9, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILECTRL", wxID_FILECTRL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FILEDLGG", wxID_FILEDLGG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FIND", wxID_FIND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FIRST", wxID_FIRST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FLOPPY", wxID_FLOPPY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_FORWARD", wxID_FORWARD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_HARDDISK", wxID_HARDDISK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_HELP", wxID_HELP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_HELP_COMMANDS", wxID_HELP_COMMANDS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_HELP_CONTENTS", wxID_HELP_CONTENTS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_HELP_CONTEXT", wxID_HELP_CONTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_HELP_INDEX", wxID_HELP_INDEX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_HELP_PROCEDURES", wxID_HELP_PROCEDURES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_HELP_SEARCH", wxID_HELP_SEARCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_HIGHEST", wxID_HIGHEST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_HOME", wxID_HOME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_ICONIZE_FRAME", wxID_ICONIZE_FRAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_IGNORE", wxID_IGNORE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_INDENT", wxID_INDENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_INDEX", wxID_INDEX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_INFO", wxID_INFO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_ITALIC", wxID_ITALIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_JUMP_TO", wxID_JUMP_TO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_JUSTIFY_CENTER", wxID_JUSTIFY_CENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_JUSTIFY_FILL", wxID_JUSTIFY_FILL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_JUSTIFY_LEFT", wxID_JUSTIFY_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_JUSTIFY_RIGHT", wxID_JUSTIFY_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_LAST", wxID_LAST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_LOWEST", wxID_LOWEST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_MAXIMIZE_FRAME", wxID_MAXIMIZE_FRAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_MDI_WINDOW_ARRANGE_ICONS", wxID_MDI_WINDOW_ARRANGE_ICONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_MDI_WINDOW_CASCADE", wxID_MDI_WINDOW_CASCADE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_MDI_WINDOW_FIRST", wxID_MDI_WINDOW_FIRST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_MDI_WINDOW_LAST", wxID_MDI_WINDOW_LAST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_MDI_WINDOW_NEXT", wxID_MDI_WINDOW_NEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_MDI_WINDOW_PREV", wxID_MDI_WINDOW_PREV, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_MDI_WINDOW_TILE_HORZ", wxID_MDI_WINDOW_TILE_HORZ, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_MDI_WINDOW_TILE_VERT", wxID_MDI_WINDOW_TILE_VERT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_MORE", wxID_MORE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_MOVE_FRAME", wxID_MOVE_FRAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_NETWORK", wxID_NETWORK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_NEW", wxID_NEW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_NO", wxID_NO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_NOTOALL", wxID_NOTOALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_OK", wxID_OK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_OPEN", wxID_OPEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_PAGE_SETUP", wxID_PAGE_SETUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_PASTE", wxID_PASTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_PREFERENCES", wxID_PREFERENCES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_PREVIEW", wxID_PREVIEW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_PRINT", wxID_PRINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_PRINT_SETUP", wxID_PRINT_SETUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_PROPERTIES", wxID_PROPERTIES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_REDO", wxID_REDO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_REFRESH", wxID_REFRESH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_REMOVE", wxID_REMOVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_REPLACE", wxID_REPLACE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_REPLACE_ALL", wxID_REPLACE_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_RESET", wxID_RESET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_RESIZE_FRAME", wxID_RESIZE_FRAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_RESTORE_FRAME", wxID_RESTORE_FRAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_RETRY", wxID_RETRY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_REVERT", wxID_REVERT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_REVERT_TO_SAVED", wxID_REVERT_TO_SAVED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_SAVE", wxID_SAVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_SAVEAS", wxID_SAVEAS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_SELECTALL", wxID_SELECTALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_SELECT_COLOR", wxID_SELECT_COLOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_SELECT_FONT", wxID_SELECT_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_SEPARATOR", wxID_SEPARATOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_SETUP", wxID_SETUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_SORT_ASCENDING", wxID_SORT_ASCENDING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_SORT_DESCENDING", wxID_SORT_DESCENDING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_SPELL_CHECK", wxID_SPELL_CHECK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_STATIC", wxID_STATIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_STOP", wxID_STOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_STRIKETHROUGH", wxID_STRIKETHROUGH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_SYSTEM_MENU", wxID_SYSTEM_MENU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_TOP", wxID_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_UNDELETE", wxID_UNDELETE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_UNDERLINE", wxID_UNDERLINE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_UNDO", wxID_UNDO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_UNINDENT", wxID_UNINDENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_UP", wxID_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_VIEW_DETAILS", wxID_VIEW_DETAILS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_VIEW_LARGEICONS", wxID_VIEW_LARGEICONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_VIEW_LIST", wxID_VIEW_LIST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_VIEW_SMALLICONS", wxID_VIEW_SMALLICONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_VIEW_SORTDATE", wxID_VIEW_SORTDATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_VIEW_SORTNAME", wxID_VIEW_SORTNAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_VIEW_SORTSIZE", wxID_VIEW_SORTSIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_VIEW_SORTTYPE", wxID_VIEW_SORTTYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_YES", wxID_YES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_YESTOALL", wxID_YESTOALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_ZOOM_100", wxID_ZOOM_100, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_ZOOM_FIT", wxID_ZOOM_FIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_ZOOM_IN", wxID_ZOOM_IN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxID_ZOOM_OUT", wxID_ZOOM_OUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGELIST_DRAW_FOCUSED", 0x0008, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGELIST_DRAW_NORMAL", wxIMAGELIST_DRAW_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGELIST_DRAW_SELECTED", 0x0004, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGELIST_DRAW_TRANSPARENT", 0x0002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGE_QUALITY_BICUBIC", wxIMAGE_QUALITY_BICUBIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGE_QUALITY_BILINEAR", wxIMAGE_QUALITY_BILINEAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGE_QUALITY_BOX_AVERAGE", wxIMAGE_QUALITY_BOX_AVERAGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGE_QUALITY_HIGH", wxIMAGE_QUALITY_HIGH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGE_QUALITY_NEAREST", wxIMAGE_QUALITY_NEAREST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGE_QUALITY_NORMAL", wxIMAGE_QUALITY_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGE_RESOLUTION_CM", wxIMAGE_RESOLUTION_CM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGE_RESOLUTION_INCHES", wxIMAGE_RESOLUTION_INCHES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxINTERPOLATION_BEST", wxINTERPOLATION_BEST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxINTERPOLATION_DEFAULT", wxINTERPOLATION_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxINTERPOLATION_FAST", wxINTERPOLATION_FAST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxINTERPOLATION_GOOD", wxINTERPOLATION_GOOD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxINVERT", wxINVERT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_BITMAP", wxIPC_BITMAP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_DIB", wxIPC_DIB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_DIF", wxIPC_DIF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_ENHMETAFILE", wxIPC_ENHMETAFILE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_FILENAME", wxIPC_FILENAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_INVALID", wxIPC_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_LOCALE", wxIPC_LOCALE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_METAFILE", wxIPC_METAFILE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_OEMTEXT", wxIPC_OEMTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_PALETTE", wxIPC_PALETTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_PENDATA", wxIPC_PENDATA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_PRIVATE", wxIPC_PRIVATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_RIFF", wxIPC_RIFF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_SYLK", wxIPC_SYLK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_TEXT", wxIPC_TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_TIFF", wxIPC_TIFF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_UNICODETEXT", wxIPC_UNICODETEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_UTF16TEXT", wxIPC_UTF16TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_UTF32TEXT", wxIPC_UTF32TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_UTF8TEXT", wxIPC_UTF8TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIPC_WAVE", wxIPC_WAVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxITEM_CHECK", wxITEM_CHECK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxITEM_DROPDOWN", wxITEM_DROPDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxITEM_MAX", wxITEM_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxITEM_NORMAL", wxITEM_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxITEM_RADIO", wxITEM_RADIO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxITEM_SEPARATOR", wxITEM_SEPARATOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxInRegion", wxInRegion, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxJOIN_BEVEL", wxJOIN_BEVEL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxJOIN_INVALID", wxJOIN_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxJOIN_MITER", wxJOIN_MITER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxJOIN_ROUND", wxJOIN_ROUND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxKILL_ACCESS_DENIED", wxKILL_ACCESS_DENIED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxKILL_BAD_SIGNAL", wxKILL_BAD_SIGNAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxKILL_ERROR", wxKILL_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxKILL_NO_PROCESS", wxKILL_NO_PROCESS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxKILL_OK", wxKILL_OK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANDSCAPE", wxLANDSCAPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ABKHAZIAN", wxLANGUAGE_ABKHAZIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_AFAR", wxLANGUAGE_AFAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_AFRIKAANS", wxLANGUAGE_AFRIKAANS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ALBANIAN", wxLANGUAGE_ALBANIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_AMHARIC", wxLANGUAGE_AMHARIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC", wxLANGUAGE_ARABIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_ALGERIA", wxLANGUAGE_ARABIC_ALGERIA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_BAHRAIN", wxLANGUAGE_ARABIC_BAHRAIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_EGYPT", wxLANGUAGE_ARABIC_EGYPT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_IRAQ", wxLANGUAGE_ARABIC_IRAQ, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_JORDAN", wxLANGUAGE_ARABIC_JORDAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_KUWAIT", wxLANGUAGE_ARABIC_KUWAIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_LEBANON", wxLANGUAGE_ARABIC_LEBANON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_LIBYA", wxLANGUAGE_ARABIC_LIBYA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_MOROCCO", wxLANGUAGE_ARABIC_MOROCCO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_OMAN", wxLANGUAGE_ARABIC_OMAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_QATAR", wxLANGUAGE_ARABIC_QATAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_SAUDI_ARABIA", wxLANGUAGE_ARABIC_SAUDI_ARABIA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_SUDAN", wxLANGUAGE_ARABIC_SUDAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_SYRIA", wxLANGUAGE_ARABIC_SYRIA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_TUNISIA", wxLANGUAGE_ARABIC_TUNISIA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_UAE", wxLANGUAGE_ARABIC_UAE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARABIC_YEMEN", wxLANGUAGE_ARABIC_YEMEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ARMENIAN", wxLANGUAGE_ARMENIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ASSAMESE", wxLANGUAGE_ASSAMESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ASTURIAN", wxLANGUAGE_ASTURIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_AYMARA", wxLANGUAGE_AYMARA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_AZERI", wxLANGUAGE_AZERI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_AZERI_CYRILLIC", wxLANGUAGE_AZERI_CYRILLIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_AZERI_LATIN", wxLANGUAGE_AZERI_LATIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_BASHKIR", wxLANGUAGE_BASHKIR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_BASQUE", wxLANGUAGE_BASQUE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_BELARUSIAN", wxLANGUAGE_BELARUSIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_BENGALI", wxLANGUAGE_BENGALI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_BHUTANI", wxLANGUAGE_BHUTANI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_BIHARI", wxLANGUAGE_BIHARI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_BISLAMA", wxLANGUAGE_BISLAMA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_BOSNIAN", wxLANGUAGE_BOSNIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_BRETON", wxLANGUAGE_BRETON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_BULGARIAN", wxLANGUAGE_BULGARIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_BURMESE", wxLANGUAGE_BURMESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CAMBODIAN", wxLANGUAGE_CAMBODIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CATALAN", wxLANGUAGE_CATALAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CHINESE", wxLANGUAGE_CHINESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CHINESE_HONGKONG", wxLANGUAGE_CHINESE_HONGKONG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CHINESE_MACAU", wxLANGUAGE_CHINESE_MACAU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CHINESE_SIMPLIFIED", wxLANGUAGE_CHINESE_SIMPLIFIED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CHINESE_SINGAPORE", wxLANGUAGE_CHINESE_SINGAPORE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CHINESE_TAIWAN", wxLANGUAGE_CHINESE_TAIWAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CHINESE_TRADITIONAL", wxLANGUAGE_CHINESE_TRADITIONAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CORSICAN", wxLANGUAGE_CORSICAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CROATIAN", wxLANGUAGE_CROATIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_CZECH", wxLANGUAGE_CZECH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_DANISH", wxLANGUAGE_DANISH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_DEFAULT", wxLANGUAGE_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_DUTCH", wxLANGUAGE_DUTCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_DUTCH_BELGIAN", wxLANGUAGE_DUTCH_BELGIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH", wxLANGUAGE_ENGLISH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_AUSTRALIA", wxLANGUAGE_ENGLISH_AUSTRALIA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_BELIZE", wxLANGUAGE_ENGLISH_BELIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_BOTSWANA", wxLANGUAGE_ENGLISH_BOTSWANA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_CANADA", wxLANGUAGE_ENGLISH_CANADA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_CARIBBEAN", wxLANGUAGE_ENGLISH_CARIBBEAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_DENMARK", wxLANGUAGE_ENGLISH_DENMARK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_EIRE", wxLANGUAGE_ENGLISH_EIRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_JAMAICA", wxLANGUAGE_ENGLISH_JAMAICA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_NEW_ZEALAND", wxLANGUAGE_ENGLISH_NEW_ZEALAND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_PHILIPPINES", wxLANGUAGE_ENGLISH_PHILIPPINES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_SOUTH_AFRICA", wxLANGUAGE_ENGLISH_SOUTH_AFRICA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_TRINIDAD", wxLANGUAGE_ENGLISH_TRINIDAD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_UK", wxLANGUAGE_ENGLISH_UK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_US", wxLANGUAGE_ENGLISH_US, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ENGLISH_ZIMBABWE", wxLANGUAGE_ENGLISH_ZIMBABWE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ESPERANTO", wxLANGUAGE_ESPERANTO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ESTONIAN", wxLANGUAGE_ESTONIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_FAEROESE", wxLANGUAGE_FAEROESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_FARSI", wxLANGUAGE_FARSI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_FIJI", wxLANGUAGE_FIJI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_FINNISH", wxLANGUAGE_FINNISH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_FRENCH", wxLANGUAGE_FRENCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_FRENCH_BELGIAN", wxLANGUAGE_FRENCH_BELGIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_FRENCH_CANADIAN", wxLANGUAGE_FRENCH_CANADIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_FRENCH_LUXEMBOURG", wxLANGUAGE_FRENCH_LUXEMBOURG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_FRENCH_MONACO", wxLANGUAGE_FRENCH_MONACO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_FRENCH_SWISS", wxLANGUAGE_FRENCH_SWISS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_FRISIAN", wxLANGUAGE_FRISIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GALICIAN", wxLANGUAGE_GALICIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GEORGIAN", wxLANGUAGE_GEORGIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GERMAN", wxLANGUAGE_GERMAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GERMAN_AUSTRIAN", wxLANGUAGE_GERMAN_AUSTRIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GERMAN_BELGIUM", wxLANGUAGE_GERMAN_BELGIUM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GERMAN_LIECHTENSTEIN", wxLANGUAGE_GERMAN_LIECHTENSTEIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GERMAN_LUXEMBOURG", wxLANGUAGE_GERMAN_LUXEMBOURG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GERMAN_SWISS", wxLANGUAGE_GERMAN_SWISS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GREEK", wxLANGUAGE_GREEK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GREENLANDIC", wxLANGUAGE_GREENLANDIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GUARANI", wxLANGUAGE_GUARANI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_GUJARATI", wxLANGUAGE_GUJARATI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_HAUSA", wxLANGUAGE_HAUSA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_HEBREW", wxLANGUAGE_HEBREW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_HINDI", wxLANGUAGE_HINDI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_HUNGARIAN", wxLANGUAGE_HUNGARIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ICELANDIC", wxLANGUAGE_ICELANDIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_INDONESIAN", wxLANGUAGE_INDONESIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_INTERLINGUA", wxLANGUAGE_INTERLINGUA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_INTERLINGUE", wxLANGUAGE_INTERLINGUE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_INUKTITUT", wxLANGUAGE_INUKTITUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_INUPIAK", wxLANGUAGE_INUPIAK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_IRISH", wxLANGUAGE_IRISH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ITALIAN", wxLANGUAGE_ITALIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ITALIAN_SWISS", wxLANGUAGE_ITALIAN_SWISS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_JAPANESE", wxLANGUAGE_JAPANESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_JAVANESE", wxLANGUAGE_JAVANESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_KANNADA", wxLANGUAGE_KANNADA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_KASHMIRI", wxLANGUAGE_KASHMIRI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_KASHMIRI_INDIA", wxLANGUAGE_KASHMIRI_INDIA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_KAZAKH", wxLANGUAGE_KAZAKH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_KERNEWEK", wxLANGUAGE_KERNEWEK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_KINYARWANDA", wxLANGUAGE_KINYARWANDA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_KIRGHIZ", wxLANGUAGE_KIRGHIZ, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_KIRUNDI", wxLANGUAGE_KIRUNDI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_KONKANI", wxLANGUAGE_KONKANI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_KOREAN", wxLANGUAGE_KOREAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_KURDISH", wxLANGUAGE_KURDISH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_LAOTHIAN", wxLANGUAGE_LAOTHIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_LATIN", wxLANGUAGE_LATIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_LATVIAN", wxLANGUAGE_LATVIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_LINGALA", wxLANGUAGE_LINGALA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_LITHUANIAN", wxLANGUAGE_LITHUANIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MACEDONIAN", wxLANGUAGE_MACEDONIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MALAGASY", wxLANGUAGE_MALAGASY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MALAY", wxLANGUAGE_MALAY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MALAYALAM", wxLANGUAGE_MALAYALAM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MALAY_BRUNEI_DARUSSALAM", wxLANGUAGE_MALAY_BRUNEI_DARUSSALAM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MALAY_MALAYSIA", wxLANGUAGE_MALAY_MALAYSIA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MALTESE", wxLANGUAGE_MALTESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MANIPURI", wxLANGUAGE_MANIPURI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MAORI", wxLANGUAGE_MAORI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MARATHI", wxLANGUAGE_MARATHI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MOLDAVIAN", wxLANGUAGE_MOLDAVIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_MONGOLIAN", wxLANGUAGE_MONGOLIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_NAURU", wxLANGUAGE_NAURU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_NEPALI", wxLANGUAGE_NEPALI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_NEPALI_INDIA", wxLANGUAGE_NEPALI_INDIA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_NORWEGIAN_BOKMAL", wxLANGUAGE_NORWEGIAN_BOKMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_NORWEGIAN_NYNORSK", wxLANGUAGE_NORWEGIAN_NYNORSK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_OCCITAN", wxLANGUAGE_OCCITAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ORIYA", wxLANGUAGE_ORIYA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_OROMO", wxLANGUAGE_OROMO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_PASHTO", wxLANGUAGE_PASHTO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_POLISH", wxLANGUAGE_POLISH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_PORTUGUESE", wxLANGUAGE_PORTUGUESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_PORTUGUESE_BRAZILIAN", wxLANGUAGE_PORTUGUESE_BRAZILIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_PUNJABI", wxLANGUAGE_PUNJABI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_QUECHUA", wxLANGUAGE_QUECHUA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_RHAETO_ROMANCE", wxLANGUAGE_RHAETO_ROMANCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ROMANIAN", wxLANGUAGE_ROMANIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_RUSSIAN", wxLANGUAGE_RUSSIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_RUSSIAN_UKRAINE", wxLANGUAGE_RUSSIAN_UKRAINE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SAMI", wxLANGUAGE_SAMI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SAMOAN", wxLANGUAGE_SAMOAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SANGHO", wxLANGUAGE_SANGHO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SANSKRIT", wxLANGUAGE_SANSKRIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SCOTS_GAELIC", wxLANGUAGE_SCOTS_GAELIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SERBIAN", wxLANGUAGE_SERBIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SERBIAN_CYRILLIC", wxLANGUAGE_SERBIAN_CYRILLIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SERBIAN_LATIN", wxLANGUAGE_SERBIAN_LATIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SERBO_CROATIAN", wxLANGUAGE_SERBO_CROATIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SESOTHO", wxLANGUAGE_SESOTHO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SETSWANA", wxLANGUAGE_SETSWANA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SHONA", wxLANGUAGE_SHONA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SINDHI", wxLANGUAGE_SINDHI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SINHALESE", wxLANGUAGE_SINHALESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SISWATI", wxLANGUAGE_SISWATI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SLOVAK", wxLANGUAGE_SLOVAK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SLOVENIAN", wxLANGUAGE_SLOVENIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SOMALI", wxLANGUAGE_SOMALI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH", wxLANGUAGE_SPANISH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_ARGENTINA", wxLANGUAGE_SPANISH_ARGENTINA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_BOLIVIA", wxLANGUAGE_SPANISH_BOLIVIA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_CHILE", wxLANGUAGE_SPANISH_CHILE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_COLOMBIA", wxLANGUAGE_SPANISH_COLOMBIA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_COSTA_RICA", wxLANGUAGE_SPANISH_COSTA_RICA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_DOMINICAN_REPUBLIC", wxLANGUAGE_SPANISH_DOMINICAN_REPUBLIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_ECUADOR", wxLANGUAGE_SPANISH_ECUADOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_EL_SALVADOR", wxLANGUAGE_SPANISH_EL_SALVADOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_GUATEMALA", wxLANGUAGE_SPANISH_GUATEMALA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_HONDURAS", wxLANGUAGE_SPANISH_HONDURAS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_MEXICAN", wxLANGUAGE_SPANISH_MEXICAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_MODERN", wxLANGUAGE_SPANISH_MODERN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_NICARAGUA", wxLANGUAGE_SPANISH_NICARAGUA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_PANAMA", wxLANGUAGE_SPANISH_PANAMA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_PARAGUAY", wxLANGUAGE_SPANISH_PARAGUAY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_PERU", wxLANGUAGE_SPANISH_PERU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_PUERTO_RICO", wxLANGUAGE_SPANISH_PUERTO_RICO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_URUGUAY", wxLANGUAGE_SPANISH_URUGUAY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_US", wxLANGUAGE_SPANISH_US, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SPANISH_VENEZUELA", wxLANGUAGE_SPANISH_VENEZUELA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SUNDANESE", wxLANGUAGE_SUNDANESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SWAHILI", wxLANGUAGE_SWAHILI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SWEDISH", wxLANGUAGE_SWEDISH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_SWEDISH_FINLAND", wxLANGUAGE_SWEDISH_FINLAND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TAGALOG", wxLANGUAGE_TAGALOG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TAJIK", wxLANGUAGE_TAJIK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TAMIL", wxLANGUAGE_TAMIL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TATAR", wxLANGUAGE_TATAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TELUGU", wxLANGUAGE_TELUGU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_THAI", wxLANGUAGE_THAI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TIBETAN", wxLANGUAGE_TIBETAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TIGRINYA", wxLANGUAGE_TIGRINYA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TONGA", wxLANGUAGE_TONGA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TSONGA", wxLANGUAGE_TSONGA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TURKISH", wxLANGUAGE_TURKISH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TURKMEN", wxLANGUAGE_TURKMEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_TWI", wxLANGUAGE_TWI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_UIGHUR", wxLANGUAGE_UIGHUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_UKRAINIAN", wxLANGUAGE_UKRAINIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_UNKNOWN", wxLANGUAGE_UNKNOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_URDU", wxLANGUAGE_URDU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_URDU_INDIA", wxLANGUAGE_URDU_INDIA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_URDU_PAKISTAN", wxLANGUAGE_URDU_PAKISTAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_USER_DEFINED", wxLANGUAGE_USER_DEFINED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_UZBEK", wxLANGUAGE_UZBEK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_UZBEK_CYRILLIC", wxLANGUAGE_UZBEK_CYRILLIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_UZBEK_LATIN", wxLANGUAGE_UZBEK_LATIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_VALENCIAN", wxLANGUAGE_VALENCIAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_VIETNAMESE", wxLANGUAGE_VIETNAMESE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_VOLAPUK", wxLANGUAGE_VOLAPUK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_WELSH", wxLANGUAGE_WELSH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_WOLOF", wxLANGUAGE_WOLOF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_XHOSA", wxLANGUAGE_XHOSA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_YIDDISH", wxLANGUAGE_YIDDISH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_YORUBA", wxLANGUAGE_YORUBA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ZHUANG", wxLANGUAGE_ZHUANG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLANGUAGE_ZULU", wxLANGUAGE_ZULU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLAYOUT_BOTTOM", wxLAYOUT_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLAYOUT_HORIZONTAL", wxLAYOUT_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLAYOUT_LEFT", wxLAYOUT_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLAYOUT_RIGHT", wxLAYOUT_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLAYOUT_TOP", wxLAYOUT_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLAYOUT_VERTICAL", wxLAYOUT_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_ALWAYS_SB", wxLB_ALWAYS_SB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_BOTTOM", wxLB_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_DEFAULT", wxLB_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_EXTENDED", wxLB_EXTENDED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_HSCROLL", wxLB_HSCROLL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_INT_HEIGHT", 0x0800, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_LEFT", wxLB_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_MULTIPLE", wxLB_MULTIPLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_NEEDED_SB", wxLB_NEEDED_SB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_NO_SB", 0x0400, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_OWNERDRAW", 0x0100, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_RIGHT", wxLB_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_SINGLE", wxLB_SINGLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_SORT", wxLB_SORT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLB_TOP", wxLB_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_ALIGN_LEFT", wxLC_ALIGN_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_ALIGN_TOP", wxLC_ALIGN_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_AUTOARRANGE", wxLC_AUTOARRANGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_EDIT_LABELS", wxLC_EDIT_LABELS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_HRULES", wxLC_HRULES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_ICON", wxLC_ICON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_LIST", wxLC_LIST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_NO_HEADER", wxLC_NO_HEADER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_REPORT", wxLC_REPORT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_SINGLE_SEL", wxLC_SINGLE_SEL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_SMALL_ICON", wxLC_SMALL_ICON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_SORT_ASCENDING", wxLC_SORT_ASCENDING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_SORT_DESCENDING", wxLC_SORT_DESCENDING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_VIRTUAL", wxLC_VIRTUAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLC_VRULES", wxLC_VRULES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLEFT", wxLEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLIST_FORMAT_CENTER", wxLIST_FORMAT_CENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLIST_FORMAT_CENTRE", wxLIST_FORMAT_CENTRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLIST_FORMAT_LEFT", wxLIST_FORMAT_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLIST_FORMAT_RIGHT", wxLIST_FORMAT_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLI_HORIZONTAL", wxLI_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLI_VERTICAL", wxLI_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOCALE_CAT_DATE", wxLOCALE_CAT_DATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOCALE_CAT_DEFAULT", wxLOCALE_CAT_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOCALE_CAT_MONEY", wxLOCALE_CAT_MONEY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOCALE_CAT_NUMBER", wxLOCALE_CAT_NUMBER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOCALE_DATE_TIME_FMT", wxLOCALE_DATE_TIME_FMT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOCALE_DECIMAL_POINT", wxLOCALE_DECIMAL_POINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOCALE_LONG_DATE_FMT", wxLOCALE_LONG_DATE_FMT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOCALE_SHORT_DATE_FMT", wxLOCALE_SHORT_DATE_FMT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOCALE_THOUSANDS_SEP", wxLOCALE_THOUSANDS_SEP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOCALE_TIME_FMT", wxLOCALE_TIME_FMT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOG_Debug", wxLOG_Debug, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOG_Error", wxLOG_Error, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOG_FatalError", wxLOG_FatalError, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOG_Info", wxLOG_Info, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOG_Max", wxLOG_Max, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOG_Message", wxLOG_Message, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOG_Progress", wxLOG_Progress, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOG_Status", wxLOG_Status, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOG_Trace", wxLOG_Trace, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOG_User", wxLOG_User, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLOG_Warning", wxLOG_Warning, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLayout_Default", wxLayout_Default, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLayout_LeftToRight", wxLayout_LeftToRight, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLayout_RightToLeft", wxLayout_RightToLeft, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLeft", wxLeft, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLeftOf", wxLeftOf, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMAXIMIZE", 0x2000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMAXIMIZE_BOX", 0x0200, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMB_DOCKABLE", wxMB_DOCKABLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMENU_TEAROFF", wxMENU_TEAROFF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMINIMIZE_BOX", 0x0400, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMM_LOMETRIC", wxMM_LOMETRIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMM_METRIC", wxMM_METRIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMM_POINTS", wxMM_POINTS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMM_TEXT", wxMM_TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMM_TWIPS", wxMM_TWIPS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOD_ALL", wxMOD_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOD_ALT", wxMOD_ALT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOD_ALTGR", wxMOD_ALTGR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOD_CMD", wxMOD_CMD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOD_CONTROL", wxMOD_CONTROL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOD_META", wxMOD_META, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOD_RAW_CONTROL", wxMOD_RAW_CONTROL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOD_SHIFT", wxMOD_SHIFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOD_WIN", wxMOD_WIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMORE", 0x00010000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOUSE_BTN_ANY", wxMOUSE_BTN_ANY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOUSE_BTN_AUX1", wxMOUSE_BTN_AUX1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOUSE_BTN_AUX2", wxMOUSE_BTN_AUX2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOUSE_BTN_LEFT", wxMOUSE_BTN_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOUSE_BTN_MAX", wxMOUSE_BTN_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOUSE_BTN_MIDDLE", wxMOUSE_BTN_MIDDLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMOUSE_BTN_RIGHT", wxMOUSE_BTN_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMSGQUEUE_MISC_ERROR", wxMSGQUEUE_MISC_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMSGQUEUE_NO_ERROR", wxMSGQUEUE_NO_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMSGQUEUE_TIMEOUT", wxMSGQUEUE_TIMEOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMUTEX_BUSY", wxMUTEX_BUSY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMUTEX_DEAD_LOCK", wxMUTEX_DEAD_LOCK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMUTEX_DEFAULT", wxMUTEX_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMUTEX_INVALID", wxMUTEX_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMUTEX_MISC_ERROR", wxMUTEX_MISC_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMUTEX_NO_ERROR", wxMUTEX_NO_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMUTEX_RECURSIVE", wxMUTEX_RECURSIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMUTEX_TIMEOUT", wxMUTEX_TIMEOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxMUTEX_UNLOCKED", wxMUTEX_UNLOCKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNAND", wxNAND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNB_BOTTOM", wxNB_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNB_FIXEDWIDTH", wxNB_FIXEDWIDTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNB_FLAT", wxNB_FLAT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNB_LEFT", wxNB_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNB_MULTILINE", wxNB_MULTILINE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNB_NOPAGETHEME", wxNB_NOPAGETHEME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNB_RIGHT", wxNB_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNB_TOP", wxNB_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNO", wxNO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNOR", wxNOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNORTH", wxNORTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNO_BORDER", wxNO_BORDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNO_DEFAULT", wxNO_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNO_FULL_REPAINT_ON_RESIZE", wxNO_FULL_REPAINT_ON_RESIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNO_OP", wxNO_OP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNUM_VAL_DEFAULT", wxNUM_VAL_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNUM_VAL_NO_TRAILING_ZEROES", wxNUM_VAL_NO_TRAILING_ZEROES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNUM_VAL_THOUSANDS_SEPARATOR", wxNUM_VAL_THOUSANDS_SEPARATOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxNUM_VAL_ZERO_AS_BLANK", wxNUM_VAL_ZERO_AS_BLANK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxODCB_PAINTING_CONTROL", wxODCB_PAINTING_CONTROL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxODCB_PAINTING_SELECTED", wxODCB_PAINTING_SELECTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxODDEVEN_RULE", wxODDEVEN_RULE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOK", wxOK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOK_DEFAULT", 0x00000000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOR", wxOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxORIENTATION_MASK", wxORIENTATION_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOR_INVERT", wxOR_INVERT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOR_REVERSE", wxOR_REVERSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_DOS", wxOS_DOS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_MAC", wxOS_MAC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_MAC_OS", wxOS_MAC_OS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_MAC_OSX_DARWIN", wxOS_MAC_OSX_DARWIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_OS2", wxOS_OS2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_UNIX", wxOS_UNIX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_UNIX_AIX", wxOS_UNIX_AIX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_UNIX_FREEBSD", wxOS_UNIX_FREEBSD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_UNIX_HPUX", wxOS_UNIX_HPUX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_UNIX_LINUX", wxOS_UNIX_LINUX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_UNIX_NETBSD", wxOS_UNIX_NETBSD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_UNIX_OPENBSD", wxOS_UNIX_OPENBSD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_UNIX_SOLARIS", wxOS_UNIX_SOLARIS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_UNKNOWN", wxOS_UNKNOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_WINDOWS", wxOS_WINDOWS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_WINDOWS_9X", wxOS_WINDOWS_9X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_WINDOWS_CE", wxOS_WINDOWS_CE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_WINDOWS_MICRO", wxOS_WINDOWS_MICRO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOS_WINDOWS_NT", wxOS_WINDOWS_NT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxOutRegion", wxOutRegion, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_10X11", wxPAPER_10X11, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_10X14", wxPAPER_10X14, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_11X17", wxPAPER_11X17, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_12X11", wxPAPER_12X11, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_15X11", wxPAPER_15X11, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_9X11", wxPAPER_9X11, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A2", wxPAPER_A2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A3", wxPAPER_A3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A3_EXTRA", wxPAPER_A3_EXTRA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A3_EXTRA_TRANSVERSE", wxPAPER_A3_EXTRA_TRANSVERSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A3_ROTATED", wxPAPER_A3_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A3_TRANSVERSE", wxPAPER_A3_TRANSVERSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A4", wxPAPER_A4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A4SMALL", wxPAPER_A4SMALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A4_EXTRA", wxPAPER_A4_EXTRA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A4_PLUS", wxPAPER_A4_PLUS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A4_ROTATED", wxPAPER_A4_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A4_TRANSVERSE", wxPAPER_A4_TRANSVERSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A5", wxPAPER_A5, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A5_EXTRA", wxPAPER_A5_EXTRA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A5_ROTATED", wxPAPER_A5_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A5_TRANSVERSE", wxPAPER_A5_TRANSVERSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A6", wxPAPER_A6, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A6_ROTATED", wxPAPER_A6_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_A_PLUS", wxPAPER_A_PLUS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_B4", wxPAPER_B4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_B4_JIS_ROTATED", wxPAPER_B4_JIS_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_B5", wxPAPER_B5, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_B5_EXTRA", wxPAPER_B5_EXTRA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_B5_JIS_ROTATED", wxPAPER_B5_JIS_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_B5_TRANSVERSE", wxPAPER_B5_TRANSVERSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_B6_JIS", wxPAPER_B6_JIS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_B6_JIS_ROTATED", wxPAPER_B6_JIS_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_B_PLUS", wxPAPER_B_PLUS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_CSHEET", wxPAPER_CSHEET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_DBL_JAPANESE_POSTCARD", wxPAPER_DBL_JAPANESE_POSTCARD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_DBL_JAPANESE_POSTCARD_ROTATED", wxPAPER_DBL_JAPANESE_POSTCARD_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_DSHEET", wxPAPER_DSHEET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_10", wxPAPER_ENV_10, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_11", wxPAPER_ENV_11, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_12", wxPAPER_ENV_12, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_14", wxPAPER_ENV_14, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_9", wxPAPER_ENV_9, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_B4", wxPAPER_ENV_B4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_B5", wxPAPER_ENV_B5, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_B6", wxPAPER_ENV_B6, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_C3", wxPAPER_ENV_C3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_C4", wxPAPER_ENV_C4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_C5", wxPAPER_ENV_C5, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_C6", wxPAPER_ENV_C6, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_C65", wxPAPER_ENV_C65, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_DL", wxPAPER_ENV_DL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_INVITE", wxPAPER_ENV_INVITE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_ITALY", wxPAPER_ENV_ITALY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_MONARCH", wxPAPER_ENV_MONARCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ENV_PERSONAL", wxPAPER_ENV_PERSONAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ESHEET", wxPAPER_ESHEET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_EXECUTIVE", wxPAPER_EXECUTIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_FANFOLD_LGL_GERMAN", wxPAPER_FANFOLD_LGL_GERMAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_FANFOLD_STD_GERMAN", wxPAPER_FANFOLD_STD_GERMAN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_FANFOLD_US", wxPAPER_FANFOLD_US, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_FOLIO", wxPAPER_FOLIO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_ISO_B4", wxPAPER_ISO_B4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JAPANESE_POSTCARD", wxPAPER_JAPANESE_POSTCARD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JAPANESE_POSTCARD_ROTATED", wxPAPER_JAPANESE_POSTCARD_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JENV_CHOU3", wxPAPER_JENV_CHOU3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JENV_CHOU3_ROTATED", wxPAPER_JENV_CHOU3_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JENV_CHOU4", wxPAPER_JENV_CHOU4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JENV_CHOU4_ROTATED", wxPAPER_JENV_CHOU4_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JENV_KAKU2", wxPAPER_JENV_KAKU2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JENV_KAKU2_ROTATED", wxPAPER_JENV_KAKU2_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JENV_KAKU3", wxPAPER_JENV_KAKU3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JENV_KAKU3_ROTATED", wxPAPER_JENV_KAKU3_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JENV_YOU4", wxPAPER_JENV_YOU4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_JENV_YOU4_ROTATED", wxPAPER_JENV_YOU4_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_LEDGER", wxPAPER_LEDGER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_LEGAL", wxPAPER_LEGAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_LEGAL_EXTRA", wxPAPER_LEGAL_EXTRA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_LETTER", wxPAPER_LETTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_LETTERSMALL", wxPAPER_LETTERSMALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_LETTER_EXTRA", wxPAPER_LETTER_EXTRA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_LETTER_EXTRA_TRANSVERSE", wxPAPER_LETTER_EXTRA_TRANSVERSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_LETTER_PLUS", wxPAPER_LETTER_PLUS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_LETTER_ROTATED", wxPAPER_LETTER_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_LETTER_TRANSVERSE", wxPAPER_LETTER_TRANSVERSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_NOTE", wxPAPER_NOTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_P16K", wxPAPER_P16K, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_P16K_ROTATED", wxPAPER_P16K_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_P32K", wxPAPER_P32K, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_P32KBIG", wxPAPER_P32KBIG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_P32KBIG_ROTATED", wxPAPER_P32KBIG_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_P32K_ROTATED", wxPAPER_P32K_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_1", wxPAPER_PENV_1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_10", wxPAPER_PENV_10, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_10_ROTATED", wxPAPER_PENV_10_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_1_ROTATED", wxPAPER_PENV_1_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_2", wxPAPER_PENV_2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_2_ROTATED", wxPAPER_PENV_2_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_3", wxPAPER_PENV_3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_3_ROTATED", wxPAPER_PENV_3_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_4", wxPAPER_PENV_4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_4_ROTATED", wxPAPER_PENV_4_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_5", wxPAPER_PENV_5, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_5_ROTATED", wxPAPER_PENV_5_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_6", wxPAPER_PENV_6, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_6_ROTATED", wxPAPER_PENV_6_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_7", wxPAPER_PENV_7, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_7_ROTATED", wxPAPER_PENV_7_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_8", wxPAPER_PENV_8, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_8_ROTATED", wxPAPER_PENV_8_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_9", wxPAPER_PENV_9, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_PENV_9_ROTATED", wxPAPER_PENV_9_ROTATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_QUARTO", wxPAPER_QUARTO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_STATEMENT", wxPAPER_STATEMENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_TABLOID", wxPAPER_TABLOID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPAPER_TABLOID_EXTRA", wxPAPER_TABLOID_EXTRA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_BEOS", wxPATH_BEOS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_DOS", wxPATH_DOS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_MAC", wxPATH_MAC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_MAX", wxPATH_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_NATIVE", wxPATH_NATIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_NORM_ABSOLUTE", wxPATH_NORM_ABSOLUTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_NORM_ALL", wxPATH_NORM_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_NORM_CASE", wxPATH_NORM_CASE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_NORM_DOTS", wxPATH_NORM_DOTS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_NORM_ENV_VARS", wxPATH_NORM_ENV_VARS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_NORM_LONG", wxPATH_NORM_LONG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_NORM_SHORTCUT", wxPATH_NORM_SHORTCUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_NORM_TILDE", wxPATH_NORM_TILDE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_OS2", wxPATH_OS2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_UNIX", wxPATH_UNIX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_VMS", wxPATH_VMS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPATH_WIN", wxPATH_WIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPD_APP_MODAL", 0x0002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPD_AUTO_HIDE", 0x0004, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPD_CAN_SKIP", 0x0080, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPD_ELAPSED_TIME", 0x0008, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPD_ESTIMATED_TIME", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPD_REMAINING_TIME", 0x0040, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPD_SMOOTH", 0x0020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_BDIAGONAL_HATCH", wxPENSTYLE_BDIAGONAL_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_CROSSDIAG_HATCH", wxPENSTYLE_CROSSDIAG_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_CROSS_HATCH", wxPENSTYLE_CROSS_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_DOT", wxPENSTYLE_DOT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_DOT_DASH", wxPENSTYLE_DOT_DASH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_FDIAGONAL_HATCH", wxPENSTYLE_FDIAGONAL_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_FIRST_HATCH", wxPENSTYLE_FIRST_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_HORIZONTAL_HATCH", wxPENSTYLE_HORIZONTAL_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_INVALID", wxPENSTYLE_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_LAST_HATCH", wxPENSTYLE_LAST_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_LONG_DASH", wxPENSTYLE_LONG_DASH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_SHORT_DASH", wxPENSTYLE_SHORT_DASH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_SOLID", wxPENSTYLE_SOLID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_STIPPLE", wxPENSTYLE_STIPPLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_STIPPLE_MASK", wxPENSTYLE_STIPPLE_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_STIPPLE_MASK_OPAQUE", wxPENSTYLE_STIPPLE_MASK_OPAQUE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_TRANSPARENT", wxPENSTYLE_TRANSPARENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_USER_DASH", wxPENSTYLE_USER_DASH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPENSTYLE_VERTICAL_HATCH", wxPENSTYLE_VERTICAL_HATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ACTION_CANCEL_EDIT", wxPG_ACTION_CANCEL_EDIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ACTION_COLLAPSE_PROPERTY", wxPG_ACTION_COLLAPSE_PROPERTY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ACTION_EDIT", wxPG_ACTION_EDIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ACTION_EXPAND_PROPERTY", wxPG_ACTION_EXPAND_PROPERTY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ACTION_INVALID", wxPG_ACTION_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ACTION_MAX", wxPG_ACTION_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ACTION_NEXT_PROPERTY", wxPG_ACTION_NEXT_PROPERTY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ACTION_PRESS_BUTTON", wxPG_ACTION_PRESS_BUTTON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ACTION_PREV_PROPERTY", wxPG_ACTION_PREV_PROPERTY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ALPHABETIC_MODE", wxPG_ALPHABETIC_MODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_AUTO_SORT", wxPG_AUTO_SORT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_BOLD_MODIFIED", wxPG_BOLD_MODIFIED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_DESCRIPTION", wxPG_DESCRIPTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_AUTO_UNSPECIFIED_VALUES", wxPG_EX_AUTO_UNSPECIFIED_VALUES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_ENABLE_TLP_TRACKING", wxPG_EX_ENABLE_TLP_TRACKING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_HELP_AS_TOOLTIPS", wxPG_EX_HELP_AS_TOOLTIPS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_HIDE_PAGE_BUTTONS", wxPG_EX_HIDE_PAGE_BUTTONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_INIT_NOCAT", wxPG_EX_INIT_NOCAT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_MODE_BUTTONS", wxPG_EX_MODE_BUTTONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_MULTIPLE_SELECTION", wxPG_EX_MULTIPLE_SELECTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_NATIVE_DOUBLE_BUFFERING", wxPG_EX_NATIVE_DOUBLE_BUFFERING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_NO_FLAT_TOOLBAR", wxPG_EX_NO_FLAT_TOOLBAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_NO_TOOLBAR_DIVIDER", wxPG_EX_NO_TOOLBAR_DIVIDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_TOOLBAR_SEPARATOR", wxPG_EX_TOOLBAR_SEPARATOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES", wxPG_EX_WRITEONLY_BUILTIN_ATTRIBUTES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_HIDE_CATEGORIES", wxPG_HIDE_CATEGORIES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_HIDE_MARGIN", wxPG_HIDE_MARGIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATE_ALL", wxPG_ITERATE_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATE_ALL_PARENTS", wxPG_ITERATE_ALL_PARENTS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATE_ALL_PARENTS_RECURSIVELY", wxPG_ITERATE_ALL_PARENTS_RECURSIVELY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATE_CATEGORIES", wxPG_ITERATE_CATEGORIES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATE_DEFAULT", wxPG_ITERATE_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATE_FIXED_CHILDREN", wxPG_ITERATE_FIXED_CHILDREN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATE_HIDDEN", wxPG_ITERATE_HIDDEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATE_NORMAL", wxPG_ITERATE_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATE_PROPERTIES", wxPG_ITERATE_PROPERTIES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATE_VISIBLE", wxPG_ITERATE_VISIBLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATOR_FLAGS_ALL", wxPG_ITERATOR_FLAGS_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATOR_MASK_OP_ITEM", wxPG_ITERATOR_MASK_OP_ITEM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_ITERATOR_MASK_OP_PARENT", wxPG_ITERATOR_MASK_OP_PARENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_LIMITED_EDITING", wxPG_LIMITED_EDITING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_NO_INTERNAL_BORDER", wxPG_NO_INTERNAL_BORDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_AGGREGATE", wxPG_PROP_AGGREGATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_AUTO_UNSPECIFIED", wxPG_PROP_AUTO_UNSPECIFIED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_BEING_DELETED", wxPG_PROP_BEING_DELETED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_CATEGORY", wxPG_PROP_CATEGORY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_CHILDREN_ARE_COPIES", wxPG_PROP_CHILDREN_ARE_COPIES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_CLASS_SPECIFIC_1", wxPG_PROP_CLASS_SPECIFIC_1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_CLASS_SPECIFIC_2", wxPG_PROP_CLASS_SPECIFIC_2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_COLLAPSED", wxPG_PROP_COLLAPSED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_COMPOSED_VALUE", wxPG_PROP_COMPOSED_VALUE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_CUSTOMIMAGE", wxPG_PROP_CUSTOMIMAGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_DISABLED", wxPG_PROP_DISABLED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_HIDDEN", wxPG_PROP_HIDDEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_INVALID_VALUE", wxPG_PROP_INVALID_VALUE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_MISC_PARENT", wxPG_PROP_MISC_PARENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_MODIFIED", wxPG_PROP_MODIFIED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_NOEDITOR", wxPG_PROP_NOEDITOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_PROPERTY", wxPG_PROP_PROPERTY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_READONLY", wxPG_PROP_READONLY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_USES_COMMON_VALUE", wxPG_PROP_USES_COMMON_VALUE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_PROP_WAS_MODIFIED", wxPG_PROP_WAS_MODIFIED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_SPLITTER_AUTO_CENTER", wxPG_SPLITTER_AUTO_CENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_STATIC_LAYOUT", wxPG_STATIC_LAYOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_STATIC_SPLITTER", wxPG_STATIC_SPLITTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_TOOLBAR", wxPG_TOOLBAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_TOOLTIPS", wxPG_TOOLTIPS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_VFB_BEEP", wxPG_VFB_BEEP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_VFB_DEFAULT", wxPG_VFB_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_VFB_MARK_CELL", wxPG_VFB_MARK_CELL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_VFB_SHOW_MESSAGE", wxPG_VFB_SHOW_MESSAGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_VFB_SHOW_MESSAGEBOX", wxPG_VFB_SHOW_MESSAGEBOX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_VFB_SHOW_MESSAGE_ON_STATUSBAR", wxPG_VFB_SHOW_MESSAGE_ON_STATUSBAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPG_VFB_STAY_IN_PROPERTY", wxPG_VFB_STAY_IN_PROPERTY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPNG_TYPE_COLOUR", wxPNG_TYPE_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPNG_TYPE_GREY", wxPNG_TYPE_GREY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPNG_TYPE_GREY_RED", wxPNG_TYPE_GREY_RED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPNG_TYPE_PALETTE", wxPNG_TYPE_PALETTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPOPUP_WINDOW", 0x00020000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORTRAIT", wxPORTRAIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_BASE", wxPORT_BASE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_COCOA", wxPORT_COCOA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_DFB", wxPORT_DFB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_GTK", wxPORT_GTK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_MAC", wxPORT_MAC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_MGL", wxPORT_MGL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_MOTIF", wxPORT_MOTIF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_MSW", wxPORT_MSW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_OS2", wxPORT_OS2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_PALMOS", wxPORT_PALMOS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_UNKNOWN", wxPORT_UNKNOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_WINCE", wxPORT_WINCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPORT_X11", wxPORT_X11, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPOSIX_GROUP_EXECUTE", wxPOSIX_GROUP_EXECUTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPOSIX_GROUP_READ", wxPOSIX_GROUP_READ, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPOSIX_GROUP_WRITE", wxPOSIX_GROUP_WRITE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPOSIX_OTHERS_EXECUTE", wxPOSIX_OTHERS_EXECUTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPOSIX_OTHERS_READ", wxPOSIX_OTHERS_READ, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPOSIX_OTHERS_WRITE", wxPOSIX_OTHERS_WRITE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPOSIX_USER_EXECUTE", wxPOSIX_USER_EXECUTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPOSIX_USER_READ", wxPOSIX_USER_READ, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPOSIX_USER_WRITE", wxPOSIX_USER_WRITE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_AUTO", wxPRINTBIN_AUTO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_CASSETTE", wxPRINTBIN_CASSETTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_DEFAULT", wxPRINTBIN_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_ENVELOPE", wxPRINTBIN_ENVELOPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_ENVMANUAL", wxPRINTBIN_ENVMANUAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_FORMSOURCE", wxPRINTBIN_FORMSOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_LARGECAPACITY", wxPRINTBIN_LARGECAPACITY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_LARGEFMT", wxPRINTBIN_LARGEFMT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_LOWER", wxPRINTBIN_LOWER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_MANUAL", wxPRINTBIN_MANUAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_MIDDLE", wxPRINTBIN_MIDDLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_ONLYONE", wxPRINTBIN_ONLYONE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_SMALLFMT", wxPRINTBIN_SMALLFMT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_TRACTOR", wxPRINTBIN_TRACTOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINTBIN_USER", wxPRINTBIN_USER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINT_MODE_FILE", wxPRINT_MODE_FILE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINT_MODE_PREVIEW", wxPRINT_MODE_PREVIEW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINT_MODE_PRINTER", wxPRINT_MODE_PRINTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPRINT_MODE_STREAM", wxPRINT_MODE_STREAM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROPSHEET_BUTTONTOOLBOOK", wxPROPSHEET_BUTTONTOOLBOOK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROPSHEET_CHOICEBOOK", wxPROPSHEET_CHOICEBOOK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROPSHEET_DEFAULT", wxPROPSHEET_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROPSHEET_LISTBOOK", wxPROPSHEET_LISTBOOK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROPSHEET_NOTEBOOK", wxPROPSHEET_NOTEBOOK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROPSHEET_SHRINKTOFIT", wxPROPSHEET_SHRINKTOFIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROPSHEET_TOOLBOOK", wxPROPSHEET_TOOLBOOK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROPSHEET_TREEBOOK", wxPROPSHEET_TREEBOOK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROTO_ABRT", wxPROTO_ABRT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROTO_CONNERR", wxPROTO_CONNERR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROTO_INVVAL", wxPROTO_INVVAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROTO_NETERR", wxPROTO_NETERR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROTO_NOERR", wxPROTO_NOERR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROTO_NOFILE", wxPROTO_NOFILE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROTO_NOHNDLR", wxPROTO_NOHNDLR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROTO_PROTERR", wxPROTO_PROTERR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROTO_RCNCT", wxPROTO_RCNCT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPROTO_STREAMING", wxPROTO_STREAMING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPartRegion", wxPartRegion, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPercentOf", wxPercentOf, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPreviewFrame_AppModal", wxPreviewFrame_AppModal, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPreviewFrame_NonModal", wxPreviewFrame_NonModal, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxPreviewFrame_WindowModal", wxPreviewFrame_WindowModal, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRA_LEFTTORIGHT", wxRA_LEFTTORIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRA_SPECIFY_COLS", wxRA_SPECIFY_COLS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRA_SPECIFY_ROWS", wxRA_SPECIFY_ROWS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRA_TOPTOBOTTOM", 0x0002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRA_USE_CHECKBOX", wxRA_USE_CHECKBOX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRB_GROUP", wxRB_GROUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRB_SINGLE", wxRB_SINGLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRB_USE_CHECKBOX", wxRB_USE_CHECKBOX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRESERVE_SPACE_EVEN_IF_HIDDEN", wxRESERVE_SPACE_EVEN_IF_HIDDEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRESET", 0x00008000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRESIZE_BORDER", 0x0040, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRETAINED", 0x00000000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRE_CENTRE_CARET", 0x8000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRE_MULTILINE", 0x0020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRE_READONLY", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_COLOUR", wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR", wxRIBBON_ART_BUTTON_BAR_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_ACTIVE_BORDER_COLOUR", wxRIBBON_ART_BUTTON_BAR_ACTIVE_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_COLOUR", wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR", wxRIBBON_ART_BUTTON_BAR_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_HOVER_BORDER_COLOUR", wxRIBBON_ART_BUTTON_BAR_HOVER_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_LABEL_COLOUR", wxRIBBON_ART_BUTTON_BAR_LABEL_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_BUTTON_BAR_LABEL_FONT", wxRIBBON_ART_BUTTON_BAR_LABEL_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BITMAP_PADDING_BOTTOM_SIZE", wxRIBBON_ART_GALLERY_BITMAP_PADDING_BOTTOM_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BITMAP_PADDING_LEFT_SIZE", wxRIBBON_ART_GALLERY_BITMAP_PADDING_LEFT_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BITMAP_PADDING_RIGHT_SIZE", wxRIBBON_ART_GALLERY_BITMAP_PADDING_RIGHT_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BITMAP_PADDING_TOP_SIZE", wxRIBBON_ART_GALLERY_BITMAP_PADDING_TOP_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BORDER_COLOUR", wxRIBBON_ART_GALLERY_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_FACE_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_ACTIVE_FACE_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_DISABLED_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_DISABLED_FACE_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_DISABLED_FACE_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_FACE_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_FACE_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_HOVER_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_BUTTON_HOVER_FACE_COLOUR", wxRIBBON_ART_GALLERY_BUTTON_HOVER_FACE_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_HOVER_BACKGROUND_COLOUR", wxRIBBON_ART_GALLERY_HOVER_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_GALLERY_ITEM_BORDER_COLOUR", wxRIBBON_ART_GALLERY_ITEM_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_BACKGROUND_COLOUR", wxRIBBON_ART_PAGE_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_PAGE_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_PAGE_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_BACKGROUND_TOP_GRADIENT_COLOUR", wxRIBBON_ART_PAGE_BACKGROUND_TOP_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_BORDER_BOTTOM_SIZE", wxRIBBON_ART_PAGE_BORDER_BOTTOM_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_BORDER_COLOUR", wxRIBBON_ART_PAGE_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_BORDER_LEFT_SIZE", wxRIBBON_ART_PAGE_BORDER_LEFT_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_BORDER_RIGHT_SIZE", wxRIBBON_ART_PAGE_BORDER_RIGHT_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_BORDER_TOP_SIZE", wxRIBBON_ART_PAGE_BORDER_TOP_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_HOVER_BACKGROUND_COLOUR", wxRIBBON_ART_PAGE_HOVER_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_HOVER_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_PAGE_HOVER_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_HOVER_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_PAGE_HOVER_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PAGE_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR", wxRIBBON_ART_PAGE_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_COLOUR", wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR", wxRIBBON_ART_PANEL_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_BORDER_COLOUR", wxRIBBON_ART_PANEL_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_BORDER_GRADIENT_COLOUR", wxRIBBON_ART_PANEL_BORDER_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_HOVER_LABEL_BACKGROUND_COLOUR", wxRIBBON_ART_PANEL_HOVER_LABEL_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_HOVER_LABEL_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_PANEL_HOVER_LABEL_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_HOVER_LABEL_COLOUR", wxRIBBON_ART_PANEL_HOVER_LABEL_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_LABEL_BACKGROUND_COLOUR", wxRIBBON_ART_PANEL_LABEL_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_LABEL_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_PANEL_LABEL_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_LABEL_COLOUR", wxRIBBON_ART_PANEL_LABEL_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_LABEL_FONT", wxRIBBON_ART_PANEL_LABEL_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_MINIMISED_BORDER_COLOUR", wxRIBBON_ART_PANEL_MINIMISED_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_MINIMISED_BORDER_GRADIENT_COLOUR", wxRIBBON_ART_PANEL_MINIMISED_BORDER_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_MINIMISED_LABEL_COLOUR", wxRIBBON_ART_PANEL_MINIMISED_LABEL_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_X_SEPARATION_SIZE", wxRIBBON_ART_PANEL_X_SEPARATION_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_PANEL_Y_SEPARATION_SIZE", wxRIBBON_ART_PANEL_Y_SEPARATION_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_COLOUR", wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR", wxRIBBON_ART_TAB_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_BORDER_COLOUR", wxRIBBON_ART_TAB_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_CTRL_BACKGROUND_COLOUR", wxRIBBON_ART_TAB_CTRL_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_CTRL_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_TAB_CTRL_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_HOVER_BACKGROUND_COLOUR", wxRIBBON_ART_TAB_HOVER_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_HOVER_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_TAB_HOVER_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_HOVER_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_TAB_HOVER_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR", wxRIBBON_ART_TAB_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_LABEL_COLOUR", wxRIBBON_ART_TAB_LABEL_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_LABEL_FONT", wxRIBBON_ART_TAB_LABEL_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_SEPARATION_SIZE", wxRIBBON_ART_TAB_SEPARATION_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_SEPARATOR_COLOUR", wxRIBBON_ART_TAB_SEPARATOR_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TAB_SEPARATOR_GRADIENT_COLOUR", wxRIBBON_ART_TAB_SEPARATOR_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOLBAR_BORDER_COLOUR", wxRIBBON_ART_TOOLBAR_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOLBAR_FACE_COLOUR", wxRIBBON_ART_TOOLBAR_FACE_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOLBAR_HOVER_BORDER_COLOUR", wxRIBBON_ART_TOOLBAR_HOVER_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_COLOUR", wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR", wxRIBBON_ART_TOOL_ACTIVE_BACKGROUND_TOP_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_BACKGROUND_COLOUR", wxRIBBON_ART_TOOL_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_TOOL_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_TOOL_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_BACKGROUND_TOP_GRADIENT_COLOUR", wxRIBBON_ART_TOOL_BACKGROUND_TOP_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_GROUP_SEPARATION_SIZE", wxRIBBON_ART_TOOL_GROUP_SEPARATION_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_HOVER_BACKGROUND_COLOUR", wxRIBBON_ART_TOOL_HOVER_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_HOVER_BACKGROUND_GRADIENT_COLOUR", wxRIBBON_ART_TOOL_HOVER_BACKGROUND_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_HOVER_BACKGROUND_TOP_COLOUR", wxRIBBON_ART_TOOL_HOVER_BACKGROUND_TOP_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_ART_TOOL_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR", wxRIBBON_ART_TOOL_HOVER_BACKGROUND_TOP_GRADIENT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_DISABLED", wxRIBBON_BUTTONBAR_BUTTON_DISABLED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_DROPDOWN_ACTIVE", wxRIBBON_BUTTONBAR_BUTTON_DROPDOWN_ACTIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_DROPDOWN_HOVERED", wxRIBBON_BUTTONBAR_BUTTON_DROPDOWN_HOVERED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_HOVER_MASK", wxRIBBON_BUTTONBAR_BUTTON_HOVER_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_LARGE", wxRIBBON_BUTTONBAR_BUTTON_LARGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_MEDIUM", wxRIBBON_BUTTONBAR_BUTTON_MEDIUM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_NORMAL_ACTIVE", wxRIBBON_BUTTONBAR_BUTTON_NORMAL_ACTIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_NORMAL_HOVERED", wxRIBBON_BUTTONBAR_BUTTON_NORMAL_HOVERED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_SIZE_MASK", wxRIBBON_BUTTONBAR_BUTTON_SIZE_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_SMALL", wxRIBBON_BUTTONBAR_BUTTON_SMALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_STATE_MASK", wxRIBBON_BUTTONBAR_BUTTON_STATE_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTONBAR_BUTTON_TOGGLED", wxRIBBON_BUTTONBAR_BUTTON_TOGGLED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTON_DROPDOWN", wxRIBBON_BUTTON_DROPDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTON_HYBRID", wxRIBBON_BUTTON_HYBRID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTON_NORMAL", wxRIBBON_BUTTON_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_BUTTON_TOGGLE", wxRIBBON_BUTTON_TOGGLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_GALLERY_BUTTON_ACTIVE", wxRIBBON_GALLERY_BUTTON_ACTIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_GALLERY_BUTTON_DISABLED", wxRIBBON_GALLERY_BUTTON_DISABLED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_GALLERY_BUTTON_HOVERED", wxRIBBON_GALLERY_BUTTON_HOVERED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_GALLERY_BUTTON_NORMAL", wxRIBBON_GALLERY_BUTTON_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_ACTIVE", wxRIBBON_SCROLL_BTN_ACTIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_DIRECTION_MASK", wxRIBBON_SCROLL_BTN_DIRECTION_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_DOWN", wxRIBBON_SCROLL_BTN_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_FOR_MASK", wxRIBBON_SCROLL_BTN_FOR_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_FOR_OTHER", wxRIBBON_SCROLL_BTN_FOR_OTHER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_FOR_PAGE", wxRIBBON_SCROLL_BTN_FOR_PAGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_FOR_TABS", wxRIBBON_SCROLL_BTN_FOR_TABS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_HOVERED", wxRIBBON_SCROLL_BTN_HOVERED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_LEFT", wxRIBBON_SCROLL_BTN_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_NORMAL", wxRIBBON_SCROLL_BTN_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_RIGHT", wxRIBBON_SCROLL_BTN_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_STATE_MASK", wxRIBBON_SCROLL_BTN_STATE_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIBBON_SCROLL_BTN_UP", wxRIBBON_SCROLL_BTN_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_ALT_DOWN", 0x04, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_CACHE_SIZE", 0x04, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_CHANGE_ATTRIBUTES", wxRICHTEXT_CHANGE_ATTRIBUTES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_CHANGE_OBJECT", wxRICHTEXT_CHANGE_OBJECT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_CHANGE_STYLE", wxRICHTEXT_CHANGE_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_CTRL_DOWN", 0x02, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_DELETE", wxRICHTEXT_DELETE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_DRAW_GUIDELINES", 0x08, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_DRAW_IGNORE_CACHE", wxRICHTEXT_DRAW_IGNORE_CACHE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_DRAW_PRINT", 0x04, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_DRAW_SELECTED", 0x02, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_EX_NO_GUIDELINES", 0x00000100, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_FIXED_HEIGHT", 0x02, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_FIXED_WIDTH", wxRICHTEXT_FIXED_WIDTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_FORMATTED", wxRICHTEXT_FORMATTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_FORMAT_BULLETS", 0x0008, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_FORMAT_FONT", 0x0002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_FORMAT_INDENTS_SPACING", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_FORMAT_STYLE_EDITOR", wxRICHTEXT_FORMAT_STYLE_EDITOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_FORMAT_TABS", 0x0004, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HANDLER_CONVERT_FACENAMES", 0x0100, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HANDLER_INCLUDE_STYLESHEET", wxRICHTEXT_HANDLER_INCLUDE_STYLESHEET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HANDLER_NO_HEADER_FOOTER", 0x0080, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HANDLER_SAVE_IMAGES_TO_BASE64", 0x0040, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HANDLER_SAVE_IMAGES_TO_FILES", 0x0020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HANDLER_SAVE_IMAGES_TO_MEMORY", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HEIGHT_ONLY", 0x08, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HITTEST_AFTER", wxRICHTEXT_HITTEST_AFTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HITTEST_BEFORE", wxRICHTEXT_HITTEST_BEFORE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HITTEST_NO_FLOATING_OBJECTS", wxRICHTEXT_HITTEST_NO_FLOATING_OBJECTS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HITTEST_NO_NESTED_OBJECTS", wxRICHTEXT_HITTEST_NO_NESTED_OBJECTS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HITTEST_ON", wxRICHTEXT_HITTEST_ON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_HITTEST_OUTSIDE", wxRICHTEXT_HITTEST_OUTSIDE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_INSERT", wxRICHTEXT_INSERT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_INSERT_INTERACTIVE", 0x02, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_INSERT_NONE", 0x00, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_INSERT_WITH_PREVIOUS_PARAGRAPH_STYLE", wxRICHTEXT_INSERT_WITH_PREVIOUS_PARAGRAPH_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_LAYOUT_SPECIFIED_RECT", 0x10, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_PAGE_ALL", wxRICHTEXT_PAGE_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_PAGE_CENTRE", wxRICHTEXT_PAGE_CENTRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_PAGE_EVEN", wxRICHTEXT_PAGE_EVEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_PAGE_LEFT", wxRICHTEXT_PAGE_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_PAGE_ODD", wxRICHTEXT_PAGE_ODD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_PAGE_RIGHT", wxRICHTEXT_PAGE_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_SETSTYLE_CHARACTERS_ONLY", 0x08, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_SETSTYLE_NONE", 0x00, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_SETSTYLE_OPTIMIZE", 0x02, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_SETSTYLE_PARAGRAPHS_ONLY", 0x04, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_SETSTYLE_REMOVE", 0x80, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_SETSTYLE_RENUMBER", 0x10, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_SETSTYLE_RESET", 0x40, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_SETSTYLE_SPECIFY_LEVEL", 0x20, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_SETSTYLE_WITH_UNDO", wxRICHTEXT_SETSTYLE_WITH_UNDO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_SHIFT_DOWN", wxRICHTEXT_SHIFT_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_TYPE_ANY", wxRICHTEXT_TYPE_ANY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_TYPE_HTML", wxRICHTEXT_TYPE_HTML, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_TYPE_PDF", wxRICHTEXT_TYPE_PDF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_TYPE_RTF", wxRICHTEXT_TYPE_RTF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_TYPE_TEXT", wxRICHTEXT_TYPE_TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_TYPE_XML", wxRICHTEXT_TYPE_XML, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_UNFORMATTED", 0x02, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_VARIABLE_HEIGHT", 0x08, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRICHTEXT_VARIABLE_WIDTH", 0x04, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRIGHT", wxRIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRichTextCtrlSelectionState_CommonAncestor", wxRichTextCtrlSelectionState_CommonAncestor, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRichTextCtrlSelectionState_Normal", wxRichTextCtrlSelectionState_Normal, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRight", wxRight, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxRightOf", wxRightOf, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSASH_BOTTOM", wxSASH_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSASH_LEFT", wxSASH_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSASH_RIGHT", wxSASH_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSASH_STATUS_OK", wxSASH_STATUS_OK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSASH_STATUS_OUT_OF_RANGE", wxSASH_STATUS_OUT_OF_RANGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSASH_TOP", wxSASH_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSB_FLAT", wxSB_FLAT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSB_HORIZONTAL", wxSB_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSB_NORMAL", 0x0000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSB_RAISED", 0x0002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSB_VERTICAL", wxSB_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSEMA_BUSY", wxSEMA_BUSY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSEMA_INVALID", wxSEMA_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSEMA_MISC_ERROR", wxSEMA_MISC_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSEMA_NO_ERROR", wxSEMA_NO_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSEMA_OVERFLOW", wxSEMA_OVERFLOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSEMA_TIMEOUT", wxSEMA_TIMEOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSET", wxSET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSETUP", 0x00020000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHAPED", wxSHAPED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_EFFECT_BLEND", wxSHOW_EFFECT_BLEND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_EFFECT_EXPAND", wxSHOW_EFFECT_EXPAND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_EFFECT_ROLL_TO_BOTTOM", wxSHOW_EFFECT_ROLL_TO_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_EFFECT_ROLL_TO_LEFT", wxSHOW_EFFECT_ROLL_TO_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_EFFECT_ROLL_TO_RIGHT", wxSHOW_EFFECT_ROLL_TO_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_EFFECT_ROLL_TO_TOP", wxSHOW_EFFECT_ROLL_TO_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_EFFECT_SLIDE_TO_BOTTOM", wxSHOW_EFFECT_SLIDE_TO_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_EFFECT_SLIDE_TO_LEFT", wxSHOW_EFFECT_SLIDE_TO_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_EFFECT_SLIDE_TO_RIGHT", wxSHOW_EFFECT_SLIDE_TO_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_EFFECT_SLIDE_TO_TOP", wxSHOW_EFFECT_SLIDE_TO_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_SB_ALWAYS", wxSHOW_SB_ALWAYS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_SB_DEFAULT", wxSHOW_SB_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHOW_SB_NEVER", wxSHOW_SB_NEVER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSHRINK", wxSHRINK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGABRT", wxSIGABRT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGALRM", wxSIGALRM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGBUS", wxSIGBUS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGEMT", wxSIGEMT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGFPE", wxSIGFPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGHUP", wxSIGHUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGILL", wxSIGILL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGINT", wxSIGINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGKILL", wxSIGKILL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGPIPE", wxSIGPIPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGQUIT", wxSIGQUIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGSEGV", wxSIGSEGV, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGSYS", wxSIGSYS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGTERM", wxSIGTERM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIGTRAP", wxSIGTRAP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIZER_FLAG_BITS_MASK", wxSIZER_FLAG_BITS_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIZE_ALLOW_MINUS_ONE", 0x0004, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIZE_AUTO_HEIGHT", 0x0002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIZE_AUTO_WIDTH", wxSIZE_AUTO_WIDTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIZE_CONV_IEC", wxSIZE_CONV_IEC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIZE_CONV_SI", wxSIZE_CONV_SI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIZE_CONV_TRADITIONAL", wxSIZE_CONV_TRADITIONAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIZE_FORCE", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIZE_FORCE_EVENT", 0x0020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIZE_NO_ADJUSTMENTS", 0x0008, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSIZE_USE_EXISTING", 0x0000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_AUTOTICKS", wxSL_AUTOTICKS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_BOTH", wxSL_BOTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_BOTTOM", wxSL_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_HORIZONTAL", wxSL_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_INVERSE", wxSL_INVERSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_LABELS", wxSL_LABELS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_LEFT", wxSL_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_MIN_MAX_LABELS", 0x2000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_RIGHT", wxSL_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_SELRANGE", wxSL_SELRANGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_TICKS", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_TOP", wxSL_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_VALUE_LABEL", 0x4000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSL_VERTICAL", wxSL_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_CONNECTION", wxSOCKET_CONNECTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_INPUT", wxSOCKET_INPUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_INVADDR", wxSOCKET_INVADDR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_INVOP", wxSOCKET_INVOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_INVPORT", wxSOCKET_INVPORT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_INVSOCK", wxSOCKET_INVSOCK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_IOERR", wxSOCKET_IOERR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_LOST", wxSOCKET_LOST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_MEMERR", wxSOCKET_MEMERR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_NOERROR", wxSOCKET_NOERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_NOHOST", wxSOCKET_NOHOST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_OUTPUT", wxSOCKET_OUTPUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_TIMEDOUT", wxSOCKET_TIMEDOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOCKET_WOULDBLOCK", wxSOCKET_WOULDBLOCK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSOUTH", wxSOUTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSPLASH_CENTRE_ON_PARENT", wxSPLASH_CENTRE_ON_PARENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSPLASH_CENTRE_ON_SCREEN", wxSPLASH_CENTRE_ON_SCREEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSPLASH_NO_CENTRE", wxSPLASH_NO_CENTRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSPLASH_NO_TIMEOUT", wxSPLASH_NO_TIMEOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSPLASH_TIMEOUT", wxSPLASH_TIMEOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSPLIT_HORIZONTAL", wxSPLIT_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSPLIT_VERTICAL", wxSPLIT_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_3D", wxSP_3D, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_3DBORDER", wxSP_3DBORDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_3DSASH", wxSP_3DSASH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_ARROW_KEYS", wxSP_ARROW_KEYS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_BORDER", wxSP_BORDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_HORIZONTAL", wxSP_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_LIVE_UPDATE", wxSP_LIVE_UPDATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_NOBORDER", wxSP_NOBORDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_NOSASH", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_NO_XP_THEME", wxSP_NO_XP_THEME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_PERMIT_UNSPLIT", wxSP_PERMIT_UNSPLIT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_THIN_SASH", 0x0000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_VERTICAL", wxSP_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSP_WRAP", wxSP_WRAP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSRC_INVERT", wxSRC_INVERT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTAY_ON_TOP", wxSTAY_ON_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTB_ELLIPSIZE_END", 0x0100, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTB_ELLIPSIZE_MIDDLE", 0x0080, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTB_ELLIPSIZE_START", 0x0040, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTB_SHOW_TIPS", 0x0020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTB_SIZEGRIP", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTOCK_FOR_BUTTON", wxSTOCK_FOR_BUTTON, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTOCK_NOFLAGS", wxSTOCK_NOFLAGS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTOCK_WITHOUT_ELLIPSIS", wxSTOCK_WITHOUT_ELLIPSIS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTOCK_WITH_ACCELERATOR", wxSTOCK_WITH_ACCELERATOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTOCK_WITH_MNEMONIC", wxSTOCK_WITH_MNEMONIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTREAM_ENCODING", wxSTREAM_ENCODING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTREAM_EOF", wxSTREAM_EOF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTREAM_FILEEXT", wxSTREAM_FILEEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTREAM_MIMETYPE", wxSTREAM_MIMETYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTREAM_NO_ERROR", wxSTREAM_NO_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTREAM_PROTOCOL", wxSTREAM_PROTOCOL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTREAM_READ_ERROR", wxSTREAM_READ_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTREAM_WRITE_ERROR", wxSTREAM_WRITE_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTRETCH_MASK", wxSTRETCH_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSTRETCH_NOT", wxSTRETCH_NOT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxST_ELLIPSIZE_END", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxST_ELLIPSIZE_MIDDLE", 0x0008, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxST_ELLIPSIZE_START", 0x0004, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxST_NO_AUTORESIZE", wxST_NO_AUTORESIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxST_SIZEGRIP", wxST_SIZEGRIP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSUNKEN_BORDER", wxSUNKEN_BORDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYSTEM_MENU", 0x0800, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_ANSI_FIXED_FONT", wxSYS_ANSI_FIXED_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_ANSI_VAR_FONT", wxSYS_ANSI_VAR_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_BORDER_X", wxSYS_BORDER_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_BORDER_Y", wxSYS_BORDER_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_CAN_DRAW_FRAME_DECORATIONS", wxSYS_CAN_DRAW_FRAME_DECORATIONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_CAN_ICONIZE_FRAME", wxSYS_CAN_ICONIZE_FRAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_CAPTION_Y", wxSYS_CAPTION_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_3DDKSHADOW", wxSYS_COLOUR_3DDKSHADOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_3DFACE", wxSYS_COLOUR_3DFACE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_3DHIGHLIGHT", wxSYS_COLOUR_3DHIGHLIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_3DHILIGHT", wxSYS_COLOUR_3DHILIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_3DLIGHT", wxSYS_COLOUR_3DLIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_3DSHADOW", wxSYS_COLOUR_3DSHADOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_ACTIVEBORDER", wxSYS_COLOUR_ACTIVEBORDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_ACTIVECAPTION", wxSYS_COLOUR_ACTIVECAPTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_APPWORKSPACE", wxSYS_COLOUR_APPWORKSPACE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_BACKGROUND", wxSYS_COLOUR_BACKGROUND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_BTNFACE", wxSYS_COLOUR_BTNFACE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_BTNHIGHLIGHT", wxSYS_COLOUR_BTNHIGHLIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_BTNHILIGHT", wxSYS_COLOUR_BTNHILIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_BTNSHADOW", wxSYS_COLOUR_BTNSHADOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_BTNTEXT", wxSYS_COLOUR_BTNTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_CAPTIONTEXT", wxSYS_COLOUR_CAPTIONTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_DESKTOP", wxSYS_COLOUR_DESKTOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_FRAMEBK", wxSYS_COLOUR_FRAMEBK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_GRADIENTACTIVECAPTION", wxSYS_COLOUR_GRADIENTACTIVECAPTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_GRADIENTINACTIVECAPTION", wxSYS_COLOUR_GRADIENTINACTIVECAPTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_GRAYTEXT", wxSYS_COLOUR_GRAYTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_HIGHLIGHT", wxSYS_COLOUR_HIGHLIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_HIGHLIGHTTEXT", wxSYS_COLOUR_HIGHLIGHTTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_HOTLIGHT", wxSYS_COLOUR_HOTLIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_INACTIVEBORDER", wxSYS_COLOUR_INACTIVEBORDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_INACTIVECAPTION", wxSYS_COLOUR_INACTIVECAPTION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_INACTIVECAPTIONTEXT", wxSYS_COLOUR_INACTIVECAPTIONTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_INFOBK", wxSYS_COLOUR_INFOBK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_INFOTEXT", wxSYS_COLOUR_INFOTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_LISTBOX", wxSYS_COLOUR_LISTBOX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_LISTBOXHIGHLIGHTTEXT", wxSYS_COLOUR_LISTBOXHIGHLIGHTTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_LISTBOXTEXT", wxSYS_COLOUR_LISTBOXTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_MENU", wxSYS_COLOUR_MENU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_MENUBAR", wxSYS_COLOUR_MENUBAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_MENUHILIGHT", wxSYS_COLOUR_MENUHILIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_MENUTEXT", wxSYS_COLOUR_MENUTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_SCROLLBAR", wxSYS_COLOUR_SCROLLBAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_WINDOW", wxSYS_COLOUR_WINDOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_WINDOWFRAME", wxSYS_COLOUR_WINDOWFRAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_COLOUR_WINDOWTEXT", wxSYS_COLOUR_WINDOWTEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_CURSOR_X", wxSYS_CURSOR_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_CURSOR_Y", wxSYS_CURSOR_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_DCLICK_MSEC", wxSYS_DCLICK_MSEC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_DCLICK_X", wxSYS_DCLICK_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_DCLICK_Y", wxSYS_DCLICK_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_DEFAULT_GUI_FONT", wxSYS_DEFAULT_GUI_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_DEVICE_DEFAULT_FONT", wxSYS_DEVICE_DEFAULT_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_DRAG_X", wxSYS_DRAG_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_DRAG_Y", wxSYS_DRAG_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_EDGE_X", wxSYS_EDGE_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_EDGE_Y", wxSYS_EDGE_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_FRAMESIZE_X", wxSYS_FRAMESIZE_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_FRAMESIZE_Y", wxSYS_FRAMESIZE_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_HSCROLL_ARROW_X", wxSYS_HSCROLL_ARROW_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_HSCROLL_ARROW_Y", wxSYS_HSCROLL_ARROW_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_HSCROLL_Y", wxSYS_HSCROLL_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_HTHUMB_X", wxSYS_HTHUMB_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_ICONSPACING_X", wxSYS_ICONSPACING_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_ICONSPACING_Y", wxSYS_ICONSPACING_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_ICON_X", wxSYS_ICON_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_ICON_Y", wxSYS_ICON_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_MENU_Y", wxSYS_MENU_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_MOUSE_BUTTONS", wxSYS_MOUSE_BUTTONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_NETWORK_PRESENT", wxSYS_NETWORK_PRESENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_OEM_FIXED_FONT", wxSYS_OEM_FIXED_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_PENWINDOWS_PRESENT", wxSYS_PENWINDOWS_PRESENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_SCREEN_DESKTOP", wxSYS_SCREEN_DESKTOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_SCREEN_PDA", wxSYS_SCREEN_PDA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_SCREEN_SMALL", wxSYS_SCREEN_SMALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_SCREEN_TINY", wxSYS_SCREEN_TINY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_SCREEN_X", wxSYS_SCREEN_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_SCREEN_Y", wxSYS_SCREEN_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_SHOW_SOUNDS", wxSYS_SHOW_SOUNDS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_SMALLICON_X", wxSYS_SMALLICON_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_SMALLICON_Y", wxSYS_SMALLICON_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_SWAP_BUTTONS", wxSYS_SWAP_BUTTONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_SYSTEM_FONT", wxSYS_SYSTEM_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_TABLET_PRESENT", wxSYS_TABLET_PRESENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_VSCROLL_ARROW_X", wxSYS_VSCROLL_ARROW_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_VSCROLL_ARROW_Y", wxSYS_VSCROLL_ARROW_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_VSCROLL_X", wxSYS_VSCROLL_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_VTHUMB_Y", wxSYS_VTHUMB_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_WINDOWMIN_X", wxSYS_WINDOWMIN_X, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSYS_WINDOWMIN_Y", wxSYS_WINDOWMIN_Y, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxS_DEFAULT", wxS_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxS_DIR_DEFAULT", wxS_DIR_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxS_IRGRP", wxS_IRGRP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxS_IROTH", wxS_IROTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxS_IRUSR", wxS_IRUSR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxS_IWGRP", wxS_IWGRP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxS_IWOTH", wxS_IWOTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxS_IWUSR", wxS_IWUSR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxS_IXGRP", wxS_IXGRP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxS_IXOTH", wxS_IXOTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxS_IXUSR", wxS_IXUSR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxSameAs", wxSameAs, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTAB_TRAVERSAL", wxTAB_TRAVERSAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTAR_BLKTYPE", wxTAR_BLKTYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTAR_CHRTYPE", wxTAR_CHRTYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTAR_CONTTYPE", wxTAR_CONTTYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTAR_DIRTYPE", wxTAR_DIRTYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTAR_FIFOTYPE", wxTAR_FIFOTYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTAR_LNKTYPE", wxTAR_LNKTYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTAR_PAX", wxTAR_PAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTAR_REGTYPE", wxTAR_REGTYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTAR_SYMTYPE", wxTAR_SYMTYPE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTAR_USTAR", wxTAR_USTAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_BOTTOM", wxTB_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_DOCKABLE", wxTB_DOCKABLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_FLAT", wxTB_FLAT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_HORIZONTAL", wxTB_HORIZONTAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_HORZ_LAYOUT", wxTB_HORZ_LAYOUT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_HORZ_TEXT", wxTB_HORZ_TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_NOALIGN", wxTB_NOALIGN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_NODIVIDER", wxTB_NODIVIDER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_NOICONS", wxTB_NOICONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_NO_TOOLTIPS", wxTB_NO_TOOLTIPS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_RIGHT", wxTB_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_TEXT", wxTB_TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTB_VERTICAL", wxTB_VERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTC_BOTTOM", 0x0080, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTC_FIXEDWIDTH", 0x0020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTC_LEFT", 0x0020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTC_MULTILINE", 0x0200, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTC_OWNERDRAW", 0x0400, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTC_RIGHT", 0x0040, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTC_RIGHTJUSTIFY", 0x0010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTC_TOP", 0x0000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ALIGNMENT_CENTER", wxTEXT_ALIGNMENT_CENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ALIGNMENT_CENTRE", wxTEXT_ALIGNMENT_CENTRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ALIGNMENT_DEFAULT", wxTEXT_ALIGNMENT_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ALIGNMENT_JUSTIFIED", wxTEXT_ALIGNMENT_JUSTIFIED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ALIGNMENT_LEFT", wxTEXT_ALIGNMENT_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ALIGNMENT_RIGHT", wxTEXT_ALIGNMENT_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_ALIGNMENT", wxTEXT_ATTR_ALIGNMENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_ALL", wxTEXT_ATTR_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BACKGROUND_COLOUR", wxTEXT_ATTR_BACKGROUND_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET", wxTEXT_ATTR_BULLET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_NAME", wxTEXT_ATTR_BULLET_NAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_NUMBER", wxTEXT_ATTR_BULLET_NUMBER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE", wxTEXT_ATTR_BULLET_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_ALIGN_CENTRE", wxTEXT_ATTR_BULLET_STYLE_ALIGN_CENTRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_ALIGN_LEFT", wxTEXT_ATTR_BULLET_STYLE_ALIGN_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_ALIGN_RIGHT", wxTEXT_ATTR_BULLET_STYLE_ALIGN_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_ARABIC", wxTEXT_ATTR_BULLET_STYLE_ARABIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_BITMAP", wxTEXT_ATTR_BULLET_STYLE_BITMAP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_LETTERS_LOWER", wxTEXT_ATTR_BULLET_STYLE_LETTERS_LOWER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_LETTERS_UPPER", wxTEXT_ATTR_BULLET_STYLE_LETTERS_UPPER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_OUTLINE", wxTEXT_ATTR_BULLET_STYLE_OUTLINE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_PARENTHESES", wxTEXT_ATTR_BULLET_STYLE_PARENTHESES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_PERIOD", wxTEXT_ATTR_BULLET_STYLE_PERIOD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_RIGHT_PARENTHESIS", wxTEXT_ATTR_BULLET_STYLE_RIGHT_PARENTHESIS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_ROMAN_LOWER", wxTEXT_ATTR_BULLET_STYLE_ROMAN_LOWER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_ROMAN_UPPER", wxTEXT_ATTR_BULLET_STYLE_ROMAN_UPPER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_STANDARD", wxTEXT_ATTR_BULLET_STYLE_STANDARD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_STYLE_SYMBOL", wxTEXT_ATTR_BULLET_STYLE_SYMBOL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_BULLET_TEXT", wxTEXT_ATTR_BULLET_TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_CHARACTER", wxTEXT_ATTR_CHARACTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_CHARACTER_STYLE_NAME", wxTEXT_ATTR_CHARACTER_STYLE_NAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_EFFECTS", wxTEXT_ATTR_EFFECTS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_EFFECT_CAPITALS", wxTEXT_ATTR_EFFECT_CAPITALS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_EFFECT_DOUBLE_STRIKETHROUGH", wxTEXT_ATTR_EFFECT_DOUBLE_STRIKETHROUGH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_EFFECT_EMBOSS", wxTEXT_ATTR_EFFECT_EMBOSS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_EFFECT_ENGRAVE", wxTEXT_ATTR_EFFECT_ENGRAVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_EFFECT_OUTLINE", wxTEXT_ATTR_EFFECT_OUTLINE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_EFFECT_SHADOW", wxTEXT_ATTR_EFFECT_SHADOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_EFFECT_SMALL_CAPITALS", wxTEXT_ATTR_EFFECT_SMALL_CAPITALS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_EFFECT_STRIKETHROUGH", wxTEXT_ATTR_EFFECT_STRIKETHROUGH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_EFFECT_SUBSCRIPT", wxTEXT_ATTR_EFFECT_SUBSCRIPT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_EFFECT_SUPERSCRIPT", wxTEXT_ATTR_EFFECT_SUPERSCRIPT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_FONT", wxTEXT_ATTR_FONT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_FONT_ENCODING", wxTEXT_ATTR_FONT_ENCODING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_FONT_FACE", wxTEXT_ATTR_FONT_FACE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_FONT_FAMILY", wxTEXT_ATTR_FONT_FAMILY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_FONT_ITALIC", wxTEXT_ATTR_FONT_ITALIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_FONT_SIZE", wxTEXT_ATTR_FONT_SIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_FONT_UNDERLINE", wxTEXT_ATTR_FONT_UNDERLINE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_FONT_WEIGHT", wxTEXT_ATTR_FONT_WEIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_KEEP_FIRST_PARA_STYLE", 0x10000000, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_LEFT_INDENT", wxTEXT_ATTR_LEFT_INDENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_LINE_SPACING", wxTEXT_ATTR_LINE_SPACING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_LINE_SPACING_HALF", wxTEXT_ATTR_LINE_SPACING_HALF, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_LINE_SPACING_NORMAL", wxTEXT_ATTR_LINE_SPACING_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_LINE_SPACING_TWICE", wxTEXT_ATTR_LINE_SPACING_TWICE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_LIST_STYLE_NAME", wxTEXT_ATTR_LIST_STYLE_NAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_OUTLINE_LEVEL", wxTEXT_ATTR_OUTLINE_LEVEL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_PAGE_BREAK", wxTEXT_ATTR_PAGE_BREAK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_PARAGRAPH", wxTEXT_ATTR_PARAGRAPH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_PARAGRAPH_STYLE_NAME", wxTEXT_ATTR_PARAGRAPH_STYLE_NAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_PARA_SPACING_AFTER", wxTEXT_ATTR_PARA_SPACING_AFTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_PARA_SPACING_BEFORE", wxTEXT_ATTR_PARA_SPACING_BEFORE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_RIGHT_INDENT", wxTEXT_ATTR_RIGHT_INDENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_TABS", wxTEXT_ATTR_TABS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_TEXT_COLOUR", wxTEXT_ATTR_TEXT_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_UNITS_MASK", wxTEXT_ATTR_UNITS_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_UNITS_PERCENTAGE", wxTEXT_ATTR_UNITS_PERCENTAGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_UNITS_PIXELS", wxTEXT_ATTR_UNITS_PIXELS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_UNITS_POINTS", wxTEXT_ATTR_UNITS_POINTS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_UNITS_TENTHS_MM", wxTEXT_ATTR_UNITS_TENTHS_MM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_URL", wxTEXT_ATTR_URL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_VALUE_VALID", wxTEXT_ATTR_VALUE_VALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_ATTR_VALUE_VALID_MASK", wxTEXT_ATTR_VALUE_VALID_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_COLOUR", wxTEXT_BOX_ATTR_BORDER_COLOUR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_DASHED", wxTEXT_BOX_ATTR_BORDER_DASHED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_DOTTED", wxTEXT_BOX_ATTR_BORDER_DOTTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_DOUBLE", wxTEXT_BOX_ATTR_BORDER_DOUBLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_GROOVE", wxTEXT_BOX_ATTR_BORDER_GROOVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_INSET", wxTEXT_BOX_ATTR_BORDER_INSET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_MEDIUM", wxTEXT_BOX_ATTR_BORDER_MEDIUM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_OUTSET", wxTEXT_BOX_ATTR_BORDER_OUTSET, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_RIDGE", wxTEXT_BOX_ATTR_BORDER_RIDGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_SOLID", wxTEXT_BOX_ATTR_BORDER_SOLID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_STYLE", wxTEXT_BOX_ATTR_BORDER_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_THICK", wxTEXT_BOX_ATTR_BORDER_THICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_BORDER_THIN", wxTEXT_BOX_ATTR_BORDER_THIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_CLEAR", wxTEXT_BOX_ATTR_CLEAR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_CLEAR_BOTH", wxTEXT_BOX_ATTR_CLEAR_BOTH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_CLEAR_LEFT", wxTEXT_BOX_ATTR_CLEAR_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_CLEAR_RIGHT", wxTEXT_BOX_ATTR_CLEAR_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_COLLAPSE_BORDERS", wxTEXT_BOX_ATTR_COLLAPSE_BORDERS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_COLLAPSE_FULL", wxTEXT_BOX_ATTR_COLLAPSE_FULL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_FLOAT", wxTEXT_BOX_ATTR_FLOAT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_FLOAT_LEFT", wxTEXT_BOX_ATTR_FLOAT_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_FLOAT_RIGHT", wxTEXT_BOX_ATTR_FLOAT_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_POSITION_ABSOLUTE", wxTEXT_BOX_ATTR_POSITION_ABSOLUTE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_POSITION_MASK", wxTEXT_BOX_ATTR_POSITION_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_POSITION_RELATIVE", wxTEXT_BOX_ATTR_POSITION_RELATIVE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_POSITION_STATIC", wxTEXT_BOX_ATTR_POSITION_STATIC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT", wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_BOTTOM", wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_BOTTOM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_CENTRE", wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_CENTRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_TOP", wxTEXT_BOX_ATTR_VERTICAL_ALIGNMENT_TOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_AUTO_URL", wxTE_AUTO_URL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_BESTWRAP", wxTE_BESTWRAP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_CAPITALIZE", wxTE_CAPITALIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_CENTRE", wxTE_CENTRE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_CHARWRAP", wxTE_CHARWRAP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_DONTWRAP", wxTE_DONTWRAP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_HT_BEFORE", wxTE_HT_BEFORE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_HT_BELOW", wxTE_HT_BELOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_HT_BEYOND", wxTE_HT_BEYOND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_HT_ON_TEXT", wxTE_HT_ON_TEXT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_HT_UNKNOWN", wxTE_HT_UNKNOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_LEFT", wxTE_LEFT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_MULTILINE", wxTE_MULTILINE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_NOHIDESEL", wxTE_NOHIDESEL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_NO_VSCROLL", wxTE_NO_VSCROLL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_PASSWORD", wxTE_PASSWORD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_PROCESS_ENTER", wxTE_PROCESS_ENTER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_PROCESS_TAB", wxTE_PROCESS_TAB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_READONLY", wxTE_READONLY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_RICH", wxTE_RICH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_RICH2", wxTE_RICH2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_RIGHT", wxTE_RIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTE_WORDWRAP", wxTE_WORDWRAP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTHREAD_DETACHED", wxTHREAD_DETACHED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTHREAD_JOINABLE", wxTHREAD_JOINABLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTHREAD_KILLED", wxTHREAD_KILLED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTHREAD_MISC_ERROR", wxTHREAD_MISC_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTHREAD_NOT_RUNNING", wxTHREAD_NOT_RUNNING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTHREAD_NO_ERROR", wxTHREAD_NO_ERROR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTHREAD_NO_RESOURCE", wxTHREAD_NO_RESOURCE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTHREAD_RUNNING", wxTHREAD_RUNNING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTHREAD_WAIT_BLOCK", wxTHREAD_WAIT_BLOCK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTHREAD_WAIT_DEFAULT", wxTHREAD_WAIT_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTHREAD_WAIT_YIELD", wxTHREAD_WAIT_YIELD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTILE", wxTILE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTINY_CAPTION", 0x0080, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTITLEBAR_BUTTON_CLOSE", wxTITLEBAR_BUTTON_CLOSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTITLEBAR_BUTTON_HELP", wxTITLEBAR_BUTTON_HELP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTITLEBAR_BUTTON_ICONIZE", wxTITLEBAR_BUTTON_ICONIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTITLEBAR_BUTTON_MAXIMIZE", wxTITLEBAR_BUTTON_MAXIMIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTITLEBAR_BUTTON_RESTORE", wxTITLEBAR_BUTTON_RESTORE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTOKEN_DEFAULT", wxTOKEN_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTOKEN_INVALID", wxTOKEN_INVALID, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTOKEN_RET_DELIMS", wxTOKEN_RET_DELIMS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTOKEN_RET_EMPTY", wxTOKEN_RET_EMPTY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTOKEN_RET_EMPTY_ALL", wxTOKEN_RET_EMPTY_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTOKEN_STRTOK", wxTOKEN_STRTOK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTOP", wxTOP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTRANSPARENT_WINDOW", wxTRANSPARENT_WINDOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_DEFAULT_STYLE", wxTR_DEFAULT_STYLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_EDIT_LABELS", wxTR_EDIT_LABELS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_EXTENDED", wxTR_EXTENDED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_FULL_ROW_HIGHLIGHT", wxTR_FULL_ROW_HIGHLIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_HAS_BUTTONS", wxTR_HAS_BUTTONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_HAS_VARIABLE_ROW_HEIGHT", wxTR_HAS_VARIABLE_ROW_HEIGHT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_HIDE_ROOT", wxTR_HIDE_ROOT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_LINES_AT_ROOT", wxTR_LINES_AT_ROOT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_MULTIPLE", wxTR_MULTIPLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_NO_BUTTONS", wxTR_NO_BUTTONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_NO_LINES", wxTR_NO_LINES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_ROW_LINES", wxTR_ROW_LINES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_SINGLE", wxTR_SINGLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTR_TWIST_BUTTONS", wxTR_TWIST_BUTTONS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTipKind_Auto", wxTipKind_Auto, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTipKind_Bottom", wxTipKind_Bottom, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTipKind_BottomLeft", wxTipKind_BottomLeft, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTipKind_BottomRight", wxTipKind_BottomRight, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTipKind_Top", wxTipKind_Top, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTipKind_TopLeft", wxTipKind_TopLeft, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTipKind_TopRight", wxTipKind_TopRight, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTop", wxTop, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTreeItemIcon_Expanded", wxTreeItemIcon_Expanded, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTreeItemIcon_Max", wxTreeItemIcon_Max, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTreeItemIcon_Normal", wxTreeItemIcon_Normal, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTreeItemIcon_Selected", wxTreeItemIcon_Selected, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxTreeItemIcon_SelectedExpanded", wxTreeItemIcon_SelectedExpanded, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxUP", wxUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxUPDATE_UI_FROMIDLE", wxUPDATE_UI_FROMIDLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxUPDATE_UI_PROCESS_ALL", wxUPDATE_UI_PROCESS_ALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxUPDATE_UI_PROCESS_SPECIFIED", wxUPDATE_UI_PROCESS_SPECIFIED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxUPDATE_UI_RECURSE", wxUPDATE_UI_RECURSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxURI_IPV4ADDRESS", wxURI_IPV4ADDRESS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxURI_IPV6ADDRESS", wxURI_IPV6ADDRESS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxURI_IPVFUTURE", wxURI_IPVFUTURE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxURI_REGNAME", wxURI_REGNAME, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxURL_CONNERR", wxURL_CONNERR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxURL_NOERR", wxURL_NOERR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxURL_NOHOST", wxURL_NOHOST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxURL_NOPATH", wxURL_NOPATH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxURL_NOPROTO", wxURL_NOPROTO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxURL_PROTOERR", wxURL_PROTOERR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxURL_SNTXERR", wxURL_SNTXERR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxUnconstrained", wxUnconstrained, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxVERTICAL", wxVERTICAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxVSCROLL", wxVSCROLL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWANTS_CHARS", wxWANTS_CHARS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWEST", wxWEST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWINDING_RULE", wxWINDING_RULE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWINDOW_VARIANT_LARGE", wxWINDOW_VARIANT_LARGE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWINDOW_VARIANT_MAX", wxWINDOW_VARIANT_MAX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWINDOW_VARIANT_MINI", wxWINDOW_VARIANT_MINI, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWINDOW_VARIANT_NORMAL", wxWINDOW_VARIANT_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWINDOW_VARIANT_SMALL", wxWINDOW_VARIANT_SMALL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWS_EX_BLOCK_EVENTS", 0x00000002, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWS_EX_CONTEXTHELP", 0x00000080, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWS_EX_PROCESS_IDLE", 0x00000010, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWS_EX_PROCESS_UI_UPDATES", 0x00000020, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWS_EX_THEMED_BACKGROUND", 0x00000008, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWS_EX_TRANSIENT", 0x00000004, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWS_EX_VALIDATE_RECURSIVELY", wxWS_EX_VALIDATE_RECURSIVELY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxWidth", wxWidth, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_ATTRIBUTE_NODE", wxXML_ATTRIBUTE_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_CDATA_SECTION_NODE", wxXML_CDATA_SECTION_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_COMMENT_NODE", wxXML_COMMENT_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_DOCUMENT_FRAG_NODE", wxXML_DOCUMENT_FRAG_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_DOCUMENT_NODE", wxXML_DOCUMENT_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_DOCUMENT_TYPE_NODE", wxXML_DOCUMENT_TYPE_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_ELEMENT_NODE", wxXML_ELEMENT_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_ENTITY_NODE", wxXML_ENTITY_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_ENTITY_REF_NODE", wxXML_ENTITY_REF_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_HTML_DOCUMENT_NODE", wxXML_HTML_DOCUMENT_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_NOTATION_NODE", wxXML_NOTATION_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_PI_NODE", wxXML_PI_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXML_TEXT_NODE", wxXML_TEXT_NODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXOR", wxXOR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXRC_NO_RELOADING", wxXRC_NO_RELOADING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXRC_NO_SUBCLASSING", wxXRC_NO_SUBCLASSING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxXRC_USE_LOCALE", wxXRC_USE_LOCALE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxYES", wxYES, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxYES_DEFAULT", wxYES_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxYES_NO", wxYES_NO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_A_ARCH", wxZIP_A_ARCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_A_HIDDEN", wxZIP_A_HIDDEN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_A_MASK", wxZIP_A_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_A_RDONLY", wxZIP_A_RDONLY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_A_SUBDIR", wxZIP_A_SUBDIR, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_A_SYSTEM", wxZIP_A_SYSTEM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_DEFLATE_EXTRA", wxZIP_DEFLATE_EXTRA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_DEFLATE_FAST", wxZIP_DEFLATE_FAST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_DEFLATE_MASK", wxZIP_DEFLATE_MASK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_DEFLATE_NORMAL", wxZIP_DEFLATE_NORMAL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_DEFLATE_SUPERFAST", wxZIP_DEFLATE_SUPERFAST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_ENCRYPTED", wxZIP_ENCRYPTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_ENHANCED", wxZIP_ENHANCED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_BZIP2", wxZIP_METHOD_BZIP2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_DEFAULT", wxZIP_METHOD_DEFAULT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_DEFLATE", wxZIP_METHOD_DEFLATE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_DEFLATE64", wxZIP_METHOD_DEFLATE64, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_IMPLODE", wxZIP_METHOD_IMPLODE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_REDUCE1", wxZIP_METHOD_REDUCE1, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_REDUCE2", wxZIP_METHOD_REDUCE2, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_REDUCE3", wxZIP_METHOD_REDUCE3, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_REDUCE4", wxZIP_METHOD_REDUCE4, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_SHRINK", wxZIP_METHOD_SHRINK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_STORE", wxZIP_METHOD_STORE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_METHOD_TOKENIZE", wxZIP_METHOD_TOKENIZE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_PATCH", wxZIP_PATCH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_RESERVED", wxZIP_RESERVED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_STRONG_ENC", wxZIP_STRONG_ENC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SUMS_FOLLOW", wxZIP_SUMS_FOLLOW, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_ACORN_RISC", wxZIP_SYSTEM_ACORN_RISC, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_ALTERNATE_MVS", wxZIP_SYSTEM_ALTERNATE_MVS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_AMIGA", wxZIP_SYSTEM_AMIGA, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_ATARI_ST", wxZIP_SYSTEM_ATARI_ST, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_BEOS", wxZIP_SYSTEM_BEOS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_CPM", wxZIP_SYSTEM_CPM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_MACINTOSH", wxZIP_SYSTEM_MACINTOSH, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_MSDOS", wxZIP_SYSTEM_MSDOS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_MVS", wxZIP_SYSTEM_MVS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_OPENVMS", wxZIP_SYSTEM_OPENVMS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_OS2_HPFS", wxZIP_SYSTEM_OS2_HPFS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_OS_400", wxZIP_SYSTEM_OS_400, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_TANDEM", wxZIP_SYSTEM_TANDEM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_UNIX", wxZIP_SYSTEM_UNIX, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_VFAT", wxZIP_SYSTEM_VFAT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_VM_CMS", wxZIP_SYSTEM_VM_CMS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_VSE", wxZIP_SYSTEM_VSE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_WINDOWS_NTFS", wxZIP_SYSTEM_WINDOWS_NTFS, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_SYSTEM_Z_SYSTEM", wxZIP_SYSTEM_Z_SYSTEM, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZIP_UNUSED", wxZIP_UNUSED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZLIB_AUTO", wxZLIB_AUTO, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZLIB_GZIP", wxZLIB_GZIP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZLIB_NO_HEADER", wxZLIB_NO_HEADER, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZLIB_ZLIB", wxZLIB_ZLIB, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZ_BEST_COMPRESSION", wxZ_BEST_COMPRESSION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZ_BEST_SPEED", wxZ_BEST_SPEED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZ_DEFAULT_COMPRESSION", wxZ_DEFAULT_COMPRESSION, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxZ_NO_COMPRESSION", wxZ_NO_COMPRESSION, CONST_CS | CONST_PERSISTENT);

	//Variables found on global_variables.json

	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullBitmap", &wxNullBitmap, php_wxBitmap_entry, le_wxBitmap, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDefaultDateTime", time(NULL), CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullFont", &wxNullFont, php_wxFont_entry, le_wxFont, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNORMAL_FONT", wxNORMAL_FONT, php_wxFont_entry, le_wxFont, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxSMALL_FONT", wxSMALL_FONT, php_wxFont_entry, le_wxFont, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxITALIC_FONT", wxITALIC_FONT, php_wxFont_entry, le_wxFont, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxSWISS_FONT", wxSWISS_FONT, php_wxFont_entry, le_wxFont, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxTheFontList", wxTheFontList, php_wxFontList_entry, le_wxFontList, CONST_CS | CONST_PERSISTENT);
	REGISTER_STRING_CONSTANT("wxEmptyString", "", CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullAnimation", &wxNullAnimation, php_wxAnimation_entry, le_wxAnimation, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullBrush", &wxNullBrush, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxBLUE_BRUSH", wxBLUE_BRUSH, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxGREEN_BRUSH", wxGREEN_BRUSH, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxYELLOW_BRUSH", wxYELLOW_BRUSH, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxWHITE_BRUSH", wxWHITE_BRUSH, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxBLACK_BRUSH", wxBLACK_BRUSH, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxGREY_BRUSH", wxGREY_BRUSH, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxMEDIUM_GREY_BRUSH", wxMEDIUM_GREY_BRUSH, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxLIGHT_GREY_BRUSH", wxLIGHT_GREY_BRUSH, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxTRANSPARENT_BRUSH", wxTRANSPARENT_BRUSH, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxCYAN_BRUSH", wxCYAN_BRUSH, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxRED_BRUSH", wxRED_BRUSH, php_wxBrush_entry, le_wxBrush, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullColour", &wxNullColour, php_wxColour_entry, le_wxColour, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxTransparentColour", &wxTransparentColour, php_wxColour_entry, le_wxColour, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxBLACK", wxBLACK, php_wxColour_entry, le_wxColour, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxBLUE", wxBLUE, php_wxColour_entry, le_wxColour, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxCYAN", wxCYAN, php_wxColour_entry, le_wxColour, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxGREEN", wxGREEN, php_wxColour_entry, le_wxColour, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxYELLOW", wxYELLOW, php_wxColour_entry, le_wxColour, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxLIGHT_GREY", wxLIGHT_GREY, php_wxColour_entry, le_wxColour, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxRED", wxRED, php_wxColour_entry, le_wxColour, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxWHITE", wxWHITE, php_wxColour_entry, le_wxColour, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALPHA_TRANSPARENT", wxALPHA_TRANSPARENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxALPHA_OPAQUE", wxALPHA_OPAQUE, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullCursor", &wxNullCursor, php_wxCursor_entry, le_wxCursor, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxSTANDARD_CURSOR", wxSTANDARD_CURSOR, php_wxCursor_entry, le_wxCursor, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxHOURGLASS_CURSOR", wxHOURGLASS_CURSOR, php_wxCursor_entry, le_wxCursor, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxCROSS_CURSOR", wxCROSS_CURSOR, php_wxCursor_entry, le_wxCursor, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED", wxEVT_COMMAND_DATAVIEW_SELECTION_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED", wxEVT_COMMAND_DATAVIEW_ITEM_ACTIVATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING", wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED", wxEVT_COMMAND_DATAVIEW_ITEM_COLLAPSED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING", wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED", wxEVT_COMMAND_DATAVIEW_ITEM_EXPANDED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING", wxEVT_COMMAND_DATAVIEW_ITEM_START_EDITING, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED", wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_STARTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE", wxEVT_COMMAND_DATAVIEW_ITEM_EDITING_DONE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED", wxEVT_COMMAND_DATAVIEW_ITEM_VALUE_CHANGED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU", wxEVT_COMMAND_DATAVIEW_ITEM_CONTEXT_MENU, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK", wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK", wxEVT_COMMAND_DATAVIEW_COLUMN_HEADER_RIGHT_CLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED", wxEVT_COMMAND_DATAVIEW_COLUMN_SORTED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED", wxEVT_COMMAND_DATAVIEW_COLUMN_REORDERED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_CACHE_HINT", wxEVT_COMMAND_DATAVIEW_CACHE_HINT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG", wxEVT_COMMAND_DATAVIEW_ITEM_BEGIN_DRAG, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE", wxEVT_COMMAND_DATAVIEW_ITEM_DROP_POSSIBLE, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_DATAVIEW_ITEM_DROP", wxEVT_COMMAND_DATAVIEW_ITEM_DROP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxDefaultCoord", wxDefaultCoord, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_NULL", wxEVT_NULL, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_ANY", wxEVT_ANY, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_SCROLLBAR_UPDATED", wxEVT_COMMAND_SCROLLBAR_UPDATED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED", wxEVT_COMMAND_TOOL_DROPDOWN_CLICKED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_COMBOBOX_DROPDOWN", wxEVT_COMMAND_COMBOBOX_DROPDOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_COMBOBOX_CLOSEUP", wxEVT_COMMAND_COMBOBOX_CLOSEUP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_THREAD", wxEVT_THREAD, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUX1_DOWN", wxEVT_AUX1_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUX1_UP", wxEVT_AUX1_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUX1_DCLICK", wxEVT_AUX1_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUX2_DOWN", wxEVT_AUX2_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUX2_UP", wxEVT_AUX2_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_AUX2_DCLICK", wxEVT_AUX2_DCLICK, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SPIN_UP", wxEVT_SPIN_UP, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SPIN_DOWN", wxEVT_SPIN_DOWN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_SPIN", wxEVT_SPIN, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_ERASE_BACKGROUND", wxEVT_ERASE_BACKGROUND, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MOVE_START", wxEVT_MOVE_START, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_MOVE_END", wxEVT_MOVE_END, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_WINDOW_MODAL_DIALOG_CLOSED", wxEVT_WINDOW_MODAL_DIALOG_CLOSED, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxInvalidOffset", wxInvalidOffset, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxDefaultSpan", &wxDefaultSpan, php_wxGBSpan_entry, le_wxGBSpan, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxDefaultPosition", &wxDefaultPosition, php_wxPoint_entry, le_wxPoint, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxTheColourDatabase", wxTheColourDatabase, php_wxColourDatabase_entry, le_wxColourDatabase, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxDefaultSize", &wxDefaultSize, php_wxSize_entry, le_wxSize, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullGraphicsMatrix", &wxNullGraphicsMatrix, php_wxGraphicsMatrix_entry, le_wxGraphicsMatrix, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullIcon", &wxNullIcon, php_wxIcon_entry, le_wxIcon, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullIconBundle", &wxNullIconBundle, php_wxIconBundle_entry, le_wxIconBundle, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGE_ALPHA_TRANSPARENT", wxIMAGE_ALPHA_TRANSPARENT, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxIMAGE_ALPHA_OPAQUE", wxIMAGE_ALPHA_OPAQUE, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullImage", &wxNullImage, php_wxImage_entry, le_wxImage, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxLAYOUT_DEFAULT_MARGIN", wxLAYOUT_DEFAULT_MARGIN, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullPalette", &wxNullPalette, php_wxPalette_entry, le_wxPalette, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxNullPen", &wxNullPen, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxRED_PEN", wxRED_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxBLUE_PEN", wxBLUE_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxCYAN_PEN", wxCYAN_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxGREEN_PEN", wxGREEN_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxYELLOW_PEN", wxYELLOW_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxBLACK_PEN", wxBLACK_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxWHITE_PEN", wxWHITE_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxTRANSPARENT_PEN", wxTRANSPARENT_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxBLACK_DASHED_PEN", wxBLACK_DASHED_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxGREY_PEN", wxGREY_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxMEDIUM_GREY_PEN", wxMEDIUM_GREY_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxLIGHT_GREY_PEN", wxLIGHT_GREY_PEN, php_wxPen_entry, le_wxPen, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxThePenList", wxThePenList, php_wxPenList_entry, le_wxPenList, CONST_CS | CONST_PERSISTENT);
	REGISTER_LONG_CONSTANT("wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED", wxEVT_COMMAND_SPINCTRLDOUBLE_UPDATED, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxTLI_FIRST", &wxTLI_FIRST, php_wxTreeListItem_entry, le_wxTreeListItem, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxTLI_LAST", &wxTLI_LAST, php_wxTreeListItem_entry, le_wxTreeListItem, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxDefaultValidator", &wxDefaultValidator, php_wxValidator_entry, le_wxValidator, CONST_CS | CONST_PERSISTENT);
	wxPHP_REGISTER_RESOURCE_CONSTANT("wxDefaultVideoMode", &wxDefaultVideoMode, php_wxVideoMode_entry, le_wxVideoMode, CONST_CS | CONST_PERSISTENT);

	//Class enumerations

	zend_declare_class_constant_long(php_wxConfigBase_entry, "Type_Unknown", 1,  wxConfigBase::Type_Unknown TSRMLS_DC);
	zend_declare_class_constant_long(php_wxConfigBase_entry, "Type_String", 1,  wxConfigBase::Type_String TSRMLS_DC);
	zend_declare_class_constant_long(php_wxConfigBase_entry, "Type_Boolean", 1,  wxConfigBase::Type_Boolean TSRMLS_DC);
	zend_declare_class_constant_long(php_wxConfigBase_entry, "Type_Integer", 1,  wxConfigBase::Type_Integer TSRMLS_DC);
	zend_declare_class_constant_long(php_wxConfigBase_entry, "Type_Float", 1,  wxConfigBase::Type_Float TSRMLS_DC);
	zend_declare_class_constant_long(php_wxDataObject_entry, "Get", 1,  wxDataObject::Get TSRMLS_DC);
	zend_declare_class_constant_long(php_wxDataObject_entry, "Set", 1,  wxDataObject::Set TSRMLS_DC);
	zend_declare_class_constant_long(php_wxDataObject_entry, "Both", 1,  wxDataObject::Both TSRMLS_DC);
	zend_declare_class_constant_long(php_wxFile_entry, "read", 1,  wxFile::read TSRMLS_DC);
	zend_declare_class_constant_long(php_wxFile_entry, "write", 1,  wxFile::write TSRMLS_DC);
	zend_declare_class_constant_long(php_wxFile_entry, "read_write", 1,  wxFile::read_write TSRMLS_DC);
	zend_declare_class_constant_long(php_wxFile_entry, "write_append", 1,  wxFile::write_append TSRMLS_DC);
	zend_declare_class_constant_long(php_wxFile_entry, "write_excl", 1,  wxFile::write_excl TSRMLS_DC);
	zend_declare_class_constant_long(php_wxGrid_entry, "wxGridSelectCells", 1,  wxGrid::wxGridSelectCells TSRMLS_DC);
	zend_declare_class_constant_long(php_wxGrid_entry, "wxGridSelectRows", 1,  wxGrid::wxGridSelectRows TSRMLS_DC);
	zend_declare_class_constant_long(php_wxGrid_entry, "wxGridSelectColumns", 1,  wxGrid::wxGridSelectColumns TSRMLS_DC);
	zend_declare_class_constant_long(php_wxGrid_entry, "wxGridSelectRowsOrColumns", 1,  wxGrid::wxGridSelectRowsOrColumns TSRMLS_DC);
	zend_declare_class_constant_long(php_wxGrid_entry, "CellSpan_Inside", 1,  wxGrid::CellSpan_Inside TSRMLS_DC);
	zend_declare_class_constant_long(php_wxGrid_entry, "CellSpan_None", 1,  wxGrid::CellSpan_None TSRMLS_DC);
	zend_declare_class_constant_long(php_wxGrid_entry, "CellSpan_Main", 1,  wxGrid::CellSpan_Main TSRMLS_DC);
	zend_declare_class_constant_long(php_wxGridCellAttr_entry, "Any", 1,  wxGridCellAttr::Any TSRMLS_DC);
	zend_declare_class_constant_long(php_wxGridCellAttr_entry, "Cell", 1,  wxGridCellAttr::Cell TSRMLS_DC);
	zend_declare_class_constant_long(php_wxGridCellAttr_entry, "Row", 1,  wxGridCellAttr::Row TSRMLS_DC);
	zend_declare_class_constant_long(php_wxGridCellAttr_entry, "Col", 1,  wxGridCellAttr::Col TSRMLS_DC);
	zend_declare_class_constant_long(php_wxHelpEvent_entry, "Origin_Unknown", 1,  wxHelpEvent::Origin_Unknown TSRMLS_DC);
	zend_declare_class_constant_long(php_wxHelpEvent_entry, "Origin_Keyboard", 1,  wxHelpEvent::Origin_Keyboard TSRMLS_DC);
	zend_declare_class_constant_long(php_wxHelpEvent_entry, "Origin_HelpButton", 1,  wxHelpEvent::Origin_HelpButton TSRMLS_DC);
	zend_declare_class_constant_long(php_wxNavigationKeyEvent_entry, "IsBackward", 1,  wxNavigationKeyEvent::IsBackward TSRMLS_DC);
	zend_declare_class_constant_long(php_wxNavigationKeyEvent_entry, "IsForward", 1,  wxNavigationKeyEvent::IsForward TSRMLS_DC);
	zend_declare_class_constant_long(php_wxNavigationKeyEvent_entry, "WinChange", 1,  wxNavigationKeyEvent::WinChange TSRMLS_DC);
	zend_declare_class_constant_long(php_wxNavigationKeyEvent_entry, "FromTab", 1,  wxNavigationKeyEvent::FromTab TSRMLS_DC);
	zend_declare_class_constant_long(php_wxStandardPaths_entry, "ResourceCat_None", 1,  wxStandardPaths::ResourceCat_None TSRMLS_DC);
	zend_declare_class_constant_long(php_wxStandardPaths_entry, "ResourceCat_Messages", 1,  wxStandardPaths::ResourceCat_Messages TSRMLS_DC);
	
	wxUninitialize();
	
    return SUCCESS;
}

/**
 * TODO: Show something useful to phpinfo() using this function
 */
PHP_MINFO_FUNCTION(php_wxWidgets)
{
}


/**
 * Declaration of wxWidgets module
 */
zend_module_entry wxWidgets_module_entry = {
#if ZEND_MODULE_API_NO >= 20010901
     STANDARD_MODULE_HEADER,
#endif
    PHP_WXWIDGETS_EXTNAME,
    php_wxWidgets_functions, 	/* Functions (module functions) */
    PHP_MINIT(php_wxWidgets), 	/* MINIT (module initialization function) */
    NULL, 						/* MSHUTDOWN (module shutdown function) */
    NULL, 						/* RINIT (request initialization function) */
    NULL, 						/* RSHUTDOWN (request shutdown function) */
    NULL, 						/* MINFO (module information function) */
#if ZEND_MODULE_API_NO >= 20010901
    PHP_WXWIDGETS_VERSION,
#endif
    STANDARD_MODULE_PROPERTIES
};

/**
 * Insertion of wxWidgets module to the PHP runtime
 */
#ifdef COMPILE_DL_WXWIDGETS
extern "C" {
ZEND_GET_MODULE(wxWidgets)
}
#endif
